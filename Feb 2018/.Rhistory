head(weight_func)
insample<-nrow(data_matrix_120)
# d=0 for stationary series: see default settings
weight_func<-spec_comp(insample, data_matrix_120, d)$weight_func
head(weight_func)
Lag
L
Gamma
insample<-nrow(data_matrix_120)
# d=0 for stationary series: see default settings
weight_func<-spec_comp(insample, data_matrix_120, d)$weight_func
head(weight_func)
###################################################
### code chunk number 36: exercise_dfa_ms_4
###################################################
# Source the default (MSE-) parameter settings
source(file=paste(path.pgm,"control_default.r",sep=""))
# Estimate filter coefficients
mdfa_obj<-MDFA_mse(L,weight_func,Lag,Gamma)$mdfa_obj
# Filter coefficients
b_mat<-mdfa_obj$b
dimnames(b_mat)[[2]]<-c("x","leading indicator")
dimnames(b_mat)[[1]]<-paste("Lag ",0:(L-1),sep="")#dim(b_mat)
head(b_mat)
###################################################
### code chunk number 37: exercise_dfa_ms_4
###################################################
# Criterion value
round(mdfa_obj$MS_error,3)
###################################################
### code chunk number 39: exercise_dfa_ms_4
###################################################
y_target_leading_indicator<-y[,i_process]
perf_mse<-matrix(c(mean(na.exclude((yhat_multivariate_leading_indicator-
y_target_leading_indicator))^2),
mean(na.exclude((yhat[,i_process]-
y_target_leading_indicator))^2)),nrow=1)
dimnames(perf_mse)[[2]]<-c("bivariate MDFA","DFA")
dimnames(perf_mse)[[1]]<-"Sample MSE"
round(perf_mse,3)
yhat_multivariate_leading_indicator<-rep(NA,len)
for (j in 1:len)
yhat_multivariate_leading_indicator[j]<-sum(apply(b_mat*
data_matrix[lenh/2+(-len/2)-1+j:(j-L+1),2:3],1,sum))
###################################################
### code chunk number 39: exercise_dfa_ms_4
###################################################
y_target_leading_indicator<-y[,i_process]
perf_mse<-matrix(c(mean(na.exclude((yhat_multivariate_leading_indicator-
y_target_leading_indicator))^2),
mean(na.exclude((yhat[,i_process]-
y_target_leading_indicator))^2)),nrow=1)
dimnames(perf_mse)[[2]]<-c("bivariate MDFA","DFA")
dimnames(perf_mse)[[1]]<-"Sample MSE"
round(perf_mse,3)
###################################################
### code chunk number 40: z_mdfadfa_ar1_output.pdf
###################################################
i<-1
ymin<-min(min(y[,i]),min(na.exclude(yhat)[,i]))
ymax<-max(max(y[,i]),max(na.exclude(yhat)[,i]))
ts.plot(yhat[,i],main=paste("Sample MSE MDFA: ",ylab="",
round(perf_mse[1],3),", DFA: ",round(perf_mse[2],3),sep=""),col="blue",
ylim=c(ymin,ymax))
lines(y[,i],col="red")
lines(yhat_multivariate_leading_indicator,col="green")
mtext("DFA", side = 3, line = -2,at=len/2,col="blue")
mtext("target", side = 3, line = -1,at=len/2,col="red")
mtext("MDFA", side = 3, line = -3,at=len/2,col="green")
###################################################
### code chunk number 40: z_mdfadfa_ar1_output.pdf
###################################################
i<-1
ymin<-min(min(y[,i]),min(na.exclude(yhat)[,i]))
ymax<-max(max(y[,i]),max(na.exclude(yhat)[,i]))
ts.plot(yhat[,i],main=paste("Sample MSE MDFA: ",ylab="",
round(perf_mse[1],3),", DFA: ",round(perf_mse[2],3),sep=""),col="blue",
ylim=c(ymin,ymax))
lines(y[,i],col="red")
lines(yhat_multivariate_leading_indicator,col="green")
mtext("DFA", side = 3, line = -2,at=len/2,col="blue")
mtext("target", side = 3, line = -1,at=len/2,col="red")
mtext("MDFA", side = 3, line = -3,at=len/2,col="green")
snr_mat
lead_snr_mat
lead_snr_mat
###################################################
### code chunk number 38: exercise_dfa_ms_4
###################################################
yhat_multivariate_leading_indicator<-rep(NA,len)
for (j in 1:len)
yhat_multivariate_leading_indicator[j]<-sum(apply(b_mat*
data_matrix[lenh/2+(-len/2)-1+j:(j-L+1),2:3],1,sum))
###################################################
### code chunk number 39: exercise_dfa_ms_4
###################################################
y_target_leading_indicator<-y[,i_process]
perf_mse<-matrix(c(mean(na.exclude((yhat_multivariate_leading_indicator-
y_target_leading_indicator))^2),
mean(na.exclude((yhat[,i_process]-
y_target_leading_indicator))^2)),nrow=1)
dimnames(perf_mse)[[2]]<-c("bivariate MDFA","DFA")
dimnames(perf_mse)[[1]]<-"Sample MSE"
round(perf_mse,3)
###################################################
### code chunk number 40: z_mdfadfa_ar1_output.pdf
###################################################
i<-1
ymin<-min(min(y[,i]),min(na.exclude(yhat)[,i]))
ymax<-max(max(y[,i]),max(na.exclude(yhat)[,i]))
ts.plot(yhat[,i],main=paste("Sample MSE MDFA: ",ylab="",
round(perf_mse[1],3),", DFA: ",round(perf_mse[2],3),sep=""),col="blue",
ylim=c(ymin,ymax))
lines(y[,i],col="red")
lines(yhat_multivariate_leading_indicator,col="green")
mtext("DFA", side = 3, line = -2,at=len/2,col="blue")
mtext("target", side = 3, line = -1,at=len/2,col="red")
mtext("MDFA", side = 3, line = -3,at=len/2,col="green")
###################################################
### code chunk number 41: z_mdfadfa_ar1_output.pdf
###################################################
file = paste("z_mdfadfa_ar1_sym_output", sep = "")
cat("\\begin{figure}[H]")
cat("\\begin{center}")
cat("\\includegraphics[height=3in, width=6in]{", file, "}\n",sep = "")
cat("\\caption{Target (red) vs. DFA (blue) and bivariate MDFA (green) for the first process (a1=0.9)", sep = "")
cat("\\label{z_mdfadfa_ar1_sym_output}}", sep = "")
cat("\\end{center}")
cat("\\end{figure}")
###################################################
### code chunk number 42: exercise_dfa_ms_4
###################################################
# Inverse SNR: the variance of the standardized noise is one:
#   we thus normalize by the standard deviation of the data x
#   (second column of the data matrix)
scale_idiosyncratic_vec<-c(0,0.1,0.5,1,2)/sqrt(var(data_matrix_120[,2]))
# We select fractional leads: multiples of 0.25
#   A fractional lead of 0.25 corresponds roughly to a week
#   on a monthly time scale
delta_vec<-0.25*0:4
###################################################
### code chunk number 43: exercise_dfa_ms_4
###################################################
# Initialize the performance matrix
lead_snr_mat<-matrix(ncol=length(scale_idiosyncratic_vec),
nrow=length(delta_vec))
dimnames(lead_snr_mat)[[2]]<-paste("1/SNR=",
sqrt(var(data_matrix_120[,1]))*scale_idiosyncratic_vec,paste="")
dimnames(lead_snr_mat)[[2]][1]<-paste("Univ. design: ",
dimnames(lead_snr_mat)[[2]][1],sep="")
dimnames(lead_snr_mat)[[1]]<-paste("Lead ",delta_vec,paste="")
# Generate the idiosyncratic noise
set.seed(20)
eps<-rnorm(nrow(data_matrix_120))
# Loop over all combinations of leads and SNR-ratios
for (i in 1:length(scale_idiosyncratic_vec))#i<-1
{
for (j in 1:length(delta_vec))#j<-1
{
# Add the (suitably scaled) noise: no lead yet.
indicator<-data_matrix_120[,2]+scale_idiosyncratic_vec[i]*eps
# Overwrite the indicator column with the new time series
data_matrix_120[,3]<-indicator
# Compute the DFTs (full in-sample, for stationary series d=0)
insample<-nrow(data_matrix_120)
weight_func<-spec_comp(insample, data_matrix_120, d)$weight_func
# Compute the discrete frequency-grid omega_k: from zero to pi
omega_k<-(0:(nrow(weight_func)-1))*pi/(nrow(weight_func)-1)
# Introduce the fractional time-shift by rotation of the DFT
#   of the indicator (last column)
weight_func[,ncol(weight_func)]<-exp(-1.i*delta_vec[j]*omega_k)*
weight_func[,ncol(weight_func)]
# If the idiosyncratic noise is zero, then we use a univariate design
if (i==1)
weight_func<-weight_func[,-2]
# Compute optimal filters and derive the (frequency-domain) MSE
mdfa_obj<-MDFA_mse(L,weight_func,Lag,Gamma)$mdfa_obj
# Store the MSE
lead_snr_mat[j,i]<-mdfa_obj$MS_error
}
}
###################################################
### code chunk number 44: z_dfa_ar1_output.pdf
###################################################
library(Hmisc)
require(xtable)
#latex(cor_vec, dec = 1, , caption = "Example of using latex to create table",
#center = "centering", file = "", floating = FALSE)
xtable(lead_snr_mat, dec = 1,digits=rep(3,dim(lead_snr_mat)[2]+1),
paste("Effect of lead and of (inverse) signal-to-noise ratio on filter MSE",sep=""),
label=paste("lead_snr_mat",sep=""),
center = "centering", file = "", floating = FALSE)
lead_snr_mat
i<-1
scale_idiosyncratic_vec[i]
indicator<-data_matrix_120[,2]+scale_idiosyncratic_vec[i]*eps
# Overwrite the indicator column with the new time series
data_matrix_120[,3]<-indicator
data_matrix_120
j<-1
i<-1
indicator<-data_matrix_120[,2]+scale_idiosyncratic_vec[i]*eps
# Overwrite the indicator column with the new time series
data_matrix_120[,3]<-indicator
# Compute the DFTs (full in-sample, for stationary series d=0)
insample<-nrow(data_matrix_120)
weight_func<-spec_comp(insample, data_matrix_120, d)$weight_func
# Compute the discrete frequency-grid omega_k: from zero to pi
omega_k<-(0:(nrow(weight_func)-1))*pi/(nrow(weight_func)-1)
# Introduce the fractional time-shift by rotation of the DFT
#   of the indicator (last column)
weight_func[,ncol(weight_func)]<-exp(-1.i*delta_vec[j]*omega_k)*
weight_func[,ncol(weight_func)]
# If the idiosyncratic noise is zero, then we use a univariate design
if (i==1)
weight_func<-weight_func[,-2]
# Compute optimal filters and derive the (frequency-domain) MSE
mdfa_obj<-MDFA_mse(L,weight_func,Lag,Gamma)$mdfa_obj
mdfa_obj$b
i<-2
indicator<-data_matrix_120[,2]+scale_idiosyncratic_vec[i]*eps
# Overwrite the indicator column with the new time series
data_matrix_120[,3]<-indicator
# Compute the DFTs (full in-sample, for stationary series d=0)
insample<-nrow(data_matrix_120)
weight_func<-spec_comp(insample, data_matrix_120, d)$weight_func
# Compute the discrete frequency-grid omega_k: from zero to pi
omega_k<-(0:(nrow(weight_func)-1))*pi/(nrow(weight_func)-1)
# Introduce the fractional time-shift by rotation of the DFT
#   of the indicator (last column)
weight_func[,ncol(weight_func)]<-exp(-1.i*delta_vec[j]*omega_k)*
weight_func[,ncol(weight_func)]
# If the idiosyncratic noise is zero, then we use a univariate design
if (i==1)
weight_func<-weight_func[,-2]
# Compute optimal filters and derive the (frequency-domain) MSE
mdfa_obj<-MDFA_mse(L,weight_func,Lag,Gamma)$mdfa_obj #mdfa_obj$b
mdfa_obj$b
i<-3
indicator<-data_matrix_120[,2]+scale_idiosyncratic_vec[i]*eps
# Overwrite the indicator column with the new time series
data_matrix_120[,3]<-indicator
# Compute the DFTs (full in-sample, for stationary series d=0)
insample<-nrow(data_matrix_120)
weight_func<-spec_comp(insample, data_matrix_120, d)$weight_func
# Compute the discrete frequency-grid omega_k: from zero to pi
omega_k<-(0:(nrow(weight_func)-1))*pi/(nrow(weight_func)-1)
# Introduce the fractional time-shift by rotation of the DFT
#   of the indicator (last column)
weight_func[,ncol(weight_func)]<-exp(-1.i*delta_vec[j]*omega_k)*
weight_func[,ncol(weight_func)]
# If the idiosyncratic noise is zero, then we use a univariate design
if (i==1)
weight_func<-weight_func[,-2]
# Compute optimal filters and derive the (frequency-domain) MSE
mdfa_obj<-MDFA_mse(L,weight_func,Lag,Gamma)$mdfa_obj #mdfa_obj$b
mdfa_obj$b
mdfa_obj$MS_error
i<-4
indicator<-data_matrix_120[,2]+scale_idiosyncratic_vec[i]*eps
# Overwrite the indicator column with the new time series
data_matrix_120[,3]<-indicator
# Compute the DFTs (full in-sample, for stationary series d=0)
insample<-nrow(data_matrix_120)
weight_func<-spec_comp(insample, data_matrix_120, d)$weight_func
# Compute the discrete frequency-grid omega_k: from zero to pi
omega_k<-(0:(nrow(weight_func)-1))*pi/(nrow(weight_func)-1)
# Introduce the fractional time-shift by rotation of the DFT
#   of the indicator (last column)
weight_func[,ncol(weight_func)]<-exp(-1.i*delta_vec[j]*omega_k)*
weight_func[,ncol(weight_func)]
# If the idiosyncratic noise is zero, then we use a univariate design
if (i==1)
weight_func<-weight_func[,-2]
# Compute optimal filters and derive the (frequency-domain) MSE
mdfa_obj<-MDFA_mse(L,weight_func,Lag,Gamma)$mdfa_obj #mdfa_obj$b
mdfa_obj$b
mdfa_obj$MS_error
lead_snr_mat
var(data_matrix_120[,1])
scale_idiosyncratic_vec
library(shiny)
library(Quandl)
QuandlAPIKey <- "cxvP9tfN13a9tvMmsXag"
Quandl.api_key(QuandlAPIKey)
Data <- Quandl("ECB/EURUSD")
Data
Data
Data$Date <- rev(Data$Date)
Data$Value <- rev(Data$Value)
Data$Date <- as.Date(Data$Date, format = "yyyy/mm/dd")
ui <- fluidPage(
title = "EMA Backtest",
fluidRow(column(4,
sliderInput(inputId = "EMALength", label = "EMA Length", value = 14,
min = 1, max = 500),
numericInput(inputId = "Alpha", label = "Alpha", value = 0.2, min = NA, max = NA, step = NA,
width = NULL)
),
column(4,
dateInput(inputId = "FromDate", label = "From Date", value = "2008/01/01", min = NULL, max = NULL,
format = "yyyy/mm/dd", startview = "month", weekstart = 0,
language = "en", width = NULL),
dateInput(inputId = "ToDate", label = "To Date", value = "2015/01/01", min = NULL, max = NULL,
format = "yyyy/mm/dd", startview = "month", weekstart = 0,
language = "en", width = NULL)
),
column(4,
numericInput(inputId = "TradeSize", label = "Trade size", value = 100000, min = NA, max = NA, step = NA,
width = NULL),
checkboxInput(inputId = "TradeArrows", label = "Trade Arrows", value = FALSE, width = NULL),
numericInput(inputId = "ArrowWidth", label = "Arrow width", value = 4, min = NA, max = NA, step = NA,
width = NULL)
)
),
plotOutput("plot")
)
server <- function(input,output, session){
observe({
# Invalidate this observer every hour (360000 milliseconds)
invalidateLater(360000, session)
Data <- Quandl("ECB/EURUSD")
Data$Date <- rev(Data$Date)
Data$Value <- rev(Data$Value)
Data$Date <- as.Date(Data$Date, format = "yyyy/mm/dd")
body <- paste("There has been a change in the signal of the EMA algorithm, now the position
is", toString(Data$SignalChange[0]))
sendmail(
from = sender,
to = r,
subject= subject,
body = body,
smtp = list(host.name = "mail.mydomain.com", port = 465, user.name = sender, passwd = alas9781, ssl = TRUE),
authenticate = TRUE,
send = TRUE
)
})
output$plot <- renderPlot({
# Subsetting rows within the dates inputted and removing unnecessary columns in the dataset
Data <- subset(Data, Data$Date >= as.Date(input$FromDate)
& Data$Date <= as.Date(input$ToDate))
# Weighting multiplier
W = input$Alpha
# Calculating a Simple moving average
SMACalc = NA
for (i in 1:length(Data$Value)){
if (i>= input$EMALength)
SMACalc[i] <- round(mean(c(Data$Value[i-input$EMALength+1:i])), 5) else
SMACalc[i] <- NA
}
# Calculating a Exponential moving average
EMACalc = NA
for (i in 1:length(Data$Value)){
if (i> input$EMALength)
EMACalc[i] <- round((Data$Value[i] - EMACalc[i-1])*W + EMACalc[i-1],5) else
if (i == input$EMALength)
EMACalc[i] <- SMACalc[i] else
EMACalc[i] <- NA
}
# Inspecting Data
head(Data)
# Resetting row names
rownames(Data) <- seq(length=nrow(Data))
# Calculating the EMA Values and inserting the in the Data dataframe
EMA <- EMACalc
Data$EMA <- EMA
# Checking closing prices vs. EMA values to see if we should be long (price above EMA)
# or short (price below EMA)
Data$PriceAboveEMA <- NA
for (i in 1:nrow(Data)){
if (is.na(Data$EMA[i]) == FALSE) {
if (Data$Value[i] > Data$EMA[i])
Data$PriceAboveEMA[i] <- 1
else
Data$PriceAboveEMA[i] <- -1
}
}
# Calculating daily PL
Data$DailyPL <- NA
for (i in 2:nrow(Data)){
if (is.na(Data$PriceAboveEMA[i-1]) == FALSE) {
Data$DailyPL[i] <- round(input$TradeSize*(Data$Value[i]-Data$Value[i-1])*Data$PriceAboveEMA[i-1],2)
}
}
# Calculating the cumulative equity gained (or loss)
Data$CumPL <- NA
Data$CumPL <- cumsum(c(rep(0, input$EMALength+1), Data$DailyPL[(input$EMALength+2):nrow(Data)]))
# Signal change. This column marks the actual trades with the number of lots included.
Data$SignalChange <- 0
Data$SignalChange[2:length(Data$PriceAboveEMA)] <- Data$PriceAboveEMA[2:length(Data$PriceAboveEMA)] - Data$PriceAboveEMA[1:(length(Data$PriceAboveEMA)-1)]
# The function  plots the EMA alongside the price series with markers for
# trades
par(mfrow = c(2,1))
plot(y = Data$CumPL/1000, x = as.Date(Data$Date), type = "l", main = "Equity", xlab = "Daily time series",
ylab = "$ (k)", col = "darkgreen", lwd = 2)
plot(y = Data$Value, x = as.Date(Data$Date), type = "l", main = "Price series + EMA",
xlab = "Daily time series", ylab = "Price", col = "black", lwd = 2)
lines(y = Data$EMA[!is.na(Data$EMA)], x = as.Date(Data$Date[!is.na(Data$EMA)]), type = "l", col = "darkgray", lwd = 2)
if (input$TradeArrows == TRUE){
arrows(x0 = Data$Date[Data$SignalChange > 0], y0 = (Data$Value[Data$SignalChange > 0]-0.04), x1 = Data$Date[Data$SignalChange > 0],
y1 = (Data$Value[Data$SignalChange > 0]-0.01), lwd = input$ArrowWidth, col = "blue")
arrows(x0 = Data$Date[Data$SignalChange < 0], y0 = (Data$Value[Data$SignalChange < 0]+0.04), x1 = Data$Date[Data$SignalChange < 0],
y1 = (Data$Value[Data$SignalChange < 0]+0.01), lwd = input$ArrowWidth, col = "red")
}
})
}
shinyApp(ui = ui, server = server)
library(shiny)
library(Quandl)
library(sendmailR)
sender <- "martingjesus@gmail.com"
r <- c("martingjesus@gmail.com", "a.sidler@edrofine.ch", "MBenshemesh@gmail.com")
sender <- "wlmr@zhaw.ch"
r <- c("wlmr@zhaw.ch")
subject <- "EMA Signal change"
pass <- ""
shinyApp(ui = ui, server = server)
Data <- subset(Data, Data$Date >= as.Date(input$FromDate)
& Data$Date <= as.Date(input$ToDate))
server <- function(input,output, session){
if (F)
{
observe({
# Invalidate this observer every hour (360000 milliseconds)
invalidateLater(360000, session)
Data <- Quandl("ECB/EURUSD")
Data$Date <- rev(Data$Date)
Data$Value <- rev(Data$Value)
Data$Date <- as.Date(Data$Date, format = "yyyy/mm/dd")
body <- paste("There has been a change in the signal of the EMA algorithm, now the position
is", toString(Data$SignalChange[0]))
sendmail(
from = sender,
to = r,
subject= subject,
body = body,
smtp = list(host.name = "mail.mydomain.com", port = 465, user.name = sender, passwd = alas9781, ssl = TRUE),
authenticate = TRUE,
send = TRUE
)
})
}
output$plot <- renderPlot({
# Subsetting rows within the dates inputted and removing unnecessary columns in the dataset
Data <- subset(Data, Data$Date >= as.Date(input$FromDate)
& Data$Date <= as.Date(input$ToDate))
# Weighting multiplier
W = input$Alpha
# Calculating a Simple moving average
SMACalc = NA
for (i in 1:length(Data$Value)){
if (i>= input$EMALength)
SMACalc[i] <- round(mean(c(Data$Value[i-input$EMALength+1:i])), 5) else
SMACalc[i] <- NA
}
# Calculating a Exponential moving average
EMACalc = NA
for (i in 1:length(Data$Value)){
if (i> input$EMALength)
EMACalc[i] <- round((Data$Value[i] - EMACalc[i-1])*W + EMACalc[i-1],5) else
if (i == input$EMALength)
EMACalc[i] <- SMACalc[i] else
EMACalc[i] <- NA
}
# Inspecting Data
head(Data)
# Resetting row names
rownames(Data) <- seq(length=nrow(Data))
# Calculating the EMA Values and inserting the in the Data dataframe
EMA <- EMACalc
Data$EMA <- EMA
# Checking closing prices vs. EMA values to see if we should be long (price above EMA)
# or short (price below EMA)
Data$PriceAboveEMA <- NA
for (i in 1:nrow(Data)){
if (is.na(Data$EMA[i]) == FALSE) {
if (Data$Value[i] > Data$EMA[i])
Data$PriceAboveEMA[i] <- 1
else
Data$PriceAboveEMA[i] <- -1
}
}
# Calculating daily PL
Data$DailyPL <- NA
for (i in 2:nrow(Data)){
if (is.na(Data$PriceAboveEMA[i-1]) == FALSE) {
Data$DailyPL[i] <- round(input$TradeSize*(Data$Value[i]-Data$Value[i-1])*Data$PriceAboveEMA[i-1],2)
}
}
# Calculating the cumulative equity gained (or loss)
Data$CumPL <- NA
Data$CumPL <- cumsum(c(rep(0, input$EMALength+1), Data$DailyPL[(input$EMALength+2):nrow(Data)]))
# Signal change. This column marks the actual trades with the number of lots included.
Data$SignalChange <- 0
Data$SignalChange[2:length(Data$PriceAboveEMA)] <- Data$PriceAboveEMA[2:length(Data$PriceAboveEMA)] - Data$PriceAboveEMA[1:(length(Data$PriceAboveEMA)-1)]
# The function  plots the EMA alongside the price series with markers for
# trades
par(mfrow = c(2,1))
plot(y = Data$CumPL/1000, x = as.Date(Data$Date), type = "l", main = "Equity", xlab = "Daily time series",
ylab = "$ (k)", col = "darkgreen", lwd = 2)
plot(y = Data$Value, x = as.Date(Data$Date), type = "l", main = "Price series + EMA",
xlab = "Daily time series", ylab = "Price", col = "black", lwd = 2)
lines(y = Data$EMA[!is.na(Data$EMA)], x = as.Date(Data$Date[!is.na(Data$EMA)]), type = "l", col = "darkgray", lwd = 2)
if (input$TradeArrows == TRUE){
arrows(x0 = Data$Date[Data$SignalChange > 0], y0 = (Data$Value[Data$SignalChange > 0]-0.04), x1 = Data$Date[Data$SignalChange > 0],
y1 = (Data$Value[Data$SignalChange > 0]-0.01), lwd = input$ArrowWidth, col = "blue")
arrows(x0 = Data$Date[Data$SignalChange < 0], y0 = (Data$Value[Data$SignalChange < 0]+0.04), x1 = Data$Date[Data$SignalChange < 0],
y1 = (Data$Value[Data$SignalChange < 0]+0.01), lwd = input$ArrowWidth, col = "red")
}
})
}
shinyApp(ui = ui, server = server)
