### R code from vignette source 'C:/wia_desktop/2018/Projekte/MDFA-Legacy/Sweave/Rnw/MDFA_Legacy.Rnw'
### Encoding: ISO8859-1

###################################################
### code chunk number 1: init
###################################################
#rm(list=ls())


###################################################
### code chunk number 2: init
###################################################
# Load packages: time series and xts
#library(tseries)
library(xts)
# State-space models (will be replicated by MDFA) 
library(dlm)
# Classic filter designs (be replicated by MDFA)
library(mFilter)
# Numerical package 
library(numDeriv)
# Graphical package for recession-shading (empirical examples based on US-GDP)
library(tis)
# Library for tables
library(Hmisc)
require(xtable)
#install.packages("devtools")
library(devtools)
# Load MDFA package from github
devtools::install_github("wiaidp/MDFA")
# MDFA package
library(MDFA)


###################################################
### code chunk number 3: init
###################################################
# Quandl
# Load required libraries
library(RCurl)    # For getURL() and curl handler / cookie / google login
library(stringr)  # For str_trim() to trip whitespace from strings
library(Quandl)
require (Quandl)
#Quandl.api_key("ivVdJGV57TXA1RX5jgvp")


###################################################
### code chunk number 4: init
###################################################
# Load fresh data from quandl: T/F
#   Default-setting is False: the data will be loaded from local data folder
load_from_quandl <- F


###################################################
### code chunk number 5: init
###################################################
# Set main path
path.main <- paste(getwd(),"/Sweave/",sep="")
#path.main <- "C:\\Users\\Tucker\\Documents\\MDFAbook\\"
# Set paths to subfolders
  # Path to Latex-folder: all pdfs generated by the R code are filed there
path.out <- paste(path.main,"Latex/",sep="")
  # Path to data (US-GDP)
path.dat <- paste(path.main,"Data/",sep="")
  # Path to code that is part of MDFA-Legacy project but not part of MDFA package 
path.pgm <- paste(path.main,"R/",sep="")


###################################################
### code chunk number 6: dft
###################################################
head(per,100)


###################################################
### code chunk number 7: dfa_ms
###################################################
# This function computes MSE DFA solutions 
# L is the length of the MA filter,
# periodogram is the frequency weighting function in the DFA
# Gamma is the transfer function of the symmetric filter (target) and
# Lag is the lag-parameter: Lag=0 implies real-time filtering, Lag=L/2
#     implies symmetric filter
# The function returns optimal coefficients as well as the transfer 
#     function of the optimized real-time filter
head(dfa_ms,100)


###################################################
### code chunk number 8: dfa_ms
###################################################
head(dfa_analytic)


###################################################
### code chunk number 9: dfa_ms
###################################################
set.seed(1)
len <- 100
target <- arima.sim(list(ar=0.9),n=len)
explanatory_2 <- target+rnorm(len)
explanatory <- cbind(target,explanatory_2)
x <- cbind(target,explanatory)
dimnames(x)[[2]] <- c("target","explanatory 1","explanatory 2")
head(x)


###################################################
### code chunk number 10: dfa_ms
###################################################
x<-cbind(x[,1],lag(x[,2:3],-1))
dimnames(x)[[2]]<-c("target","lagged explanatory 1","lagged explanatory 2")
head(x)


###################################################
### code chunk number 11: dfa_ms
###################################################
spec_comp


###################################################
### code chunk number 12: dfa_ms
###################################################
head(mdfa_analytic)


###################################################
### code chunk number 13: dfa_ms
###################################################
weight_func <- matrix(rep(1:6,2),ncol=2)
L <- 2


###################################################
### code chunk number 14: dfa_ms
###################################################
d<-0
lin_eta<-F
lambda<-0
Lag<-0
eta<-0
i1<-F
i2<-F
weight_constraint<-rep(1/(ncol(weight_func)-1),ncol(weight_func)-1)
lambda_cross<-lambda_smooth<-0
lambda_decay<-c(0,0)
lin_expweight<-F
shift_constraint<-rep(0,ncol(weight_func)-1)
grand_mean<-F
b0_H0<-NULL
c_eta<-F
weights_only<-F
weight_structure<-c(0,0)
white_noise<-F
synchronicity<-F
cutoff<-pi
lag_mat<-matrix(rep(0:(L-1),ncol(weight_func)),nrow=L)
troikaner<-F


###################################################
### code chunk number 15: dfa_ms
###################################################
source(file=paste(path.pgm,"control_default.r",sep=""))


###################################################
### code chunk number 16: dfa_ms
###################################################
source(file=paste(path.pgm,"mplot_func.r",sep=""))


###################################################
### code chunk number 17: dfa_ms
###################################################
head(MDFA_mse)
head(MDFA_mse_constraint)
head(MDFA_cust)
head(MDFA_cust_constraint)
head(MDFA_reg)
head(MDFA_reg_constraint)


###################################################
### code chunk number 18: exercise_dfa_ms_1
###################################################
# Generate series of length 2000
lenh<-2000
len<-120
# Specify the AR-coefficients
a_vec<-c(0.9,0.1,-0.9)
xh<-matrix(nrow=lenh,ncol=length(a_vec))
x<-matrix(nrow=len,ncol=length(a_vec))
yhat<-x
y<-x
# Generate series for each AR(1)-process
for (i in 1:length(a_vec))
{
# We want the same random-seed for each process  
  set.seed(10)
  xh[,i]<-arima.sim(list(ar=a_vec[i]),n=lenh)
}


###################################################
### code chunk number 19: exercise_dfa_ms_2
###################################################
# Extract 120 observations in the midddle of the longer series
x<-xh[lenh/2+(-len/2):((len/2)-1),]
# Compute the coefficients of the symmetric target filter
cutoff<-pi/6
# Order of approximation
ord<-1000
# Filter weights ideal trend (See DFA)
gamma<-c(cutoff/pi,(1/pi)*sin(cutoff*1:ord)/(1:ord))
# Compute the outputs yt of the (truncated) symmetric target filter
for (i in 1:length(a_vec))
{
  for (j in 1:120)
  {
    y[j,i]<-gamma[1:900]%*%xh[lenh/2+(-len/2)-1+(j:(j-899)),i]+
    gamma[2:900]%*%xh[lenh/2+(-len/2)+(j:(j+898)),i]
  }
}


###################################################
### code chunk number 20: exercise_dfa_ms_3
###################################################
plot_T<-F
periodogram<-matrix(ncol=3,nrow=len/2+1)
trffkt<-periodogram
perf_mat<-matrix(nrow=3,ncol=2)
dimnames(perf_mat)[[2]]<-c("Criterion Value",
                           "Mean-Square Sample Filter Error")
dimnames(perf_mat)[[1]]<-c("a1=0.9","a1=0.1","a1=-0.9")
# Filter length
L<-12
# Real-time design
Lag<-0
# Target ideal trend
Gamma<-c(1,(1:(len/2))<len/12)
b<-matrix(nrow=L,ncol=3)
# Compute real-time filters
for (i in 1:3)#i<-1
{
# Compute the periodogram based on the data (length 120)  
  periodogram[,i]<-per(x[,i],plot_T)$per
# Optimize filters
  filt<-dfa_ms(L,periodogram[,i],Lag,Gamma)
  trffkt[,i]<-filt$trffkt
  b[,i]<-filt$b
# Compute real-time outputs (we can use the longer series in order 
# to obtain estimates for time points t=1,...,11)
  for (j in 1:len)
    yhat[j,i]<-filt$b%*%xh[lenh/2+(-len/2)-1+j:(j-L+1),i]
}


###################################################
### code chunk number 21: exercise_dfa_ms_3
###################################################
for (i in 1:3)
{
# Compute criterion values
  perf_mat[i,1]<-(2*pi/length(Gamma))*
                  abs(Gamma-trffkt[,i])^2%*%periodogram[,i]
}
perf_mat[,1]


###################################################
### code chunk number 22: exercise_dfa_ms_4
###################################################
# Compute time-domain MSE
mse<-apply(na.exclude((yhat-y))^2,2,mean)
perf_mat[,2]<-mse
round(perf_mat[,2],3)


###################################################
### code chunk number 23: z_dfa_ar1_output.pdf
###################################################
  library(Hmisc)
  require(xtable)
  #latex(cor_vec, dec = 1, , caption = "Example of using latex to create table",
  #center = "centering", file = "", floating = FALSE)
  xtable(perf_mat, dec = 1,digits=rep(3,dim(perf_mat)[2]+1),
  paste("Criterion values vs. sample (mean-square) filter errors",sep=""),
  label=paste("perf_mat",sep=""),
  center = "centering", file = "", floating = FALSE)


###################################################
### code chunk number 24: z_dfa_ar1_output.pdf
###################################################
file = paste("z_dfa_ar1_sym_output.pdf", sep = "")
pdf(file = paste(path.out,file,sep=""), paper = "special", 
    width = 6, height = 6)
par(mfrow=c(3,1))
for (i in 1:3)   #i<-1
{
  ymin<-min(min(y[,i]),min(na.exclude(yhat)[,i]))
  ymax<-max(max(y[,i]),max(na.exclude(yhat)[,i]))
  ts.plot(yhat[,i],main=paste("Time-domain MSE = ",
  round(mse[i],3)," , Frequency-domain MSE = ",
  round(perf_mat[i,1],3),", a1 = ",a_vec[i],sep=""),col="blue",
        ylim=c(ymin,ymax),
  gpars=list(xlab="", ylab=""))
  lines(y[,i],col="red")
  mtext("Real-time", side = 3, line = -1,at=len/2,col="blue")
  mtext("target", side = 3, line = -2,at=len/2,col="red")
}
invisible(dev.off())


###################################################
### code chunk number 25: z_dfa_ar1_output.pdf
###################################################
file = paste("z_dfa_ar1_sym_output", sep = "")
cat("\\begin{figure}[H]")
cat("\\begin{center}")
cat("\\includegraphics[height=6in, width=6in]{", file, "}\n",sep = "")
cat("\\caption{Real-time filter output (blue) vs. targets (red) for a1=0.9 (top), a1=0.1 (middle) and a1=-0.9 (bottom)", sep = "")
cat("\\label{z_dfa_ar1_sym_output}}", sep = "")
cat("\\end{center}")
cat("\\end{figure}")


###################################################
### code chunk number 26: z_dfa_ar1_output.pdf
###################################################

omega_k<-pi*0:(len/2)/(len/2)
file = paste("z_dfa_ar1_amp_shift.pdf", sep = "")
pdf(file = paste(path.out,file,sep=""), paper = "special", width = 6, 
    height = 6)
par(mfrow=c(2,2))
amp<-abs(trffkt)
shift<-Arg(trffkt)/omega_k
plot(amp[,1],type="l",main="Amplitude functions",
axes=F,xlab="Frequency",ylab="Amplitude",col="black",ylim=c(0,1))
lines(amp[,2],col="orange")
lines(amp[,3],col="green")
lines(Gamma,col="violet")
mtext("Amplitude a1=0.9", side = 3, line = -1,at=len/4,col="black")
mtext("Amplitude a1=0.1", side = 3, line = -2,at=len/4,col="orange")
mtext("Amplitude a1=-0.9", side = 3, line = -3,at=len/4,col="green")
mtext("Target", side = 3, line = -4,at=len/4,col="violet")
axis(1,at=c(0,1:6*len/12+1),labels=c("0","pi/6","2pi/6","3pi/6",
"4pi/6","5pi/6","pi"))
axis(2)
box()
plot(shift[,1],type="l",main="Time-shifts",
axes=F,xlab="Frequency",ylab="Shift",col="black",
ylim=c(0,max(na.exclude(shift[,3]))))
lines(shift[,2],col="orange")
lines(shift[,3],col="green")
lines(rep(0,len/2+1),col="violet")
mtext("Shift a1=0.9", side = 3, line = -1,at=len/4,col="black")
mtext("Shift a1=0.1", side = 3, line = -2,at=len/4,col="orange")
mtext("Shift a1=-0.9", side = 3, line = -3,at=len/4,col="green")
mtext("Target", side = 3, line = -4,at=len/4,col="violet")
axis(1,at=c(0,1:6*len/12+1),labels=c("0","pi/6","2pi/6","3pi/6",
"4pi/6","5pi/6","pi"))
axis(2)
box()
plot(periodogram[,1],type="l",main="Periodograms",
axes=F,xlab="Frequency",ylab="Periodogram",col="black",
ylim=c(0,max(periodogram[,3])/6))
lines(periodogram[,2],col="orange")
lines(periodogram[,3],col="green")
mtext("Periodogram a1=0.9", side = 3, line = -1,at=len/4,col="black")
mtext("Periodogram a1=0.1", side = 3, line = -2,at=len/4,col="orange")
mtext("Periodogram a1=-0.9", side = 3, line = -3,at=len/4,col="green")
axis(1,at=c(0,1:6*len/12+1),labels=c("0","pi/6","2pi/6","3pi/6",
"4pi/6","5pi/6","pi"))
axis(2)
box()
invisible(dev.off())


###################################################
### code chunk number 27: z_dfa_ar1_output.pdf
###################################################
file = paste("z_dfa_ar1_amp_shift.pdf", sep = "")
cat("\\begin{figure}[H]")
cat("\\begin{center}")
cat("\\includegraphics[height=6in, width=6in]{", file, "}\n",sep = "")
cat("\\caption{Amplitude (top left), time-shifts (top-right) and periodograms (bottom left) for
a1=0.9 (black), a1=0.1 (orange) and a1=-0.9 (green)", sep = "")
cat("\\label{z_dfa_ar1_amp_shift}}", sep = "")
cat("\\end{center}")
cat("\\end{figure}")


###################################################
### code chunk number 28: dfa_ms
###################################################
dfa_ms


###################################################
### code chunk number 29: exercise_dfa_ms_4
###################################################
# Select the first process
i_process<-1
# Define the data-matrix:
# The first column must be the target series. 
# Columns 2,3,... are the explanatory series. In a univariate setting
# target and explanatory variable are identical
data_matrix<-cbind(x[,i_process],x[,i_process])
# Determine the in-sample period (fully in sample)
insample<-nrow(data_matrix)
# Compute the DFT by relying on the multivariate DFT-function: 
#   d=0 for stationary data (default settings)
weight_func<-spec_comp(insample, data_matrix, d)$weight_func 


###################################################
### code chunk number 30: exercise_dfa_ms_4
###################################################
# Source the default (MSE-) parameter settings
source(file=paste(path.pgm,"control_default.r",sep=""))
# Estimate filter coefficients:
mdfa_obj<-mdfa_analytic(L, lambda, weight_func, Lag, Gamma, eta, cutoff, i1,i2, weight_constraint, lambda_cross, lambda_decay, lambda_smooth,lin_eta, shift_constraint, grand_mean, b0_H0, c_eta, weight_structure,white_noise, synchronicity, lag_mat, troikaner) 
# Filter coefficients: compare MDFA and previous DFA
b_mat<-cbind(mdfa_obj$b,b[,i_process])
dimnames(b_mat)[[2]]<-c("MDFA","DFA")
dimnames(b_mat)[[1]]<-paste("lag ",0:(L-1),sep="")
as.matrix(round(b_mat,5))


###################################################
### code chunk number 31: exercise_dfa_ms_4
###################################################
mdfa_obj_mse<-MDFA_mse(L,weight_func,Lag,Gamma)$mdfa_obj 


###################################################
### code chunk number 32: exercise_dfa_ms_4
###################################################
b_mat<-cbind(b_mat,mdfa_obj_mse$b)
dimnames(b_mat)[[2]][3]<-"MDFA_mse"
dimnames(b_mat)[[1]]<-paste("lag ",0:(L-1),sep="")
head(as.matrix(round(b_mat,5)))


###################################################
### code chunk number 33: exercise_dfa_ms_4
###################################################
# Criterion value
criterion_mdfa<-mdfa_obj$MS_error  
# DFA-numbers are stored in perf_mat
crit_mdfa<-matrix(c(criterion_mdfa,perf_mat[i_process,1],
                    perf_mat[i_process,2]),ncol=1)
dimnames(crit_mdfa)[[1]]<-c("MDFA criterion",
                            "DFA criterion","sample MSE")
dimnames(crit_mdfa)[[2]]<-"MSE estimates"
t(round(crit_mdfa,3))


###################################################
### code chunk number 34: exercise_dfa_ms_4
###################################################
set.seed(12)
# Select the AR(1)-process with coefficient 0.9
i_process<-1
# Scaling of the idiosyncratic noise
scale_idiosyncratic<-0.1
eps<-rnorm(nrow(xh))
indicator<-xh[,i_process]+scale_idiosyncratic*eps
# Data: first column=target, second column=x, 
#   third column=shifted (leading) indicator
data_matrix<-cbind(xh[,i_process],xh[,i_process],c(indicator[2:nrow(xh)],NA))
dimnames(data_matrix)[[2]]<-c("target","x","leading indicator")
# Extract 120 observations from the long sample
data_matrix_120<-data_matrix[lenh/2+(-len/2):((len/2)-1),]
head(round(data_matrix_120,4))


###################################################
### code chunk number 35: exercise_dfa_ms_4
###################################################
# Fully in sample
insample<-nrow(data_matrix_120)
# d=0 for stationary series: see default settings
weight_func<-spec_comp(insample, data_matrix_120, d)$weight_func 


###################################################
### code chunk number 36: exercise_dfa_ms_4
###################################################
# Source the default (MSE-) parameter settings
source(file=paste(path.pgm,"control_default.r",sep=""))
# Estimate filter coefficients
mdfa_obj<-MDFA_mse(L,weight_func,Lag,Gamma)$mdfa_obj 
# Filter coefficients
b_mat<-mdfa_obj$b
dimnames(b_mat)[[2]]<-c("x","leading indicator")
dimnames(b_mat)[[1]]<-paste("Lag ",0:(L-1),sep="")#dim(b_mat)
head(b_mat)


###################################################
### code chunk number 37: exercise_dfa_ms_4
###################################################
# Criterion value
round(mdfa_obj$MS_error,3)


###################################################
### code chunk number 38: exercise_dfa_ms_4
###################################################
yhat_multivariate_leading_indicator<-rep(NA,len)
for (j in 1:len)
  yhat_multivariate_leading_indicator[j]<-sum(apply(b_mat*
                  data_matrix[lenh/2+(-len/2)-1+j:(j-L+1),2:3],1,sum))


###################################################
### code chunk number 39: exercise_dfa_ms_4
###################################################
y_target_leading_indicator<-y[,i_process]
perf_mse<-matrix(c(mean(na.exclude((yhat_multivariate_leading_indicator-
          y_target_leading_indicator))^2),
          mean(na.exclude((yhat[,i_process]-
          y_target_leading_indicator))^2)),nrow=1)
dimnames(perf_mse)[[2]]<-c("bivariate MDFA","DFA")
dimnames(perf_mse)[[1]]<-"Sample MSE"
round(perf_mse,3)


###################################################
### code chunk number 40: z_mdfadfa_ar1_output.pdf
###################################################
file = paste("z_mdfadfa_ar1_sym_output.pdf", sep = "")
pdf(file = paste(path.out,file,sep=""), paper = "special", width = 6, height = 6)
i<-1
ymin<-min(min(y[,i]),min(na.exclude(yhat)[,i]))
ymax<-max(max(y[,i]),max(na.exclude(yhat)[,i]))
ts.plot(yhat[,i],main=paste("Sample MSE MDFA: ",ylab="",
round(perf_mse[1],3),", DFA: ",round(perf_mse[2],3),sep=""),col="blue",
      ylim=c(ymin,ymax))
lines(y[,i],col="red")
lines(yhat_multivariate_leading_indicator,col="green")
mtext("DFA", side = 3, line = -2,at=len/2,col="blue")
mtext("target", side = 3, line = -1,at=len/2,col="red")
mtext("MDFA", side = 3, line = -3,at=len/2,col="green")
invisible(dev.off())


###################################################
### code chunk number 41: z_mdfadfa_ar1_output.pdf
###################################################
file = paste("z_mdfadfa_ar1_sym_output", sep = "")
cat("\\begin{figure}[H]")
cat("\\begin{center}")
cat("\\includegraphics[height=3in, width=6in]{", file, "}\n",sep = "")
cat("\\caption{Target (red) vs. DFA (blue) and bivariate MDFA (green) for the first process (a1=0.9)", sep = "")
cat("\\label{z_mdfadfa_ar1_sym_output}}", sep = "")
cat("\\end{center}")
cat("\\end{figure}")


###################################################
### code chunk number 42: exercise_dfa_ms_4
###################################################
# Inverse SNR: the variance of the standardized noise is one: 
#   we thus normalize by the standard deviation of the data x 
#   (second column of the data matrix) 
scale_idiosyncratic_vec<-c(0,0.1,0.5,1,2)/sqrt(var(data_matrix_120[,2]))
# We select fractional leads: multiples of 0.25 
#   A fractional lead of 0.25 corresponds roughly to a week 
#   on a monthly time scale
delta_vec<-0.25*0:4


###################################################
### code chunk number 43: exercise_dfa_ms_4
###################################################
# Initialize the performance matrix
lead_snr_mat<-matrix(ncol=length(scale_idiosyncratic_vec),
                     nrow=length(delta_vec))
dimnames(lead_snr_mat)[[2]]<-paste("1/SNR=",
            sqrt(var(data_matrix_120[,1]))*scale_idiosyncratic_vec,paste="")
dimnames(lead_snr_mat)[[2]][1]<-paste("Univ. design: ",
            dimnames(lead_snr_mat)[[2]][1],sep="")
dimnames(lead_snr_mat)[[1]]<-paste("Lead ",delta_vec,paste="")
# Generate the idiosyncratic noise
set.seed(20)
eps<-rnorm(nrow(data_matrix_120))
# Loop over all combinations of leads and SNR-ratios
for (i in 1:length(scale_idiosyncratic_vec))#i<-1
{
  for (j in 1:length(delta_vec))#j<-1
  {
# Add the (suitably scaled) noise: no lead yet.    
    indicator<-data_matrix_120[,2]+scale_idiosyncratic_vec[i]*eps
# Overwrite the indicator column with the new time series
    data_matrix_120[,3]<-indicator
# Compute the DFTs (full in-sample, for stationary series d=0)
    insample<-nrow(data_matrix_120)
    weight_func<-spec_comp(insample, data_matrix_120, d)$weight_func
# Compute the discrete frequency-grid omega_k: from zero to pi
    omega_k<-(0:(nrow(weight_func)-1))*pi/(nrow(weight_func)-1)
# Introduce the fractional time-shift by rotation of the DFT 
#   of the indicator (last column)
    weight_func[,ncol(weight_func)]<-exp(-1.i*delta_vec[j]*omega_k)*
                  weight_func[,ncol(weight_func)]
# If the idiosyncratic noise is zero, then we use a univariate design
  if (i==1)
     weight_func<-weight_func[,-2]
# Compute optimal filters and derive the (frequency-domain) MSE
    mdfa_obj<-MDFA_mse(L,weight_func,Lag,Gamma)$mdfa_obj 
# Store the MSE
    lead_snr_mat[j,i]<-mdfa_obj$MS_error
  }
}


###################################################
### code chunk number 44: z_dfa_ar1_output.pdf
###################################################
  library(Hmisc)
  require(xtable)
  #latex(cor_vec, dec = 1, , caption = "Example of using latex to create table",
  #center = "centering", file = "", floating = FALSE)
  xtable(lead_snr_mat, dec = 1,digits=rep(3,dim(lead_snr_mat)[2]+1),
  paste("Effect of lead and of (inverse) signal-to-noise ratio on filter MSE",sep=""),
  label=paste("lead_snr_mat",sep=""),
  center = "centering", file = "", floating = FALSE)


###################################################
### code chunk number 45: Filter_revisions.Rnw:22-25
###################################################
# Data is included in MDFA-package
#US_GDP<-read.csv(paste(path.dat,"US_GDP.csv",sep=""),header=T)
#US_GDP_wp<-read.csv(paste(path.dat,"US_GDP_wp.csv",sep=""),header=T,sep=";")


###################################################
### code chunk number 46: US_GDP
###################################################
  library(Hmisc)
  require(xtable)
  #latex(cor_vec, dec = 1, , caption = "Example of using latex to create table",
  #center = "centering", file = "", floating = FALSE)
  xtable(US_GDP,
  paste("US-GDP: yearly vintages starting in Q1 2009 and ending in Q1 2013",sep=""),
  label=paste("US_GDP",sep=""),
  center = "centering", file = "", floating = FALSE)


###################################################
### code chunk number 47: dfa_ms
###################################################
head(dfa_ms)


###################################################
### code chunk number 48: Filter_revisions.Rnw:94-110
###################################################
# Generate series
set.seed(10)
len<-120
a_vec<-c(0.9,0.1,-0.9)
x<-matrix(nrow=len,ncol=3)
plot_T<-F
yhat<-x
periodogram<-matrix(ncol=3,nrow=len/2+1)
trffkt<-periodogram
# Generate series
for (i in 1:3)
{
  set.seed(10)
  x[,i]<-arima.sim(list(ar=a_vec[i]),n=len)
}
Gamma<-c(1,(1:(len/2))<len/12)


###################################################
### code chunk number 49: Filter_revisions.Rnw:113-133
###################################################
L<-13
yhat_Lag<-array(dim=c(len,3,L/2+2))
trffkt<-array(dim=c(len/2+1,3,L/2+2))
b<-array(dim=c(L,3,L/2+2))
# Compute real-time filters for Lag=0,...,L/2 and for the 
#   above three AR-processes
for (i in 1:3)
{
  periodogram[,i]<-per(x[,i],plot_T)$per
  for (Lag in 0:((L/2)+1))
  {
# Optimize filters
    filt<-dfa_ms(L,periodogram[,i],Lag,Gamma)
    trffkt[,i,Lag+1]<-filt$trffkt
    b[,i,Lag+1]<-filt$b
# Compute outputs
    for (j in L:len)
      yhat_Lag[j,i,Lag+1]<-filt$b%*%x[j:(j-L+1),i]
  }
}


###################################################
### code chunk number 50: Filter_revisions.Rnw:136-201
###################################################
# Discrete frequency grid
omega_k<-pi*0:(len/2)/(len/2)
colo<-rainbow(L/2+2)
file = paste("z_dfa_ar1_amp_shift_Lag_0.pdf", sep = "")
pdf(file = paste(path.out,file,sep=""), paper = "special", width = 6, height = 6)
par(mfrow=c(2,2))
amp<-abs(trffkt)
shift<-Arg(trffkt)/omega_k
for (i in 2:2)
{
  ymin<-min(amp[,i,],na.rm=T)
  ymax<-max(amp[,i,],na.rm=T)
  plot(amp[,i,1],type="l",main=paste("Amplitude functions, a1 = ",a_vec[i],sep=""),
  axes=F,xlab="Frequency",ylab="Amplitude",col=colo[1],ylim=c(ymin,ymax))
  mtext("Lag=0", side = 3, line = -1,at=len/4,col=colo[1])
  for (j in 2:(L/2+2))
  {
    lines(amp[,i,j],col=colo[j])
    mtext(paste("Lag=",j-1,sep=""), side = 3, line = -j,at=len/4,col=colo[j])
  }
  axis(1,at=c(0,1:6*len/12+1),labels=c("0","pi/6","2pi/6","3pi/6",
  "4pi/6","5pi/6","pi"))
  axis(2)
  box()
  ymin<-min(shift[,i,],na.rm=T)
  ymax<-max(shift[,i,],na.rm=T)
  plot(shift[,i,1],type="l",main=paste("Time-Shifts, a1 = ",a_vec[i],sep=""),
  axes=F,xlab="Frequency",ylab="Shift",col=colo[1],ylim=c(ymin,ymax))
  mtext("Lag=0", side = 3, line = -1,at=len/4,col=colo[1])
  for (j in 2:(L/2+2))
  {
    lines(shift[,i,j],col=colo[j])
    mtext(paste("Lag=",j-1,sep=""), side = 3, line = -j,at=len/4,col=colo[j])
  }
  axis(1,at=c(0,1:6*len/12+1),labels=c("0","pi/6","2pi/6","3pi/6",
  "4pi/6","5pi/6","pi"))
  axis(2)
  box()
  ymin<-min(b[,i,],na.rm=T)
  ymax<-max(b[,i,],na.rm=T)
  plot(b[,i,1],col=colo[1],ylim=c(ymin,ymax),main=paste("Filter coefficients"),
  ylab="Output",xlab="lag",axes=F,typ="l")
  mtext("Lag=0", side = 3, line = -1,at=L/2,col=colo[1])
  for (j in 2:(L/2+2))
  {
    lines(b[,i,j],col=colo[j],type="l")
    mtext(paste("Lag=",j-1,sep=""), side = 3, line = -j,at=L/2,col=colo[j])
  }
  axis(1,at=1:L,labels=-1+1:L)
  axis(2)
  box()

  ymin<-min(yhat_Lag[,i,],na.rm=T)
  ymax<-max(yhat_Lag[,i,],na.rm=T)
  ts.plot(yhat_Lag[,i,1],col=colo[1],ylim=c(ymin,ymax),
  main=paste("Output series"),ylab="Output")
  mtext("Lag=0", side = 3, line = -1,at=len/2,col=colo[1])  
  for (j in 2:(L/2+2))
  {
    lines(yhat_Lag[,i,j],col=colo[j])
    mtext(paste("Lag=",j-1,sep=""), side = 3, line = -j,at=len/2,col=colo[j])
  }

}
invisible(dev.off())


###################################################
### code chunk number 51: z_dfa_ar1_amp_shift_Lag_0.pdf
###################################################
  file = paste("z_dfa_ar1_amp_shift_Lag_0.pdf", sep = "")
  cat("\\begin{figure}[H]")
  cat("\\begin{center}")
  cat("\\includegraphics[height=6in, width=6in]{", file, "}\n",sep = "")
  cat("\\caption{Amplitude (left) and time-shift (right) functions as a function of Lag (rainbow colors) for
  the second process (a1=0.1)", sep = "")
  cat("\\label{z_dfa_ar1_amp_shift_Lag_0}}", sep = "")
  cat("\\end{center}")
  cat("\\end{figure}")


###################################################
### code chunk number 52: Filter_revisions.Rnw:244-256
###################################################
vintage<-array(dim=c(len,3,len))
# For each of the three AR(1)-processes We compute the vintage series
for (i in 1:3)
{
  for (j in L:len)#j<-L
  {
    vintage[(j-as.integer(L/2)):j,i,j]<-yhat_Lag[j,i,(as.integer(L/2)+1):1]
    vintage[1:(j-as.integer(L/2)-1),i,j]<-
    yhat_Lag[(as.integer(L/2)+1):(j-1),i,as.integer(L/2)+1]
  }
}
number_vint<-6


###################################################
### code chunk number 53: Filter_revisions.Rnw:259-264
###################################################
# We select the third DGP with a1=-0.9
i<-3
vintage_triangle<-vintage[,i,]
dimnames(vintage_triangle)[[2]]<-paste("Publ. ",1:len,sep="")
dimnames(vintage_triangle)[[1]]<-paste("Target ",1:len,sep="")


###################################################
### code chunk number 54: vintage_triangle
###################################################
  library(Hmisc)
  require(xtable)
  #latex(cor_vec, dec = 1, , caption = "Example of using latex to create table",
  #center = "centering", file = "", floating = FALSE)
  xtable(vintage_triangle[(len-number_vint):len,(len-number_vint):len], dec = 1,digits=rep(3,dim(vintage_triangle[(len-number_vint):len,(len-number_vint):len])[2]+1),
  paste("Last few vintages for the AR(1)-process with a1=-0.9: columns correspond to vintages and are indexed
  by corresponding publication dates; rows correspond to revisions of estimates for a fixed historical target date; diagonals correspond to releases: the lowest diagonal corresponds to the first release (real-time filter or nowcast).",sep=""),
  label=paste("vintage_triangle",sep=""),
  center = "centering", file = "", floating = FALSE)


###################################################
### code chunk number 55: Filter_revisions.Rnw:305-323
###################################################
colo<-rainbow(len)
file = paste("z_vintages.pdf", sep = "")
pdf(file = paste(path.out,file,sep=""), paper = "special", width = 6, height = 6)
par(mfrow=c(3,1))
for (i in 1:3)
{
  ymin<-min(vintage[,i,],na.rm=T)
  ymax<-max(vintage[,i,],na.rm=T)
  ts.plot(vintage[,i,L],col=colo[1],ylim=c(ymin,ymax),
  main=paste("Tentacle plot: vintages and full revision sequence,
  a1 = ",a_vec[i],sep=""),ylab="Vintages")
  for (j in (L+1):len)
  {
    lines(vintage[,i,j],col=colo[j])
  }
  lines(vintage[,i,len],col="red",lwd=2)
}
invisible(dev.off())


###################################################
### code chunk number 56: z_vintages.pdf
###################################################
  file = paste("z_vintages.pdf", sep = "")
  cat("\\begin{figure}[H]")
  cat("\\begin{center}")
  cat("\\includegraphics[height=6in, width=6in]{", file, "}\n",sep = "")
  cat("\\caption{Tentacle plot: full historical revision sequence for
  a1=0.9 (top), a1=0.1 (middle) and a1=-0.9 (bottom). Final release is emphasized in bold red", sep = "")
  cat("\\label{z_vintages}}", sep = "")
  cat("\\end{center}")
  cat("\\end{figure}")


###################################################
### code chunk number 57: Filter_revisions.Rnw:339-364
###################################################
file = paste("z_vintages_2.pdf", sep = "")
pdf(file = paste(path.out,file,sep=""), paper = "special", width = 6, height = 6)
par(mfrow=c(2,1))
i<-2
ymin<-min(vintage[,i,],na.rm=T)
ymax<-max(vintage[,i,],na.rm=T)
ts.plot(vintage[,i,L],col=colo[1],ylim=c(ymin,ymax),
main="Vintages: full revision sequence and final release (black)",ylab="Vintages")
for (j in (L+1):len)
{
  lines(vintage[,i,j],col=colo[j])
}
lines(vintage[,i,len],col="black",lwd=2)
i<-2
ymin<-min(vintage[,i,],na.rm=T)
ymax<-max(vintage[,i,],na.rm=T)
ts.plot(vintage[,i,L],col=colo[1],ylim=c(ymin,ymax),
main="Vintages: full revision sequence and real-time initial release (black)",
ylab="Vintages")
for (j in (L+1):len)
{
  lines(vintage[,i,j],col=colo[j])
}
lines(yhat_Lag[,i,1],col="black",lty=1)
invisible(dev.off())


###################################################
### code chunk number 58: z_vintages_2.pdf
###################################################
  file = paste("z_vintages_2.pdf", sep = "")
  cat("\\begin{figure}[H]")
  cat("\\begin{center}")
  cat("\\includegraphics[height=6in, width=6in]{", file, "}\n",sep = "")
  cat("\\caption{Vintages: full historical revision sequence in the case of the second  process (a1=0.1)", sep = "")
  cat("\\label{z_vintages_2}}", sep = "")
  cat("\\end{center}")
  cat("\\end{figure}")


###################################################
### code chunk number 59: Filter_revisions.Rnw:385-398
###################################################
set.seed(12)
# Select the AR(1)-process with coefficient 0.1
i_process<-2
# Scaling of the idiosyncratic noise
scale_idiosyncratic<-0.1
eps<-rnorm(nrow(x))
indicator<-x[,i_process]+scale_idiosyncratic*eps
# Data: first column=target, second column=x, 
#   third column=shifted (leading) indicator
data_matrix_120<-cbind(x[,i_process],x[,i_process],
                       c(indicator[2:nrow(x)],indicator[nrow(x)]))
dimnames(data_matrix_120)[[2]]<-c("target","x","leading indicator")
head(data_matrix_120)


###################################################
### code chunk number 60: exercise_dfa_ms_4
###################################################
# Fully in sample
insample<-nrow(data_matrix_120)
# d=0 for stationary series: see default settings
weight_func<-spec_comp(insample, data_matrix_120, d)$weight_func


###################################################
### code chunk number 61: exercise_dfa_ms_4
###################################################
yhat_Lag_mdfa<-matrix(nrow=len,ncol=L/2+2)
# Source the default (MSE-) parameter settings
source(file=paste(path.pgm,"control_default.r",sep=""))
# Estimate filter coefficients
for (Lag in 0:((L/2)))
{
  mdfa_obj<-MDFA_mse(L,weight_func,Lag,Gamma)$mdfa_obj 

  print(paste("Lag=",Lag," Criterion=",round(mdfa_obj$MS_error,4),sep=""))
# Filter coefficients
  b_mat<-mdfa_obj$b
# Compute outputs
  for (j in L:len)
    yhat_Lag_mdfa[j,Lag+1]<-sum(apply(b_mat*data_matrix_120[j:(j-L+1),2:3],1,sum))
}


###################################################
### code chunk number 62: Filter_revisions.Rnw:428-436
###################################################
vintage_mdfa<-matrix(nrow=len,ncol=len)
# For each of the three AR(1)-processes We compute the vintage series
for (j in L:len)#j<-len
{
  vintage_mdfa[(j-as.integer(L/2)):j,j]<-yhat_Lag_mdfa[j,(as.integer(L/2)+1):1]
  vintage_mdfa[1:(j-as.integer(L/2)-1),j]<-
  yhat_Lag_mdfa[(as.integer(L/2)+1):(j-1),as.integer(L/2)+1]
}


###################################################
### code chunk number 63: Filter_revisions.Rnw:439-461
###################################################
file = paste("z_vintages_mdfa.pdf", sep = "")
pdf(file = paste(path.out,file,sep=""), paper = "special", width = 6, height = 6)
par(mfrow=c(2,1))
ymin<-min(vintage_mdfa,na.rm=T)
ymax<-max(vintage_mdfa,na.rm=T)
ts.plot(vintage_mdfa[,L],col=colo[1],ylim=c(ymin,ymax),
main="Vintages: full revision sequence and final release (black)",ylab="Vintages")
for (j in (L+1):len)
{
  lines(vintage_mdfa[,j],col=colo[j])
}
lines(vintage_mdfa[,len],col="black",lwd=2)
ymin<-min(vintage_mdfa,na.rm=T)
ymax<-max(vintage_mdfa,na.rm=T)
ts.plot(vintage_mdfa[,L],col=colo[1],ylim=c(ymin,ymax),
main="Vintages: full revision sequence and final release (black)",ylab="Vintages")
for (j in (L+1):len)
{
  lines(vintage_mdfa[,j],col=colo[j])
}
lines(yhat_Lag_mdfa[,1],col="black",lwd=1)
invisible(dev.off())


###################################################
### code chunk number 64: z_vintages_mdfa.pdf
###################################################
  file = paste("z_vintages_mdfa.pdf", sep = "")
  cat("\\begin{figure}[H]")
  cat("\\begin{center}")
  cat("\\includegraphics[height=6in, width=6in]{", file, "}\n",sep = "")
  cat("\\caption{Vintages: full historical revision sequence in the case of the second process (a1=0.1)", sep = "")
  cat("\\label{z_vintages_mdfa}}", sep = "")
  cat("\\end{center}")
  cat("\\end{figure}")


###################################################
### code chunk number 65: dfa_ms
###################################################
head(mdfa_analytic)


###################################################
### code chunk number 66: dfa_ms
###################################################
head(MDFA_mse_constraint)


###################################################
### code chunk number 67: exercise_constraint
###################################################
# Filter length
L<-5
set.seed(1)
# The first three coefficients are random numbers
b<-rnorm(1:(L-2))
# Define the constants: the following are classical 
#   restrictions (amplitude is 1 and time shift is zero)
w<-1
s<-0
b<-c(b,(L-1-s)*w-(L-1:(L-2))%*%b,(2+s-L)*w+(L-2:(L-1))%*%b)


###################################################
### code chunk number 68: exercise_constraint
###################################################
# Level constraint
sum(b)-w
# time-shift constraint
sum(b*0:(L-1))/sum(b)-s


###################################################
### code chunk number 69: Constraints.Rnw:482-511
###################################################
# Generate series
#rm(list=ls())
set.seed(10)
len<-120
a_vec<-c(0.9,0.1,-0.9)
x<-matrix(nrow=len,ncol=3)
plot_T<-F
yhat<-x
periodogram<-matrix(ncol=3,nrow=len/2+1)
trffkt<-periodogram
# Generate series
for (i in 1:3)
{
  set.seed(10)
  x[,i]<-arima.sim(list(ar=a_vec[i]),n=len)
}
# Target
Gamma<-c(1,(1:(len/2))<len/12)
set.seed(12)
# Select the AR(1)-process with coefficient 0.9
i_process<-3
# Scaling of the idiosyncratic noise
scale_idiosyncratic<-0.1
eps<-rnorm(nrow(x))
indicator<-x[,i_process]+scale_idiosyncratic*eps
# Data: first column=target, second column=x, third column=shifted (leading) indicator
data_matrix_120<-cbind(x[,i_process],x[,i_process],c(indicator[2:nrow(x)],indicator[nrow(x)]))
dimnames(data_matrix_120)[[2]]<-c("target","x","leading indicator")
head(data_matrix_120)


###################################################
### code chunk number 70: exercise_mdfa_ms_1
###################################################
# Filter length
L<-13
# Fully in sample
insample<-nrow(data_matrix_120)
# d=0 for stationary series: see default settings
weight_func<-spec_comp(insample, data_matrix_120, d)$weight_func
# Source the default (MSE-) parameter settings
source(file=paste(path.pgm,"control_default.r",sep=""))

# Estimate filter coefficients
mdfa_obj<-MDFA_mse(L,weight_func,Lag,Gamma)$mdfa_obj

file = paste("z_mdfa_ar1_amp_shift_Lag_0_iF_i2F.pdf", sep = "")
pdf(file = paste(path.out,file,sep=""), paper = "special",
    width = 6, height = 6)
K<-nrow(weight_func)-1
par(mfrow = c(2, 1))
# amplitude functions
mplot <- abs(mdfa_obj$trffkt)
# x-axis
freq_axe <- rep(NA, K + 1)
freq_axe[1] <- 0
freq_axe[1 + (1 : 6) * K / 6] <- c(paste0(c("", 2 : 5), "pi/6"), "pi")
ax <- freq_axe
# colors, title and additional titles
insamp <- 1.e+90
colo <- NULL
plot_title <- "Amplitude Functions"
title_more <- colnames(x[, -1])
mplot_func(mplot, ax, plot_title, title_more, insamp, colo)
# time-shift
mplot <- Arg(t(sign(apply(mdfa_obj$b, 2, sum)) * t(mdfa_obj$trffkt))) /
      ((0 : (nrow(mdfa_obj$trffkt) - 1)) * pi / (nrow(mdfa_obj$trffkt) - 1))
# We use the exact formula for the time-shift in frequency zero
mplot[1, ] <- apply(mdfa_obj$b * ((0 : (L - 1))), 2, sum) / 
      apply(mdfa_obj$b, 2, sum)
plot_title <- "Time-Shift"
mplot_func(mplot, ax, plot_title, title_more, insamp, colo)
invisible(dev.off())


###################################################
### code chunk number 71: z_mdfa_ar1_amp_shift_Lag_0_iF_i2F.pdf
###################################################
  file = paste("z_mdfa_ar1_amp_shift_Lag_0_iF_i2F.pdf", sep = "")
  cat("\\begin{figure}[H]")
  cat("\\begin{center}")
  cat("\\includegraphics[height=6in, width=6in]{", file, "}\n",sep = "")
  cat("\\caption{Amplitude (top) and time-shift (bottom) functions: unconstrained i1=I2=F", sep = "")
  cat("\\label{z_mdfa_ar1_amp_shift_Lag_0_iF_i2F}}", sep = "")
  cat("\\end{center}")
  cat("\\end{figure}")


###################################################
### code chunk number 72: exercise_dfa_ms_2
###################################################
# Source the default (MSE-) parameter settings
source(file=paste(path.pgm,"control_default.r",sep=""))
# Impose level constraint
i1<-T
# Constraints: for series 1 and 2
weight_constraint<-c((1+sqrt(5))/2,-sqrt(2))
# Call to the context-specific MDFA_mse_constraint function
mdfa_obj<-MDFA_mse_constraint(L,weight_func,Lag,Gamma,i1,i2,weight_constraint,
                              shift_constraint)$mdfa_obj

file = paste("z_mdfa_ar1_amp_shift_Lag_0_iT_i2F.pdf", sep = "")
pdf(file = paste(path.out,file,sep=""), paper = "special", width = 6, height = 6)
K<-nrow(weight_func)-1
par(mfrow = c(2, 1))
# amplitude functions
mplot <- abs(mdfa_obj$trffkt)
# x-axis
freq_axe <- rep(NA, K + 1)
freq_axe[1] <- 0
freq_axe[1 + (1 : 6) * K / 6] <- c(paste0(c("", 2 : 5), "pi/6"), "pi")
ax <- freq_axe
# colors, title and additional titles
insamp <- 1.e+90
colo <- NULL
plot_title <- "Amplitude Functions"
title_more <- colnames(x[, -1])
mplot_func(mplot, ax, plot_title, title_more, insamp, colo)
# time-shift
mplot <- Arg(t(sign(apply(mdfa_obj$b, 2, sum)) * t(mdfa_obj$trffkt))) /
      ((0 : (nrow(mdfa_obj$trffkt) - 1)) * pi / (nrow(mdfa_obj$trffkt) - 1))
# We use the exact formula for the time-shift in frequency zero
mplot[1, ] <- apply(mdfa_obj$b*(0:(L-1)),2,sum)/apply(mdfa_obj$b, 2, sum)
plot_title <- "Time-Shift"
mplot_func(mplot, ax, plot_title, title_more, insamp, colo)
invisible(dev.off())
print(c("Level restrictions", round(apply(mdfa_obj$b,2,sum),4)))


###################################################
### code chunk number 73: z_mdfa_ar1_amp_shift_Lag_0_iT_i2F.pdf
###################################################
  file = paste("z_mdfa_ar1_amp_shift_Lag_0_iT_i2F.pdf", sep = "")
  cat("\\begin{figure}[H]")
  cat("\\begin{center}")
  cat("\\includegraphics[height=6in, width=6in]{", file, "}\n",sep = "")
  cat("\\caption{Amplitude (top) and time-shift (bottom) functions: i1=T,i2=F", sep = "")
  cat("\\label{z_mdfa_ar1_amp_shift_Lag_0_iT_i2F}}", sep = "")
  cat("\\end{center}")
  cat("\\end{figure}")


###################################################
### code chunk number 74: exercise_dfa_ms_3
###################################################
# Source the default (MSE-) parameter settings
source(file=paste(path.pgm,"control_default.r",sep=""))#b0_H0
# Estimate filter coefficients: note that i1<-F by sourcing 
#   the default parameters
i2<-T
shift_constraint<-c(exp(1),-pi)

mdfa_obj<-MDFA_mse_constraint(L,weight_func,Lag,Gamma,i1,i2,weight_constraint,
                              shift_constraint)$mdfa_obj

file = paste("z_mdfa_ar1_amp_shift_Lag_0_iF_i2T.pdf", sep = "")
pdf(file = paste(path.out,file,sep=""), paper = "special", 
    width = 6, height = 6)
K<-nrow(weight_func)-1
par(mfrow = c(2, 1))
# amplitude functions
mplot <- abs(mdfa_obj$trffkt)
# x-axis
freq_axe <- rep(NA, K + 1)
freq_axe[1] <- 0
freq_axe[1 + (1 : 6) * K / 6] <- c(paste0(c("", 2 : 5), "pi/6"), "pi")
ax <- freq_axe
# colors, title and additional titles
insamp <- 1.e+90
colo <- NULL
plot_title <- "Amplitude Functions"
title_more <- colnames(x[, -1])
mplot_func(mplot, ax, plot_title, title_more, insamp, colo)
# time-shift
mplot <- Arg(t(sign(apply(mdfa_obj$b, 2, sum)) * t(mdfa_obj$trffkt))) /
      ((0 : (nrow(mdfa_obj$trffkt) - 1)) * pi / (nrow(mdfa_obj$trffkt) - 1))
# We use the exact formula for the time-shift in frequency zero
mplot[1, ] <- apply(mdfa_obj$b*(0:(L-1)),2,sum)/apply(mdfa_obj$b, 2, sum)
plot_title <- "Time-Shift"
mplot_func(mplot, ax, plot_title, title_more, insamp, colo)
invisible(dev.off())
print(c("Time-shift restrictions",
    round(apply(mdfa_obj$b*(0:(L-1)),2,sum)/apply(mdfa_obj$b, 2, sum),4)))


###################################################
### code chunk number 75: z_mdfa_ar1_amp_shift_Lag_0_iF_i2T.pdf
###################################################
  file = paste("z_mdfa_ar1_amp_shift_Lag_0_iF_i2T.pdf", sep = "")
  cat("\\begin{figure}[H]")
  cat("\\begin{center}")
  cat("\\includegraphics[height=6in, width=6in]{", file, "}\n",sep = "")
  cat("\\caption{Amplitude (top) and time-shift (bottom) functions: i1=F,i2=T", sep = "")
  cat("\\label{z_mdfa_ar1_amp_shift_Lag_0_iF_i2T}}", sep = "")
  cat("\\end{center}")
  cat("\\end{figure}")


###################################################
### code chunk number 76: exercise_mdfa_ms_4
###################################################
# Source the default (MSE-) parameter settings
source(file=paste(path.pgm,"control_default.r",sep=""))
# Impose both constraints
i1<-T
i2<-T
# Specify the constraints
weight_constraint<-c((1+sqrt(5))/2,-sqrt(2))
shift_constraint<-c(exp(1),-pi)

mdfa_obj<-MDFA_mse_constraint(L,weight_func,Lag,Gamma,i1,i2,weight_constraint,
                              shift_constraint)$mdfa_obj

file = paste("z_mdfa_ar1_amp_shift_Lag_0_iT_i2T.pdf", sep = "")
pdf(file = paste(path.out,file,sep=""), paper = "special", 
    width = 6, height = 6)
K<-nrow(weight_func)-1

par(mfrow = c(2, 1))
# amplitude functions
mplot <- abs(mdfa_obj$trffkt)
# x-axis
freq_axe <- rep(NA, K + 1)
freq_axe[1] <- 0
freq_axe[1 + (1 : 6) * K / 6] <- c(paste0(c("", 2 : 5), "pi/6"), "pi")
ax <- freq_axe
# colors, title and additional titles
insamp <- 1.e+90
colo <- NULL
plot_title <- "Amplitude Functions"
title_more <- colnames(x[, -1])
mplot_func(mplot, ax, plot_title, title_more, insamp, colo)
# time-shift
mplot <- Arg(t(sign(apply(mdfa_obj$b, 2, sum)) * t(mdfa_obj$trffkt))) /
      ((0 : (nrow(mdfa_obj$trffkt) - 1)) * pi / (nrow(mdfa_obj$trffkt) - 1))
# We use the exact formula for the time-shift in frequency zero
mplot[1, ] <- apply(mdfa_obj$b*(0:(L-1)),2,sum)/apply(mdfa_obj$b, 2, sum)
plot_title <- "Time-Shift"
mplot_func(mplot, ax, plot_title, title_more, insamp, colo)
invisible(dev.off())
print(c("Level restrictions", round(apply(mdfa_obj$b,2,sum),4)))
print(c("Time-shift restrictions",
round(apply(mdfa_obj$b*(Lag:(L-1+Lag)),2,sum)/apply(mdfa_obj$b, 2, sum),4)))


###################################################
### code chunk number 77: z_mdfa_ar1_amp_shift_Lag_0_iT_i2T.pdf
###################################################
  file = paste("z_mdfa_ar1_amp_shift_Lag_0_iT_i2T.pdf", sep = "")
  cat("\\begin{figure}[H]")
  cat("\\begin{center}")
  cat("\\includegraphics[height=6in, width=6in]{", file, "}\n",sep = "")
  cat("\\caption{Amplitude (top) and time-shift (bottom) functions: i1=i2=T", sep = "")
  cat("\\label{z_mdfa_ar1_amp_shift_Lag_0_iT_i2T}}", sep = "")
  cat("\\end{center}")
  cat("\\end{figure}")


###################################################
### code chunk number 78: exercise_dfa_ms_3
###################################################
# Source the default (MSE-) parameter settings
source(file=paste(path.pgm,"control_default.r",sep=""))#b0_H0
# Estimate filter coefficients: note that i1<-F by sourcing the default parameters
i2<-T
Lag<--2
shift_constraint<-c(0,2)

mdfa_obj<-MDFA_mse_constraint(L,weight_func,Lag,Gamma,i1,i2,weight_constraint,
                              shift_constraint)$mdfa_obj

b_mat<-mdfa_obj$b
trffkt_mdfa<-mdfa_obj$trffkt

file = paste("z_mdfa_ar1_amp_shift_Lag_0_iF_i2T_Lag.pdf", sep = "")
pdf(file = paste(path.out,file,sep=""), paper = "special", 
    width = 6, height = 6)
K<-nrow(weight_func)-1
par(mfrow = c(2, 1))
# amplitude functions
mplot <- abs(mdfa_obj$trffkt)
# x-axis
freq_axe <- rep(NA, K + 1)
freq_axe[1] <- 0
freq_axe[1 + (1 : 6) * K / 6] <- c(paste0(c("", 2 : 5), "pi/6"), "pi")
ax <- freq_axe
# colors, title and additional titles
insamp <- 1.e+90
colo <- NULL
plot_title <- "Amplitude Functions"
title_more <- colnames(x[, -1])
mplot_func(mplot, ax, plot_title, title_more, insamp, colo)
# time-shift
mplot <- Arg(t(sign(apply(mdfa_obj$b, 2, sum)) * t(mdfa_obj$trffkt))) /
      ((0 : (nrow(mdfa_obj$trffkt) - 1)) * pi / (nrow(mdfa_obj$trffkt) - 1))
# We use the exact formula for the time-shift in frequency zero
mplot[1, ] <- apply(mdfa_obj$b*(0:(L-1)),2,sum)/apply(mdfa_obj$b, 2, sum)
plot_title <- "Time-Shift"
mplot_func(mplot, ax, plot_title, title_more, insamp, colo)
invisible(dev.off())
print(c("Time-shift restrictions",
        round(apply(mdfa_obj$b*(0:(L-1)),2,sum)/
          apply(mdfa_obj$b, 2, sum),4)))


###################################################
### code chunk number 79: z_mdfa_ar1_amp_shift_Lag_0_iF_i2T_Lag.pdf
###################################################
  file = paste("z_mdfa_ar1_amp_shift_Lag_0_iF_i2T_Lag.pdf", sep = "")
  cat("\\begin{figure}[H]")
  cat("\\begin{center}")
  cat("\\includegraphics[height=6in, width=6in]{", file, "}\n",sep = "")
  cat("\\caption{Amplitude (top) and time-shift (bottom) functions: i1=F,i2=T, Lag=-2", sep = "")
  cat("\\label{z_mdfa_ar1_amp_shift_Lag_0_iF_i2T_Lag}}", sep = "")
  cat("\\end{center}")
  cat("\\end{figure}")


###################################################
### code chunk number 80: exercise_dfa_ms_4
###################################################
len_t<-100
# Generate two linear trends (they are shifted by a constant 
# in order to be distinguished)
trend_data<-cbind(1:len_t,0.5+1:len_t)
# Compute both output series: normalize by the inverse 
#   transferfunctions in frequency zero
yhat_multivariate<-cbind(rep(NA,len_t),rep(NA,len_t))
for (i in 1:ncol(yhat_multivariate))
  for (j in L:len_t)
#  The transfer function in frequency zero is a real number: 
#   R computes a complex number with vanishing imaginary part. 
#   We have to extract the real part because otherwise the complex 
#   series would not be plotted... 
    yhat_multivariate[j,i]<-sum(b_mat[,i]*trend_data[j:(j-L+1),i])/
      Re(trffkt_mdfa[1,i])

mplot<-cbind(trend_data,yhat_multivariate)
dimnames(mplot)[[2]]<-c("Input 1","Input 2","Output 1","Output 2")
# Display the last observations
tail(mplot)


###################################################
### code chunk number 81: ATS.Rnw:312-313
###################################################
head(dfa_analytic)


###################################################
### code chunk number 82: ATS.Rnw:316-317
###################################################
tail(dfa_analytic)


###################################################
### code chunk number 83: ATS.Rnw:346-347
###################################################
source(file=paste(path.pgm,"functions_trilemma.r",sep=""))


###################################################
### code chunk number 84: ATS.Rnw:351-368
###################################################
#rm(list=ls())
# Specify the processes: ar(1) with coefficients -0.9,0.1 and 0.9
a_vec<-c(0.9,0.1,-0.9)
# Specify the lambdas
lambda_vec<-c(0,2^(0:7))
# Specify the fixed eta
eta_vec<-rep(0,length(lambda_vec))
# Specify filter length
L<-24
# Length of estimation sample
len<-120
# cutoff
cutoff<-pi/12
# Nowcast
Lag<-0
# No filter constraints
i1<-i2<-F


###################################################
### code chunk number 85: ATS.Rnw:370-384
###################################################
# Unscaled ATS-components: see below for an activation of this option
scaled_ATS<-F
# Generate a single realization of the processes
anzsim<-1
# Use periodogram
mba<-F
estim_MBA<-T
M<-len/2
# Length of symmetric filter (will be used later)
L_sym<-1000
# Length of long data (for computing the target)
len1<-3000
# difference data
dif<-F


###################################################
### code chunk number 86: ATS.Rnw:386-389
###################################################
# Proceed to estimation
for_sim_obj<-for_sim_out(a_vec,len1,len,cutoff,L,mba,estim_MBA,L_sym,
              Lag,i1,i2,scaled_ATS,lambda_vec,eta_vec,anzsim,M,dif)


###################################################
### code chunk number 87: ATS.Rnw:391-405
###################################################
# Extract sample performances
# 1 ATS
ats_sym_T<-for_sim_obj$ats_sym
# 2 Curvature, Peak Correlation, ...
amp_shift_mat_sim<-for_sim_obj$amp_shift_mat_sim
# 3. Amplitude and time-shifts
amp_sim_per<-for_sim_obj$amp_sim_per
shift_sim_per<-for_sim_obj$shift_sim_per
# 4. Output series
xff_sim<-for_sim_obj$xff_sim
# 5. Peak correlation and Curvature
amp_shift_mat_sim_T<-for_sim_obj$amp_shift_mat_sim
dim_names<-for_sim_obj$dim_names
i_process<-1


###################################################
### code chunk number 88: print_tab_cor
###################################################
library(Hmisc)
require(xtable)
#latex(cor_vec, dec = 1, , caption = "Example of using latex to create table",
#center = "centering", file = "", floating = FALSE)
xtable(ats_sym_T[-1,,i_process,1], dec = 1,digits=6, caption = paste("ATS-Components as a function of lambda (eta=0 fixed)",sep=""),label=paste("ats_comp_dfa_T",sep=""),
center = "centering", file = "", floating = FALSE)


###################################################
### code chunk number 89: ATS.Rnw:425-450
###################################################
for (DGP in 1:length(a_vec))#DGP<-3
{
  file = paste("z_box_plot_amp_and_shift_cust_T_",DGP,".pdf", sep = "")
  pdf(file = paste(path.out,file,sep=""), paper = "special", width = 6, height = 6)
  par(mfrow=c(1,2))
  mplot<-amp_sim_per[,-1,DGP,1]
  dimnames(mplot)[[2]]<-paste("Amplitude (",lambda_vec,",",eta_vec,")",sep="")
  ax<-rep(NA,ncol(mplot))
  ax[1+(0:6)*((nrow(mplot)-1)/6)]<-c(0,"pi/6","2pi/6","3pi/6","4pi/6","5pi/6","pi")
  plot_title<-"Amplitude functions"
  insamp<-1.e+90
  title_more<-dimnames(mplot)[[2]]
  colo<-rainbow(ncol(mplot))
  mplot_func(mplot, ax, plot_title, title_more, insamp, colo)
  mplot<-shift_sim_per[,-1,DGP,1]
  dimnames(mplot)[[2]]<-paste("Time-shifts (",lambda_vec,",",eta_vec,")",sep="")
  ax<-rep(NA,ncol(mplot))
  ax[1+(0:6)*((nrow(mplot)-1)/6)]<-c(0,"pi/6","2pi/6","3pi/6","4pi/6","5pi/6","pi")
  plot_title<-"Time-shifts"
  insamp<-1.e+90
  title_more<-dimnames(mplot)[[2]]
  colo<-rainbow(ncol(mplot))
  mplot_func(mplot, ax, plot_title, title_more, insamp, colo)
  invisible(dev.off())
}


###################################################
### code chunk number 90: z_box_plot_amp_and_shift_cust_T_1.pdf
###################################################
  file = paste("z_box_plot_amp_and_shift_cust_T_1", sep = "")
  cat("\\begin{figure}[H]")
  cat("\\begin{center}")
  cat("\\includegraphics[height=3in, width=6in]{", file, "}\n",sep = "")
  cat("\\caption{Amplitude (left) and time-shift functions (right) as a function of lambda for fixed eta=0", sep = "")
  cat("\\label{z_box_plot_amp_and_shift_cust_T_1}}", sep = "")
  cat("\\end{center}")
  cat("\\end{figure}")


###################################################
### code chunk number 91: ATS.Rnw:463-494
###################################################
# Plots
#colo<-c("red","blue")
# we select DFA-MSE (second series) and a customized 
series_vec<-2:(length(eta_vec)+1)#c(2,8)
for (ki in 1:length(a_vec)) #ki<-1  
{
file = paste("z_dfa_cust_ats_out_",ki,"_T.pdf", sep = "")
pdf(file = paste(path.out,file,sep=""), paper = "special", width = 6, height = 6)
# extract all series from first realization (there is only one realization here)
  xf_per<-xff_sim[940:(940+len),,ki,1]#dim(xff_sim)
  dimnames(xf_per)[[2]]<-dim_names[[1]]
  anf<-1
  enf<-len
  sel<-1:dim(amp)[2]
  mplot<-scale(xf_per[,series_vec][anf:enf,])  #head(xf_per)
  plot(as.ts(mplot[,1]),type="l",axes=F,col="red",ylim=c(min(na.exclude(mplot)),
  max(na.exclude(mplot))),ylab="",xlab="",
  main=paste("MSE (red) vs. Customized",sep=""),lwd=1)
  mtext("MSE", side = 3, line = -1,at=(enf-anf)/2,col=colo[1])
  for (i in 2:length(series_vec))
  {
    lines(as.ts(mplot[,i]),col=colo[i],lwd=1)
    mtext(paste("Customized: ",dimnames(xf_per)[[2]][series_vec[i]],sep=""), side = 3, line = -i,at=(enf-anf)/2,col=colo[i])
  }
  axis(1,at=c(1,rep(0,6))+as.integer((0:6)*(enf-anf)/6),
  labels=as.integer(anf+(0:6)*(enf-anf)/6))
  axis(2)
  box()

invisible(dev.off())
}


###################################################
### code chunk number 92: z_dfa_cust_ats_out_1_T.pdf
###################################################
  file = paste("z_dfa_cust_ats_out_1_T", sep = "")
  cat("\\begin{figure}[H]")
  cat("\\begin{center}")
  cat("\\includegraphics[height=3in, width=6in]{", file, "}\n",sep = "")
  cat("\\caption{Filter outputs: MSE (red) vs. customized , a1=0.9", sep = "")
  cat("\\label{z_dfa_cust_ats_out_1_T}}", sep = "")
  cat("\\end{center}")
  cat("\\end{figure}")


###################################################
### code chunk number 93: ATS.Rnw:526-530
###################################################
# Specify the etas
eta_vec<-0.3*0:6
# Specify the fixed lambda
lambda_vec<-rep(0,length(eta_vec))


###################################################
### code chunk number 94: ATS.Rnw:532-558
###################################################
#rm(list=ls())
# Specify the processes: ar(1) with coefficients -0.9,0.1 and 0.9
a_vec<-c(0.9,0.1,-0.9)
# Ordinary ATS-components
scaled_ATS<-F
# Generate a single realization of the processes
anzsim<-1
# Specify filter length
L<-24
# Use periodogram
mba<-F
estim_MBA<-T
M<-len/2
L_sym<-1000
# Length of long data (for computing the target)
len1<-3000
# Length of estimation sample
len<-120
# cutoff
cutoff<-pi/12
# Real-time design
Lag<-0
# No constraints
i1<-i2<-F
# difference data
dif<-F


###################################################
### code chunk number 95: ATS.Rnw:560-563
###################################################
# Proceed to estimation
for_sim_obj<-for_sim_out(a_vec,len1,len,cutoff,L,mba,estim_MBA,L_sym,
             Lag,i1,i2,scaled_ATS,lambda_vec,eta_vec,anzsim,M,dif)


###################################################
### code chunk number 96: ATS.Rnw:565-581
###################################################
# Extract sample performances
# 1 ATS
ats_sym_S<-for_sim_obj$ats_sym
# 2 Curvature, Peak Correlation, ...
amp_shift_mat_sim<-for_sim_obj$amp_shift_mat_sim
# 3. Amplitude and time-shifts
amp_sim_per<-for_sim_obj$amp_sim_per
shift_sim_per<-for_sim_obj$shift_sim_per
# 4. Output series
xff_sim<-for_sim_obj$xff_sim
# 5. Peak correlation and Curvature
amp_shift_mat_sim_S<-for_sim_obj$amp_shift_mat_sim
# 6. Filter coefficients
b_sim<-for_sim_obj$b_sim
dim_names<-for_sim_obj$dim_names
i_process<-1


###################################################
### code chunk number 97: print_tab_cor
###################################################
library(Hmisc)
require(xtable)
#latex(cor_vec, dec = 1, , caption = "Example of using latex to create table",
#center = "centering", file = "", floating = FALSE)
xtable(ats_sym_S[-1,,i_process,1], dec = 1,digits=6, caption = paste("ATS-Components as a function of eta (lambda=0 fixed)",sep=""),label=paste("ats_comp_dfa_S",sep=""),
center = "centering", file = "", floating = FALSE)


###################################################
### code chunk number 98: ATS.Rnw:594-619
###################################################
for (DGP in 1:length(a_vec))#DGP<-1
{
  file = paste("z_box_plot_amp_and_shift_cust_S_",DGP,".pdf", sep = "")
  pdf(file = paste(path.out,file,sep=""), paper = "special", width = 6, height = 6)
  par(mfrow=c(1,2))
  mplot<-amp_sim_per[,-1,DGP,1]
  dimnames(mplot)[[2]]<-paste("Amplitude (",lambda_vec,",",eta_vec,")",sep="")
  ax<-rep(NA,ncol(mplot))
  ax[1+(0:6)*((nrow(mplot)-1)/6)]<-c(0,"pi/6","2pi/6","3pi/6","4pi/6","5pi/6","pi")
  plot_title<-"Amplitude functions"
  insamp<-1.e+90
  title_more<-dimnames(mplot)[[2]]
  colo<-rainbow(ncol(mplot))
  mplot_func(mplot, ax, plot_title, title_more, insamp, colo)
  mplot<-shift_sim_per[,-1,DGP,1]
  dimnames(mplot)[[2]]<-paste("Time-shifts (",lambda_vec,",",eta_vec,")",sep="")
  ax<-rep(NA,ncol(mplot))
  ax[1+(0:6)*((nrow(mplot)-1)/6)]<-c(0,"pi/6","2pi/6","3pi/6","4pi/6","5pi/6","pi")
  plot_title<-"Time-shifts"
  insamp<-1.e+90
  title_more<-dimnames(mplot)[[2]]
  colo<-rainbow(ncol(mplot))
  mplot_func(mplot, ax, plot_title, title_more, insamp, colo)
  invisible(dev.off())
}


###################################################
### code chunk number 99: z_box_plot_amp_and_shift_cust_S_1.pdf
###################################################
  file = paste("z_box_plot_amp_and_shift_cust_S_1", sep = "")
  cat("\\begin{figure}[H]")
  cat("\\begin{center}")
  cat("\\includegraphics[height=3in, width=6in]{", file, "}\n",sep = "")
  cat("\\caption{Amplitude (left) and time-shift functions (right) as a function of eta (lambda=0 fixed)", sep = "")
  cat("\\label{z_box_plot_amp_and_shift_cust_S_1}}", sep = "")
  cat("\\end{center}")
  cat("\\end{figure}")


###################################################
### code chunk number 100: ATS.Rnw:632-645
###################################################
for (DGP in 1:length(a_vec))#DGP<-1
{
  file = paste("z_box_plot_coef_S_",DGP,".pdf", sep = "")
  pdf(file = paste(path.out,file,sep=""), paper = "special", width = 6, height = 6)
  mplot<-b_sim[,-1,DGP,1]
  ax<-dimnames(mplot)[[1]]
  plot_title<-"Filter coefficients"
  insamp<-1.e+90
  title_more<-dimnames(mplot)[[2]]
  colo<-rainbow(ncol(mplot))
  mplot_func(mplot, ax, plot_title, title_more, insamp, colo)
  invisible(dev.off())
}


###################################################
### code chunk number 101: z_box_plot_coef_S_1.pdf
###################################################
  file = paste("z_box_plot_coef_S_1", sep = "")
  cat("\\begin{figure}[H]")
  cat("\\begin{center}")
  cat("\\includegraphics[height=3in, width=4in]{", file, "}\n",sep = "")
  cat("\\caption{Filter coefficients as a function of eta (lambda=0 fixed)", sep = "")
  cat("\\label{z_box_plot_coef_S_1}}", sep = "")
  cat("\\end{center}")
  cat("\\end{figure}")


###################################################
### code chunk number 102: ATS.Rnw:658-688
###################################################
# Plots
#colo<-c("red","blue")
# we select DFA-MSE (second series) and a customized 
series_vec<-2:length(eta_vec)
for (ki in 1:length(a_vec)) #ki<-1  
{
file = paste("z_dfa_cust_ats_out_",ki,"_S.pdf", sep = "")
pdf(file = paste(path.out,file,sep=""), paper = "special", width = 6, height = 6)
# extract all series from first realization (there is only one realization here)
  xf_per<-xff_sim[940:(940+len),,ki,1]#dim(xff_sim)
  dimnames(xf_per)[[2]]<-dim_names[[1]]
  anf<-1
  enf<-len
  sel<-1:dim(amp)[2]
  mplot<-scale(xf_per[,series_vec][anf:enf,])  #head(xf_per)
  plot(as.ts(mplot[,1]),type="l",axes=F,col="red",ylim=c(min(na.exclude(mplot)),
  max(na.exclude(mplot))),ylab="",xlab="",
  main=paste("MSE (red) vs. Customized",sep=""),lwd=1)
  mtext("MSE", side = 3, line = -1,at=(enf-anf)/2,col=colo[1])
  for (i in 2:length(series_vec))
  {
    lines(as.ts(mplot[,i]),col=colo[i],lwd=1)
    mtext(paste("Customized: ",dimnames(xf_per)[[2]][series_vec[i]],sep=""), side = 3, line = -i,at=(enf-anf)/2,col=colo[i])
  }
  axis(1,at=c(1,rep(0,6))+as.integer((0:6)*(enf-anf)/6),
  labels=as.integer(anf+(0:6)*(enf-anf)/6))
  axis(2)
  box()
invisible(dev.off())
}


###################################################
### code chunk number 103: z_dfa_cust_ats_out_1_S.pdf
###################################################
  file = paste("z_dfa_cust_ats_out_1_S", sep = "")
  cat("\\begin{figure}[H]")
  cat("\\begin{center}")
  cat("\\includegraphics[height=3in, width=4in]{", file, "}\n",sep = "")
  cat("\\caption{Filter outputs MSE (red) vs. customized, a1=0.9", sep = "")
  cat("\\label{z_dfa_cust_ats_out_1_S}}", sep = "")
  cat("\\end{center}")
  cat("\\end{figure}")


###################################################
### code chunk number 104: ATS.Rnw:722-726
###################################################
# Specify the etas
eta_vec<-c(0,1.8)
# Specify the fixed lambda
lambda_vec<-c(0,128)


###################################################
### code chunk number 105: ATS.Rnw:728-754
###################################################
#rm(list=ls())
# Specify the processes: ar(1) with coefficients -0.9,0.1 and 0.9
a_vec<-c(0.9,0.1,-0.9)
# Ordinary ATS-components
scaled_ATS<-F
# Generate a single realization of the processes
anzsim<-1
# Specify filter length
L<-24
# Use periodogram
mba<-F
estim_MBA<-T
M<-len/2
L_sym<-1000
# Length of long data (for computing the target)
len1<-3000
# Length of estimation sample
len<-120
# cutoff
cutoff<-pi/12
# Real-time design
Lag<-0
# no constraints
i1<-i2<-F
# difference data
dif<-F


###################################################
### code chunk number 106: ATS.Rnw:756-759
###################################################
# Proceed to estimation
for_sim_obj<-for_sim_out(a_vec,len1,len,cutoff,L,mba,estim_MBA,L_sym,
              Lag,i1,i2,scaled_ATS,lambda_vec,eta_vec,anzsim,M,dif)


###################################################
### code chunk number 107: ATS.Rnw:761-775
###################################################
# Extract sample performances
# 1 ATS
ats_sym_ST<-for_sim_obj$ats_sym
# 2 Curvature, Peak Correlation, ...
amp_shift_mat_sim<-for_sim_obj$amp_shift_mat_sim
# 3. Amplitude and time-shifts
amp_sim_per<-for_sim_obj$amp_sim_per
shift_sim_per<-for_sim_obj$shift_sim_per
# 4. Output series
xff_sim<-for_sim_obj$xff_sim
# 5. Peak correlation and Curvature
amp_shift_mat_sim_ST<-for_sim_obj$amp_shift_mat_sim
dim_names<-for_sim_obj$dim_names
i_process<-1


###################################################
### code chunk number 108: print_tab_cor
###################################################
library(Hmisc)
require(xtable)
#latex(cor_vec, dec = 1, , caption = "Example of using latex to create table",
#center = "centering", file = "", floating = FALSE)
xtable(ats_sym_ST[-1,,i_process,1], dec = 1,digits=6, caption = paste("ATS-Components as a function of lambda and eta, a1=0.9",sep=""),label=paste("ats_comp_dfa_ST_1",sep=""),
center = "centering", file = "", floating = FALSE)


###################################################
### code chunk number 109: ATS.Rnw:790-818
###################################################

for (DGP in 1:length(a_vec))#DGP<-3
{
  file = paste("z_box_plot_amp_and_shift_cust_ST_",DGP,".pdf", sep = "")
  pdf(file = paste(path.out,file,sep=""), paper = "special", 
      width = 6, height = 3)
  par(mfrow=c(1,2))
  mplot<-amp_sim_per[,-1,DGP,1]
  dimnames(mplot)[[2]]<-paste("Amplitude (",lambda_vec,",",eta_vec,")",sep="")
  ax<-rep(NA,ncol(mplot))
  ax[1+(0:6)*((nrow(mplot)-1)/6)]<-c(0,"pi/6","2pi/6","3pi/6","4pi/6","5pi/6","pi")
  plot_title<-paste("Amplitude functions: a1=",a_vec[DGP],sep="")
  insamp<-1.e+90
  title_more<-dimnames(mplot)[[2]]
  colo<-rainbow(ncol(mplot))
  mplot_func(mplot, ax, plot_title, title_more, insamp, colo)
  mplot<-shift_sim_per[,-1,DGP,1]
  dimnames(mplot)[[2]]<-paste("Time-shifts (",lambda_vec,",",eta_vec,")",sep="")
  ax<-rep(NA,ncol(mplot))
  ax[1+(0:6)*((nrow(mplot)-1)/6)]<-c(0,"pi/6","2pi/6","3pi/6","4pi/6","5pi/6","pi")
  plot_title<-paste("Time-shifts: a1=",a_vec[DGP],sep="")
  insamp<-1.e+90
  title_more<-dimnames(mplot)[[2]]
  colo<-rainbow(ncol(mplot))
  mplot_func(mplot, ax, plot_title, title_more, insamp, colo)
  invisible(dev.off())
}



###################################################
### code chunk number 110: z_box_plot_amp_and_shift_cust_ST_1.pdf
###################################################
  file = paste("z_box_plot_amp_and_shift_cust_ST_1", sep = "")
  cat("\\begin{figure}[H]")
  cat("\\begin{center}")
  cat("\\includegraphics[height=3in, width=4in]{", file, "}\n",sep = "")
  cat("\\caption{Amplitude (left) and time-shift functions (right) as a function of lambda and eta", sep = "")
  cat("\\label{z_box_plot_amp_and_shift_cust_ST_1}}", sep = "")
  cat("\\end{center}")
  cat("\\end{figure}")


###################################################
### code chunk number 111: ATS.Rnw:831-860
###################################################
# Plots
#colo<-c("red","blue")
# we select DFA-MSE (second series) and a customized 
series_vec<-c(2,3)
for (ki in 1:length(a_vec)) #ki<-3  
{
# extract all series from first realization (there is only one realization here)
  file = paste("z_dfa_cust_ats_out_",ki,"_ST.pdf", sep = "")
  pdf(file = paste(path.out,file,sep=""), paper = "special", width = 6, height = 3)
  xf_per<-xff_sim[940:(940+len),,ki,1]#dim(xff_sim)
  dimnames(xf_per)[[2]]<-dim_names[[1]]
  anf<-1
  enf<-len
  sel<-1:dim(amp)[2]
  mplot<-scale(cbind(xf_per[,series_vec[1]],xf_per[,series_vec[2]])[anf:enf,])  #head(xf_per)
  plot(as.ts(mplot[,1]),type="l",axes=F,col="red",ylim=c(min(na.exclude(mplot)),
  max(na.exclude(mplot))),ylab="",xlab="",
  main=paste("MSE (red) vs. Customized (cyan): a1=",a_vec[ki],sep=""),lwd=1)
  mtext("MSE", side = 3, line = -1,at=(enf-anf)/2,col=colo[1])
  i<-2
  lines(as.ts(mplot[,i]),col=colo[2],lwd=2)
  mtext(paste("Customized: ",dimnames(xf_per)[[2]][series_vec[2]],sep=""), side = 3, line = -i,at=(enf-anf)/2,col=colo[2])
  axis(1,at=c(1,rep(0,6))+as.integer((0:6)*(enf-anf)/6),
  labels=as.integer(anf+(0:6)*(enf-anf)/6))
  axis(2)
  box()
  invisible(dev.off())

}


###################################################
### code chunk number 112: z_dfa_cust_ats_out_1_ST.pdf
###################################################
  file = paste("z_dfa_cust_ats_out_1_ST", sep = "")
  cat("\\begin{figure}[H]")
  cat("\\begin{center}")
  cat("\\includegraphics[height=3in, width=4in]{", file, "}\n",sep = "")
  cat("\\caption{Filter outputs MSE (red) vs. customized (cyan), a1=0.9", sep = "")
  cat("\\label{z_dfa_cust_ats_out_1_ST}}", sep = "")
  cat("\\end{center}")
  cat("\\end{figure}")


###################################################
### code chunk number 113: ATS.Rnw:884-888
###################################################
# We allow for a re-calibration (by the inverse amplitude function in the passband)
scaled_ATS<-T
for_sim_obj<-for_sim_out(a_vec,len1,len,cutoff,L,mba,estim_MBA,L_sym,Lag,i1,
                        i2,scaled_ATS,lambda_vec,eta_vec,anzsim,M,dif)


###################################################
### code chunk number 114: ATS.Rnw:890-900
###################################################
# Extract sample performances
# 1 ATS
ats_sym_ST_re_scaled<-for_sim_obj$ats_sym
# 2. Amplitude and time-shifts
amp_sim_per_re_scaled<-for_sim_obj$amp_sim_per
# 3. Target
Gamma<-for_sim_obj$Gamma
i_process<-1
ats_scaled_unscaled<-rbind(ats_sym_ST[3,,i_process,1],ats_sym_ST_re_scaled[3,,i_process,1])
dimnames(ats_scaled_unscaled)[[1]]<-c("Customized unscaled","Customized re-scaled")


###################################################
### code chunk number 115: ATS.Rnw:907-921
###################################################
DGP<-1
colo<-c("blue","cyan","orange")
passband<-1:(1+(length(amp_sim_per[,1+length(eta_vec),DGP,1])-1)*cutoff/pi)
file = paste("z_box_plot_amp_and_shift_cust_ST_",DGP,"_scaled_unscaled.pdf", sep = "")
pdf(file = paste(path.out,file,sep=""), paper = "special", width = 6, height = 3)
mplot<-cbind(Gamma,amp_sim_per[,1+length(eta_vec),DGP,1],amp_sim_per[,1+length(eta_vec),DGP,1]/mean(amp_sim_per[passband,1+length(eta_vec),DGP,1]))
dimnames(mplot)[[2]]<-c("Target","Amplitude original","Amplitude re-calibrated")
ax<-rep(NA,ncol(mplot))
ax[1+(0:6)*((nrow(mplot)-1)/6)]<-c(0,"pi/6","2pi/6","3pi/6","4pi/6","5pi/6","pi")
plot_title<-"Amplitude customized: original (cyan) vs. re-scaled (orange)"
insamp<-1.e+90
title_more<-dimnames(mplot)[[2]]
mplot_func(mplot, ax, plot_title, title_more, insamp, colo)
invisible(dev.off())


###################################################
### code chunk number 116: z_box_plot_amp_and_shift_cust_ST_1_scaled_unscaled.pdf
###################################################
  file = paste("z_box_plot_amp_and_shift_cust_ST_1_scaled_unscaled", sep = "")
  cat("\\begin{figure}[H]")
  cat("\\begin{center}")
  cat("\\includegraphics[height=4in, width=4in]{", file, "}\n",sep = "")
  cat("\\caption{Amplitude functions of original (cyan) and scaled customized filter (orange)", sep = "")
  cat("\\label{z_box_plot_amp_and_shift_cust_ST_1_scaled_unscaled}}", sep = "")
  cat("\\end{center}")
  cat("\\end{figure}")


###################################################
### code chunk number 117: print_tab_cor
###################################################
library(Hmisc)
require(xtable)
#latex(cor_vec, dec = 1, , caption = "Example of using latex to create table",
#center = "centering", file = "", floating = FALSE)
xtable(ats_scaled_unscaled, dec = 1,digits=6, caption = paste("ATS-Components of customized design: unscaled vs. scaled filter, a1=0.9",sep=""),label=paste("ats_comp_dfa_ST_1_scaled_unscaled",sep=""),
center = "centering", file = "", floating = FALSE)


###################################################
### code chunk number 118: print_tab_cor
###################################################
i_process<-1
library(Hmisc)
require(xtable)
#latex(cor_vec, dec = 1, , caption = "Example of using latex to create table",
#center = "centering", file = "", floating = FALSE)
xtable(cbind(ats_sym_T[-1,,i_process,1],amp_shift_mat_sim_T[-1,3:4,i_process,1]), dec = 1,digits=6, caption = paste("ATS-Components, Peak-Correlation and Curvature: emphasizing Timeliness only, a1=0.9",sep=""),label=paste("ats_comp_dfa_T_1_pc",sep=""),
center = "centering", file = "", floating = FALSE)


###################################################
### code chunk number 119: print_tab_cor
###################################################
library(Hmisc)
require(xtable)
#latex(cor_vec, dec = 1, , caption = "Example of using latex to create table",
#center = "centering", file = "", floating = FALSE)
xtable(cbind(ats_sym_S[-1,,i_process,1],amp_shift_mat_sim_S[-1,3:4,i_process,1]), dec = 1,digits=6, caption = paste("ATS-Components, Peak-Correlation and Curvature: emphasizing Smoothness only, a1=0.9",sep=""),label=paste("ats_comp_dfa_S_1_pc",sep=""),
center = "centering", file = "", floating = FALSE)


###################################################
### code chunk number 120: ATS.Rnw:988-990
###################################################
ats_scaled_unscaled_pc<-rbind(cbind(ats_sym_ST[2:3,,i_process,1],amp_shift_mat_sim_ST[-1,3:4,i_process,1]),c(ats_sym_ST_re_scaled[3,,i_process,1],amp_shift_mat_sim_ST[3,3:4,i_process,1]))
dimnames(ats_scaled_unscaled_pc)[[1]][3]<-"Scaled customized"


###################################################
### code chunk number 121: print_tab_cor
###################################################
library(Hmisc)
require(xtable)
#latex(cor_vec, dec = 1, , caption = "Example of using latex to create table",
#center = "centering", file = "", floating = FALSE)
xtable(ats_scaled_unscaled_pc, dec = 1,digits=6, caption = paste("ATS-Components, Peak-Correlation and Curvature: emphasizing Timeliness and Smoothness, a1=0.9",sep=""),label=paste("ats_comp_dfa_ST_1_pc",sep=""),
center = "centering", file = "", floating = FALSE)


###################################################
### code chunk number 122: ATS.Rnw:1065-1066
###################################################
source(file=paste(path.pgm,"functions_trilemma.r",sep=""))


###################################################
### code chunk number 123: ATS.Rnw:1070-1072
###################################################
# Number of realizations
anzsim<-100


###################################################
### code chunk number 124: ATS.Rnw:1074-1103
###################################################
# Specify the processes: ar(1) with coefficients -0.9,0.1 and 0.9
a_vec<-c(0.9,0.1,-0.9)
# Ordinary ATS-components
scaled_ATS<-F
# Specify the lambdas
lambda_vec<-c(0,0,30,500)
# Specify the etas
eta_vec<-c(0,1.5,1,0.3)
# Specify filter length
L<-24
# Use periodogram
mba<-F
estim_MBA<-T
M<-len/2
# Length of symmetric target filter (for computing MSEs)
L_sym<-2*939
# Length of long data
len1<-2000
# Length of estimation sample
len<-120
# cutoff
cutoff<-pi/12
# Real-time design
Lag<-0
# no constraints
i1<-i2<-F
# difference data
dif<-F



###################################################
### code chunk number 125: ATS.Rnw:1105-1108
###################################################
# Proceed to simulation run
for_sim_obj<-for_sim_out(a_vec,len1,len,cutoff,L,mba,estim_MBA,L_sym,Lag,
                      i1,i2,scaled_ATS,lambda_vec,eta_vec,anzsim,M,dif)


###################################################
### code chunk number 126: ATS.Rnw:1110-1118
###################################################
# Extract sample performances
amp_shift_mat_sim<-for_sim_obj$amp_shift_mat_sim
amp_sim_per<-for_sim_obj$amp_sim_per
shift_sim_per<-for_sim_obj$shift_sim_per
xff_sim<-for_sim_obj$xff_sim
xff_sim_sym<-for_sim_obj$xff_sim_sym
ats_sym<-for_sim_obj$ats_sym
dim_names<-for_sim_obj$dim_names


###################################################
### code chunk number 127: ATS.Rnw:1131-1158
###################################################
# Boxplots performance measures: curvatures and peak-cor in and out-of-sample

colo<-c("red","orange","yellow","green","blue")#rainbow(length(lambda_vec)+1)

Perf_meas_sel<-c(3,7,4,8,5,9,6,10)
for (DGP in 1:length(a_vec))#DGP<-2
{
  file = paste("z_box_plot_emp_per_perf_inout_",DGP,".pdf", sep = "")
  pdf(file = paste(path.out,file,sep=""), paper = "special", width = 6, height = 6)
  par(mfrow=c(2,2))
  for (Perf_meas in Perf_meas_sel[1:4])
  {
    boxplot(list(amp_shift_mat_sim[1,Perf_meas,DGP,],amp_shift_mat_sim[2,Perf_meas,DGP,], amp_shift_mat_sim[3,Perf_meas,DGP,],amp_shift_mat_sim[4,Perf_meas,DGP,],amp_shift_mat_sim[5,Perf_meas,DGP,]),outline=T,names=c("Best MSE",paste("(",lambda_vec,",",eta_vec,")",sep="")),main=paste(dim_names[[2]][Perf_meas],", a1=",a_vec[DGP],sep=""),cex.axis=0.8,col=colo)
  }
  invisible(dev.off())
  file = paste("z_box_plot_emp_per_perf_mse_inout_",DGP,".pdf", sep = "")
  pdf(file = paste(path.out,file,sep=""), paper = "special", width = 6, height = 6)
  par(mfrow=c(1,2))
  for (Perf_meas in Perf_meas_sel[5:6])
  {
    boxplot(list(amp_shift_mat_sim[1,Perf_meas,DGP,],amp_shift_mat_sim[2,Perf_meas,DGP,],
    amp_shift_mat_sim[3,Perf_meas,DGP,],amp_shift_mat_sim[4,Perf_meas,DGP,],amp_shift_mat_sim[5,Perf_meas,DGP,]),outline=T,
    names=c("Best MSE",paste("(",lambda_vec,",",eta_vec,")",sep="")),
    main=paste(dim_names[[2]][Perf_meas],", a1=",a_vec[DGP],sep=""),cex.axis=0.8,col=colo,notch=F)
  }
  invisible(dev.off())
}


###################################################
### code chunk number 128: z_box_plot_emp_per_perf_inout_2.pdf
###################################################
  file = paste("z_box_plot_emp_per_perf_inout_2", sep = "")
  cat("\\begin{figure}[H]")
  cat("\\begin{center}")
  cat("\\includegraphics[height=5in, width=5in]{", file, "}\n",sep = "")
  cat("\\caption{Empirical distributions
  of Curvature and Peak-Correlation of best theoretical MSE (red), empirical MSE (orange), strong noise suppression (yellow), balanced fast and smooth (green) and very fast (blue) filters. All empirical filters are based on the periodogram:
  in-sample (left plots) and out-of-sample (right plots) for a1=0.1", sep = "")
  cat("\\label{z_box_plot_emp_per_perf_inout_2}}", sep = "")
  cat("\\end{center}")
  cat("\\end{figure}")


###################################################
### code chunk number 129: z_box_plot_emp_per_perf_mse_inout_2.pdf
###################################################
  file = paste("z_box_plot_emp_per_perf_mse_inout_2", sep = "")
  cat("\\begin{figure}[H]")
  cat("\\begin{center}")
  cat("\\includegraphics[height=2.5in, width=5in]{", file, "}\n",sep = "")
  cat("\\caption{Empirical distributions
  of Sample MSEs of best theoretical MSE (red), empirical MSE (orange), strong noise suppression (yellow), balanced fast and speed (green) and very fast (blue) filters. All empirical filters are based on the periodogram:
  in-sample (left plots) and out-of-sample (right plots) for a1=0.1", sep = "")
  cat("\\label{z_box_plot_emp_per_perf_mse_inout_2}}", sep = "")
  cat("\\end{center}")
  cat("\\end{figure}")


###################################################
### code chunk number 130: ATS.Rnw:1204-1239
###################################################
amp_shift_mat_sim<-for_sim_obj$amp_shift_mat_sim
amp_sim_per<-for_sim_obj$amp_sim_per
shift_sim_per<-for_sim_obj$shift_sim_per
xff_sim<-for_sim_obj$xff_sim
xff_sim_sym<-for_sim_obj$xff_sim_sym
ats_sym<-for_sim_obj$ats_sym
dim_names<-for_sim_obj$dim_names
for (ki in 2:2) #ki<-2  
{
file = paste("z_dfa_cust_ats_mba_per_e.pdf", sep = "")
pdf(file = paste(path.out,file,sep=""), paper = "special", width = 6, height = 6)

  xf_per<-xff_sim[940:(940+2*len),,ki,10]
  dimnames(xf_per)[[2]]<-dim_names[[1]]
  anf<-1
  enf<-2*len
  sel<-1:dim(amp)[2]
  mplot<-scale(cbind(xf_per[,1],xf_per[,4])[anf:enf,])  #head(xf_per)
  plot(as.ts(mplot[,1]),type="l",axes=F,col="red",ylim=c(min(na.exclude(mplot)),
  max(na.exclude(mplot))),ylab="",xlab="",
  main=paste("Benchmark MSE (red) vs. Customized balanced (green)",sep=""),lwd=2)
  mtext("in sample",side = 3, line = -1,at=60,col="black")
  mtext("out-of-sample",side = 3, line = -1,at=180,col="black")
  mtext("Benchmark MSE", side = 3, line = -1,at=(enf-anf)/2,col="red")
  i<-2
  lines(as.ts(mplot[,i]),col=colo[4],lwd=2)
  mtext(paste("Customized: ",dimnames(xf_per)[[2]][4],sep=""), side = 3, line = -i,at=(enf-anf)/2,col=colo[4])
  abline(v=120)
  axis(1,at=c(1,rep(0,6))+as.integer((0:6)*(enf-anf)/6),
  labels=as.integer(anf+(0:6)*(enf-anf)/6))
  axis(2)
  box()

invisible(dev.off())
}


###################################################
### code chunk number 131: z_dfa_cust_ats_mba_per_e.pdf
###################################################
  file = paste("z_dfa_cust_ats_mba_per_e", sep = "")
  cat("\\begin{figure}[H]")
  cat("\\begin{center}")
  cat("\\includegraphics[height=4in, width=6in]{", file, "}\n",sep = "")
  cat("\\caption{Outputs of benchmark MSE (red) and customized balanced (green) filters: a1=0.1. In-sample (left half) and out-of-sample (right half)", sep = "")
  cat("\\label{z_dfa_cust_ats_mba_per_e}}", sep = "")
  cat("\\end{center}")
  cat("\\end{figure}")



###################################################
### code chunk number 132: ATS.Rnw:1270-1275
###################################################
# Second process
a1<-0.1
# Customization settings DFA
lambda_vec<-c(0,30)
eta_vec<-c(0,1)


###################################################
### code chunk number 133: ATS.Rnw:1277-1286
###################################################
# target
cutoff<-pi/12
len1<-2000
len<-120
L<-24
Lag<-0
i1<-i2<-F
# MDFA: MSE design
lambda_mdfa<-eta_mdfa<-0


###################################################
### code chunk number 134: ATS.Rnw:1288-1292
###################################################
# Run the competition: the new function handles the multivariate case
cust_leading_obj<-mdfa_mse_leading_indicator_vs_dfa_customized(anzsim,
                  a1,cutoff,L,lambda_vec,eta_vec,len1,len,i1,i2,Lag,
                  lambda_mdfa,eta_mdfa,troikaner)  


###################################################
### code chunk number 135: ATS.Rnw:1300-1307
###################################################
file = paste("z_curv_dfacust_leadind.pdf", sep = "")
pdf(file = paste(path.out,file,sep=""), paper = "special", width = 6, height = 6)
par(mfrow=c(1,2))
boxplot(list(cust_leading_obj$perf_in_sample[,1,1],cust_leading_obj$perf_in_sample[,1,2],cust_leading_obj$perf_in_sample[,1,3]),outline=T,names=c(paste("DFA(",lambda_vec,",",eta_vec,")",sep=""),"MDFA-MSE Leading Indicator"),main=paste("Curvature in-sample, a1=",a1,sep=""),cex.axis=0.8,col=c("orange","green","brown"))

boxplot(list(cust_leading_obj$perf_out_sample[,1,1],cust_leading_obj$perf_out_sample[,1,2],cust_leading_obj$perf_out_sample[,1,3]),outline=T,names=c(paste("DFA(",lambda_vec,",",eta_vec,")",sep=""),"MDFA-MSE Leading Indicator"),main=paste("Curvature out-of-sample, a1=",a1,sep=""),cex.axis=0.8,col=c("orange","green","brown"))
invisible(dev.off())


###################################################
### code chunk number 136: z_curv_dfacust_leadind.pdf
###################################################
  file = paste("z_curv_dfacust_leadind", sep = "")
  cat("\\begin{figure}[H]")
  cat("\\begin{center}")
  cat("\\includegraphics[height=3in, width=4in]{", file, "}\n",sep = "")
  cat("\\caption{Curvature: mean-square DFA (orange), customized DFA (green) and MSE-MDFA leading indicator (brown): a1=0.1 In-sample (left) and out-of-sample (right).", sep = "")
  cat("\\label{z_curv_dfacust_leadind}}", sep = "")
  cat("\\end{center}")
  cat("\\end{figure}")


###################################################
### code chunk number 137: ATS.Rnw:1327-1336
###################################################
file = paste("z_peak_cor_dfacust_leadind.pdf", sep = "")
pdf(file = paste(path.out,file,sep=""), paper = "special", width = 6, height = 6)

par(mfrow=c(1,2))
boxplot(list(cust_leading_obj$perf_in_sample[,2,1],cust_leading_obj$perf_in_sample[,2,2],cust_leading_obj$perf_in_sample[,2,3]),outline=T,names=c(paste("DFA(",lambda_vec,",",eta_vec,")",sep=""),"MDFA-MSE Leading Indicator"),main=paste("Peak-Correlation in-sample, a1=",a1,sep=""),cex.axis=0.8,col=c("orange","green","brown"))

boxplot(list(cust_leading_obj$perf_out_sample[,2,1],cust_leading_obj$perf_out_sample[,2,2],cust_leading_obj$perf_out_sample[,2,3]),outline=T,names=c(paste("DFA(",lambda_vec,",",eta_vec,")",sep=""),"MDFA-MSE Leading Indicator"),main=paste("Peak-Correlation out-of-sample, a1=",a1,sep=""),cex.axis=0.8,col=c("orange","green","brown"))

invisible(dev.off())


###################################################
### code chunk number 138: z_peak_cor_dfacust_leadind.pdf
###################################################
  file = paste("z_peak_cor_dfacust_leadind", sep = "")
  cat("\\begin{figure}[H]")
  cat("\\begin{center}")
  cat("\\includegraphics[height=3in, width=4in]{", file, "}\n",sep = "")
  cat("\\caption{Peak Correlation: mean-square DFA (orange), customized DFA (green) and MSE-MDFA leading indicator (brown): a1=0.1 In-sample (left) and out-of-sample (right).", sep = "")
  cat("\\label{z_peak_cor_dfacust_leadind}}", sep = "")
  cat("\\end{center}")
  cat("\\end{figure}")


###################################################
### code chunk number 139: ATS.Rnw:1357-1364
###################################################
file = paste("z_MSE_dfacust_leadind.pdf", sep = "")
pdf(file = paste(path.out,file,sep=""), paper = "special", width = 6, height = 6)
par(mfrow=c(1,2))
boxplot(list(cust_leading_obj$perf_in_sample[,3,1],cust_leading_obj$perf_in_sample[,3,2],cust_leading_obj$perf_in_sample[,3,3]),outline=T,names=c(paste("DFA(",lambda_vec,",",eta_vec,")",sep=""),"MDFA-MSE Leading Indicator"),main=paste("MSE in-sample, a1=",a1,sep=""),cex.axis=0.8,col=c("orange","green","brown"))

boxplot(list(cust_leading_obj$perf_out_sample[,3,1],cust_leading_obj$perf_out_sample[,3,2],cust_leading_obj$perf_out_sample[,3,3]),outline=T,names=c(paste("DFA(",lambda_vec,",",eta_vec,")",sep=""),"MDFA-MSE Leading Indicator"),main=paste("MSE out-of-sample, a1=",a1,sep=""),cex.axis=0.8,col=c("orange","green","brown"))
invisible(dev.off())


###################################################
### code chunk number 140: z_MSE_dfacust_leadind.pdf
###################################################
  file = paste("z_MSE_dfacust_leadind", sep = "")
  cat("\\begin{figure}[H]")
  cat("\\begin{center}")
  cat("\\includegraphics[height=3in, width=4in]{", file, "}\n",sep = "")
  cat("\\caption{MSE: mean-square DFA (orange), customized DFA (green) and MSE-MDFA leading indicator (brown): a1=0.1 In-sample (left) and out-of-sample (right).", sep = "")
  cat("\\label{z_MSE_dfacust_leadind}}", sep = "")
  cat("\\end{center}")
  cat("\\end{figure}")



###################################################
### code chunk number 141: ATS.Rnw:1386-1405
###################################################
# Plots
file = paste("z_dfa_cust_mdfa_leading_indicator.pdf", sep = "")
pdf(file = paste(path.out,file,sep=""), paper = "special", width = 6, height = 6)
mplot<-scale(cust_leading_obj$filter_output_in_sample) 
dimnames(mplot)[[2]]<-dimnames(cust_leading_obj$filter_output_in_sample)[[2]]
colo_cust<-c("orange","green","brown")
plot(as.ts(mplot[,1]),type="l",axes=F,col=colo_cust[1],ylim=c(min(na.exclude(mplot)),max(na.exclude(mplot))),ylab="",xlab="",main=paste("Filter outputs: last realization",sep=""),lwd=1)
mtext(dimnames(mplot)[[2]][1], side = 3, line = -1,at=nrow(mplot)/2,col=colo_cust[1])
for (i in 2:(ncol(mplot)-1))
{
  lines(mplot[,i],col=colo_cust[i],lwd=1)
  mtext(dimnames(mplot)[[2]][i], side = 3, line = -i,at=nrow(mplot)/2,col=colo_cust[i])
}
axis(1,at=c(1,rep(0,6))+as.integer((0:6)*nrow(mplot)/6),
labels=c(1,rep(0,6))+as.integer((0:6)*nrow(mplot)/6))
axis(2)
box()
invisible(dev.off())



###################################################
### code chunk number 142: z_dfa_cust_mdfa_leading_indicator.pdf
###################################################
  file = paste("z_dfa_cust_mdfa_leading_indicator", sep = "")
  cat("\\begin{figure}[H]")
  cat("\\begin{center}")
  cat("\\includegraphics[height=4in, width=6in]{", file, "}\n",sep = "")
  cat("\\caption{Scaled outputs of DFA-MSE (orange), DFA-balanced (green) and bivariate MDFA-MSE (brown): a1=0.9", sep = "")
  cat("\\label{z_dfa_cust_mdfa_leading_indicator}}", sep = "")
  cat("\\end{center}")
  cat("\\end{figure}")



###################################################
### code chunk number 143: dfa_ms
###################################################
head(mdfa_analytic)


###################################################
### code chunk number 144: dfa_ms
###################################################
head(MDFA_cust)


###################################################
### code chunk number 145: dfa_ms
###################################################
head(MDFA_cust_constraint)


###################################################
### code chunk number 146: ATS_multivariate.Rnw:215-234
###################################################
# Second process
a1<-0.1
# Customization settings MDFA
eta_mdfa<-0.3*(0:6)
# Fix lambda=0
lambda_mdfa<-rep(0,length(eta_mdfa))
# Customization settings DFA
lambda_vec<-lambda_vec
eta_vec<-eta_vec
# target
cutoff<-pi/6
# Filter length
L<-12
# Real-time design
Lag<-0
# No constraints
i1<-i2<-F
# Sample length 120
len<-120


###################################################
### code chunk number 147: ATS_multivariate.Rnw:236-240
###################################################
anzsim<-1
lambda_vec<-c(0,30)
eta_vec<-c(0,1)
len1<-2000


###################################################
### code chunk number 148: ATS_multivariate.Rnw:242-244
###################################################
cust_leading_obj<-mdfa_mse_leading_indicator_vs_dfa_customized(anzsim,a1,
    cutoff,L,lambda_vec,eta_vec,len1,len,i1,i2,Lag,lambda_mdfa,eta_mdfa,troikaner)  


###################################################
### code chunk number 149: ATS_multivariate.Rnw:251-252
###################################################
tail(mdfa_analytic)


###################################################
### code chunk number 150: ATS_multivariate.Rnw:255-266
###################################################
ats_mat<-matrix(nrow=length(lambda_mdfa),ncol=5)
for (i in 1:length(lambda_mdfa))
{
  ats_mat[i,1]<-cust_leading_obj$mdfa_list[[i]]$Accuracy
  ats_mat[i,2]<-cust_leading_obj$mdfa_list[[i]]$Timeliness
  ats_mat[i,3]<-cust_leading_obj$mdfa_list[[i]]$Smoothness
  ats_mat[i,4]<-0
  ats_mat[i,5]<-sum(ats_mat[i,1:4])
}
dimnames(ats_mat)[[1]]<-paste("MDFA(",lambda_mdfa,",",eta_mdfa,")",sep="")
dimnames(ats_mat)[[2]]<-c("Accuracy","Timeliness","Smoothness","Residual","MSE")


###################################################
### code chunk number 151: ats_comp_mdfa_S
###################################################
library(Hmisc)
require(xtable)
#latex(cor_vec, dec = 1, , caption = "Example of using latex to create table",
#center = "centering", file = "", floating = FALSE)
xtable(ats_mat, dec = 1,digits=6, caption = paste("ATS-Components as a function of eta (lambda=0 fixed)",sep=""),label=paste("ats_comp_mdfa_S",sep=""),
center = "centering", file = "", floating = FALSE)


###################################################
### code chunk number 152: ATS_multivariate.Rnw:284-422
###################################################
colo<-rainbow(length(lambda_mdfa))
file = paste("z_amp_shift_mdfacust_leadind_S.pdf", sep = "")
pdf(file = paste(path.out,file,sep=""), paper = "special", width = 6, height = 6)
par(mfrow=c(3,2))
for (i_mdfa in 1:length(lambda_mdfa))
{

# amplitude functions first series
  if (i_mdfa==1)
  {
    mplot <- abs(cust_leading_obj$mdfa_list[[i_mdfa]]$trffkt[,1])
  } else
  {
    mplot <- cbind(mplot,abs(cust_leading_obj$mdfa_list[[i_mdfa]]$trffkt[,1]))
  }
}
dimnames(mplot)[[2]]<-paste("MDFA(",lambda_mdfa,",",eta_mdfa,")",sep="")
# x-axis
K<-nrow(mplot)-1
freq_axe <- rep(NA, K + 1)
freq_axe[1] <- 0
freq_axe[1 + (1 : 6) * K / 6] <- c(paste0(c("", 2 : 5), "pi/6"), "pi")
ax <- freq_axe
# colors, title and additional titles
insamp <- 1.e+90
#colo <- NULL
plot_title <- "Amplitude Functions series 1"
title_more <- colnames(mplot)
mplot_func(mplot, ax, plot_title, title_more, insamp, colo)

for (i_mdfa in 1:length(lambda_mdfa))
{

# amplitude functions second series
  if (i_mdfa==1)
  {
    mplot <- abs(cust_leading_obj$mdfa_list[[i_mdfa]]$trffkt[,2])
  } else
  {
    mplot <- cbind(mplot,abs(cust_leading_obj$mdfa_list[[i_mdfa]]$trffkt[,2]))
  }
}
dimnames(mplot)[[2]]<-paste("MDFA(",lambda_mdfa,",",eta_mdfa,")",sep="")
# x-axis
K<-nrow(mplot)-1
freq_axe <- rep(NA, K + 1)
freq_axe[1] <- 0
freq_axe[1 + (1 : 6) * K / 6] <- c(paste0(c("", 2 : 5), "pi/6"), "pi")
ax <- freq_axe
# colors, title and additional titles
insamp <- 1.e+90
#colo <- NULL
plot_title <- "Amplitude Functions series 2 (leading indicator)"
title_more <- colnames(mplot)
mplot_func(mplot, ax, plot_title, title_more, insamp, colo)


# time-shift first series
for (i_mdfa in 1:length(lambda_mdfa))#i_mdfa<-1  i_mdfa<-7
{

# time-shift functions first series
  if (i_mdfa==1)
  {
    mplot <- Arg(t(sign(apply(cust_leading_obj$mdfa_list[[i_mdfa]]$b,2,sum))*t(cust_leading_obj$mdfa_list[[i_mdfa]]$trffkt)))[,1]/((0 : K) * pi / K)
# Use exact formula in frequency zero    
    mplot[1] <- (apply(cust_leading_obj$mdfa_list[[i_mdfa]]$b * ((0 : (L - 1))), 2, sum) / 
      apply(cust_leading_obj$mdfa_list[[i_mdfa]]$b, 2, sum))[1]

  } else
  {
    mplot <- cbind(mplot,(Arg(t(sign(apply(cust_leading_obj$mdfa_list[[i_mdfa]]$b,2,sum))*t(cust_leading_obj$mdfa_list[[i_mdfa]]$trffkt)))[,1]/((0 : K) * pi / K)))
# Use exact formula in frequency zero    
    mplot[1,i_mdfa] <- (apply(cust_leading_obj$mdfa_list[[i_mdfa]]$b * ((0 : (L - 1))), 2, sum) / 
      apply(cust_leading_obj$mdfa_list[[i_mdfa]]$b, 2, sum))[1]
  }
}
plot_title <- "Time-Shift series 1"
mplot_func(mplot, ax, plot_title, title_more, insamp, colo)


# time-shift second series
for (i_mdfa in 1:length(lambda_mdfa))
{

# time-shift functions second series
  if (i_mdfa==1)
  {
    mplot <- Arg(t(sign(apply(cust_leading_obj$mdfa_list[[i_mdfa]]$b,2,sum))*t(cust_leading_obj$mdfa_list[[i_mdfa]]$trffkt)))[,2]/((0 : K) * pi / K)
# Use exact formula in frequency zero    
    mplot[1] <- (apply(cust_leading_obj$mdfa_list[[i_mdfa]]$b * ((0 : (L - 1))), 2, sum) / 
      apply(cust_leading_obj$mdfa_list[[i_mdfa]]$b, 2, sum))[2]

  } else
  {
    mplot <- cbind(mplot,(Arg(t(sign(apply(cust_leading_obj$mdfa_list[[i_mdfa]]$b,2,sum))*t(cust_leading_obj$mdfa_list[[i_mdfa]]$trffkt)))[,2]/((0 : K) * pi / K)))
# Use exact formula in frequency zero    
    mplot[1,i_mdfa] <- (apply(cust_leading_obj$mdfa_list[[i_mdfa]]$b * ((0 : (L - 1))), 2, sum) / 
      apply(cust_leading_obj$mdfa_list[[i_mdfa]]$b, 2, sum))[2]
  }
}
plot_title <- "Time-Shift series 2 (leading indicator)"
mplot_func(mplot, ax, plot_title, title_more, insamp, colo)

# Filter coefficients
for (i_mdfa in 1:length(lambda_mdfa))
{

# coefficients first series
  if (i_mdfa==1)
  {
    mplot <- cust_leading_obj$mdfa_list[[i_mdfa]]$b[,1]
  } else
  {
    mplot <- cbind(mplot,cust_leading_obj$mdfa_list[[i_mdfa]]$b[,1])
  }
}
plot_title <- "Coefficients series 1"
ax<-paste("Lag ",0:(L-1),sep="")
mplot_func(mplot, ax, plot_title, title_more, insamp, colo)
for (i_mdfa in 1:length(lambda_mdfa))
{

# coefficients first series
  if (i_mdfa==1)
  {
    mplot <- cust_leading_obj$mdfa_list[[i_mdfa]]$b[,2]
  } else
  {
    mplot <- cbind(mplot,cust_leading_obj$mdfa_list[[i_mdfa]]$b[,2])
  }
}
plot_title <- "Coefficents series 2 (leading indicator)"
ax<-paste("Lag ",0:(L-1),sep="")
mplot_func(mplot, ax, plot_title, title_more, insamp, colo)


invisible(dev.off())


###################################################
### code chunk number 153: z_amp_shift_mdfacust_leadind_S.pdf
###################################################
  file = paste("z_amp_shift_mdfacust_leadind_S", sep = "")
  cat("\\begin{figure}[H]")
  cat("\\begin{center}")
  cat("\\includegraphics[height=8in, width=5in]{", file, "}\n",sep = "")
  cat("\\caption{Amplitude (top), time-shift functions (middle) and filter coefficients (bottom): series 1 (left) and series 2 (right) for customized MDFA-leading indicator (emphasizing Smoothness): a1=0.1", sep = "")
  cat("\\label{z_amp_shift_mdfacust_leadind_S}}", sep = "")
  cat("\\end{center}")
  cat("\\end{figure}")


###################################################
### code chunk number 154: ATS_multivariate.Rnw:446-510
###################################################
colo<-rainbow(length(lambda_mdfa))
file = paste("z_amp_shift_mdfacust_leadind_agg_S.pdf", sep = "")
pdf(file = paste(path.out,file,sep=""), paper = "special", width = 6, height = 6)
par(mfrow=c(1,2))


for (i_mdfa in 1:length(lambda_mdfa))
{

  trffkt_agg<-cust_leading_obj$mdfa_list[[i_mdfa]]$trffkt[,1]+cust_leading_obj$mdfa_list[[i_mdfa]]$trffkt[,2]*cust_leading_obj$weight_func[,3]/cust_leading_obj$weight_func[,2]

# amplitude functions first series
  if (i_mdfa==1)
  {
    mplot <- abs(trffkt_agg)
  } else
  {
    mplot <- cbind(mplot,abs(trffkt_agg))
  }
}
mplot[1,]<-NA
dimnames(mplot)[[2]]<-paste("MDFA(",lambda_mdfa,",",eta_mdfa,")",sep="")
# x-axis
K<-nrow(mplot)-1
freq_axe <- rep(NA, K + 1)
freq_axe[1] <- 0
freq_axe[1 + (1 : 6) * K / 6] <- c(paste0(c("", 2 : 5), "pi/6"), "pi")
ax <- freq_axe
# colors, title and additional titles
insamp <- 1.e+90
#colo <- NULL
plot_title <- "Amplitude aggregated filter"
title_more <- colnames(mplot)
mplot_func(mplot, ax, plot_title, title_more, insamp, colo)



# time-shift first series
for (i_mdfa in 1:length(lambda_mdfa))#i_mdfa<-1  i_mdfa<-2
{  
  trffkt_agg<-cust_leading_obj$mdfa_list[[i_mdfa]]$trffkt[,1]+cust_leading_obj$mdfa_list[[i_mdfa]]$trffkt[,2]*cust_leading_obj$weight_func[,3]/cust_leading_obj$weight_func[,2]


# time-shift functions first series
  if (i_mdfa==1)
  {
    mplot <- Arg(trffkt_agg)/((0 : K) * pi / K)
# Use exact formula in frequency zero    
  #  mplot[1] <- (apply(cust_leading_obj$mdfa_list[[i_mdfa]]$b * ((0 : (L - 1))), 2, sum) / 
   #   apply(cust_leading_obj$mdfa_list[[i_mdfa]]$b, 2, sum))[1]

  } else
  {
    mplot <- cbind(mplot, Arg(trffkt_agg)/((0 : K) * pi / K))
# Use exact formula in frequency zero    
    #mplot[1,i_mdfa] <- (apply(cust_leading_obj$mdfa_list[[i_mdfa]]$b * ((0 : (L - 1))), 2, sum) / 
     # apply(cust_leading_obj$mdfa_list[[i_mdfa]]$b, 2, sum))[1]
  }
}
mplot[1,]<-NA
plot_title <- "Time-Shift aggregated filter"
mplot_func(mplot, ax, plot_title, title_more, insamp, colo)

invisible(dev.off())


###################################################
### code chunk number 155: z_amp_shift_mdfacust_leadind_agg_S.pdf
###################################################
  file = paste("z_amp_shift_mdfacust_leadind_agg_S", sep = "")
  cat("\\begin{figure}[H]")
  cat("\\begin{center}")
  cat("\\includegraphics[height=3in, width=6in]{", file, "}\n",sep = "")
  cat("\\caption{Amplitude (left) and time-shift functions (right) of aggregated filter when emphasizing Smoothness: a1=0.1", sep = "")
  cat("\\label{z_amp_shift_mdfacust_leadind_agg_S}}", sep = "")
  cat("\\end{center}")
  cat("\\end{figure}")


###################################################
### code chunk number 156: ATS_multivariate.Rnw:537-541
###################################################
# Customization settings DFA
lambda_mdfa<-c(0,2^(0:7))
# Fix eta=0
eta_mdfa<-rep(0,length(lambda_mdfa))


###################################################
### code chunk number 157: ATS_multivariate.Rnw:543-559
###################################################
# Second process
a1<-0.1
# target
cutoff<-pi/6
# Filter length
L<-12
# Real-time design
Lag<-0
# No constraints
i1<-i2<-F
# Sample length 120
len<-120
anzsim<-1
lambda_vec<-c(0,30)
eta_vec<-c(0,1)
len1<-2000


###################################################
### code chunk number 158: ATS_multivariate.Rnw:561-563
###################################################
cust_leading_obj<-mdfa_mse_leading_indicator_vs_dfa_customized(anzsim,a1,
    cutoff,L,lambda_vec,eta_vec,len1,len,i1,i2,Lag,lambda_mdfa,eta_mdfa,troikaner)  


###################################################
### code chunk number 159: ATS_multivariate.Rnw:571-582
###################################################
ats_mat<-matrix(nrow=length(lambda_mdfa),ncol=5)
for (i in 1:length(lambda_mdfa))
{
  ats_mat[i,1]<-cust_leading_obj$mdfa_list[[i]]$Accuracy
  ats_mat[i,2]<-cust_leading_obj$mdfa_list[[i]]$Timeliness
  ats_mat[i,3]<-cust_leading_obj$mdfa_list[[i]]$Smoothness
  ats_mat[i,4]<-0
  ats_mat[i,5]<-sum(ats_mat[i,1:4])
}
dimnames(ats_mat)[[1]]<-paste("MDFA(",lambda_mdfa,",",eta_mdfa,")",sep="")
dimnames(ats_mat)[[2]]<-c("Accuracy","Timeliness","Smoothness","Residual","MSE")


###################################################
### code chunk number 160: ats_comp_mdfa_T
###################################################
library(Hmisc)
require(xtable)
#latex(cor_vec, dec = 1, , caption = "Example of using latex to create table",
#center = "centering", file = "", floating = FALSE)
xtable(ats_mat, dec = 1,digits=6, caption = paste("ATS-Components as a function of lambda (eta=0 fixed)",sep=""),label=paste("ats_comp_mdfa_T",sep=""),
center = "centering", file = "", floating = FALSE)


###################################################
### code chunk number 161: ATS_multivariate.Rnw:601-664
###################################################
colo<-rainbow(length(lambda_mdfa))
file = paste("z_amp_shift_mdfacust_leadind_agg_T.pdf", sep = "")
pdf(file = paste(path.out,file,sep=""), paper = "special", width = 6, height = 6)
par(mfrow=c(1,2))


for (i_mdfa in 1:length(lambda_mdfa))
{

  trffkt_agg<-cust_leading_obj$mdfa_list[[i_mdfa]]$trffkt[,1]+cust_leading_obj$mdfa_list[[i_mdfa]]$trffkt[,2]*cust_leading_obj$weight_func[,3]/cust_leading_obj$weight_func[,2]

# amplitude functions first series
  if (i_mdfa==1)
  {
    mplot <- abs(trffkt_agg)
  } else
  {
    mplot <- cbind(mplot,abs(trffkt_agg))
  }
}
mplot[1,]<-NA
dimnames(mplot)[[2]]<-paste("MDFA(",lambda_mdfa,",",eta_mdfa,")",sep="")
# x-axis
K<-nrow(mplot)-1
freq_axe <- rep(NA, K + 1)
freq_axe[1] <- 0
freq_axe[1 + (1 : 6) * K / 6] <- c(paste0(c("", 2 : 5), "pi/6"), "pi")
ax <- freq_axe
# colors, title and additional titles
insamp <- 1.e+90
#colo <- NULL
plot_title <- "Amplitude aggregated filter"
title_more <- colnames(mplot)
mplot_func(mplot, ax, plot_title, title_more, insamp, colo)



# time-shift first series
for (i_mdfa in 1:length(lambda_mdfa))#i_mdfa<-1  i_mdfa<-7
{  
  trffkt_agg<-cust_leading_obj$mdfa_list[[i_mdfa]]$trffkt[,1]+cust_leading_obj$mdfa_list[[i_mdfa]]$trffkt[,2]*cust_leading_obj$weight_func[,3]/cust_leading_obj$weight_func[,2]


# time-shift functions first series
  if (i_mdfa==1)
  {
    mplot <- Arg(trffkt_agg)/((0 : K) * pi / K)
# Use exact formula in frequency zero    
  #  mplot[1] <- (apply(cust_leading_obj$mdfa_list[[i_mdfa]]$b * ((0 : (L - 1))), 2, sum) / 
   #   apply(cust_leading_obj$mdfa_list[[i_mdfa]]$b, 2, sum))[1]

  } else
  {
    mplot <- cbind(mplot, Arg(trffkt_agg)/((0 : K) * pi / K))
# Use exact formula in frequency zero    
    #mplot[1,i_mdfa] <- (apply(cust_leading_obj$mdfa_list[[i_mdfa]]$b * ((0 : (L - 1))), 2, sum) / 
     # apply(cust_leading_obj$mdfa_list[[i_mdfa]]$b, 2, sum))[1]
  }
}
plot_title <- "Time-Shift aggregated filter"
mplot_func(mplot, ax, plot_title, title_more, insamp, colo)

invisible(dev.off())


###################################################
### code chunk number 162: z_amp_shift_mdfacust_leadind_agg_T.pdf
###################################################
  file = paste("z_amp_shift_mdfacust_leadind_agg_T", sep = "")
  cat("\\begin{figure}[H]")
  cat("\\begin{center}")
  cat("\\includegraphics[height=3in, width=6in]{", file, "}\n",sep = "")
  cat("\\caption{Amplitude (left) and time-shift functions (right) of aggregated filter when emphasizing Timeliness: a1=0.1", sep = "")
  cat("\\label{z_amp_shift_mdfacust_leadind_agg_T}}", sep = "")
  cat("\\end{center}")
  cat("\\end{figure}")


###################################################
### code chunk number 163: ATS_multivariate.Rnw:691-695
###################################################
# Customization settings DFA
lambda_mdfa<-c(0,30)
# Fix eta=0
eta_mdfa<-c(0,1)


###################################################
### code chunk number 164: ATS_multivariate.Rnw:697-713
###################################################
# Second process
a1<-0.1
# target
cutoff<-pi/6
# Filter length
L<-12
# Real-time design
Lag<-0
# No constraints
i1<-i2<-F
# Sample length 120
len<-120
anzsim<-1
lambda_vec<-c(0,30)
eta_vec<-c(0,1)
len1<-2000


###################################################
### code chunk number 165: ATS_multivariate.Rnw:715-717
###################################################
cust_leading_obj<-mdfa_mse_leading_indicator_vs_dfa_customized(anzsim,a1,
    cutoff,L,lambda_vec,eta_vec,len1,len,i1,i2,Lag,lambda_mdfa,eta_mdfa,troikaner)  


###################################################
### code chunk number 166: ATS_multivariate.Rnw:724-735
###################################################
ats_mat<-matrix(nrow=length(lambda_mdfa),ncol=5)
for (i in 1:length(lambda_mdfa))
{
  ats_mat[i,1]<-cust_leading_obj$mdfa_list[[i]]$Accuracy
  ats_mat[i,2]<-cust_leading_obj$mdfa_list[[i]]$Timeliness
  ats_mat[i,3]<-cust_leading_obj$mdfa_list[[i]]$Smoothness
  ats_mat[i,4]<-0
  ats_mat[i,5]<-sum(ats_mat[i,1:4])
}
dimnames(ats_mat)[[1]]<-paste("MDFA(",lambda_mdfa,",",eta_mdfa,")",sep="")
dimnames(ats_mat)[[2]]<-c("Accuracy","Timeliness","Smoothness","Residual","MSE")


###################################################
### code chunk number 167: ats_comp_mdfa_ST
###################################################
library(Hmisc)
require(xtable)
#latex(cor_vec, dec = 1, , caption = "Example of using latex to create table",
#center = "centering", file = "", floating = FALSE)
xtable(ats_mat, dec = 1,digits=6, caption = paste("ATS-Components as a function of lambda and eta",sep=""),label=paste("ats_comp_mdfa_ST",sep=""),
center = "centering", file = "", floating = FALSE)


###################################################
### code chunk number 168: ATS_multivariate.Rnw:754-818
###################################################
colo<-rainbow(length(lambda_mdfa)+length(lambda_vec))[length(lambda_vec)+1:length(lambda_mdfa)]
file = paste("z_amp_shift_mdfacust_leadind_agg_ST.pdf", sep = "")
pdf(file = paste(path.out,file,sep=""), paper = "special", width = 6, height = 6)
par(mfrow=c(1,2))


for (i_mdfa in 1:length(lambda_mdfa))
{

  trffkt_agg<-cust_leading_obj$mdfa_list[[i_mdfa]]$trffkt[,1]+cust_leading_obj$mdfa_list[[i_mdfa]]$trffkt[,2]*cust_leading_obj$weight_func[,3]/cust_leading_obj$weight_func[,2]

# amplitude functions first series
  if (i_mdfa==1)
  {
    mplot <- abs(trffkt_agg)
  } else
  {
# We scale the customized filter because of zero-shrinkage    
    mplot <- cbind(mplot,abs(trffkt_agg)*0.8*mean(mplot[2:12])/mean(abs(trffkt_agg)[2:12]))
  }
}
mplot[1,]<-NA
dimnames(mplot)[[2]]<-paste("MDFA(",lambda_mdfa,",",eta_mdfa,")",sep="")
# x-axis
K<-nrow(mplot)-1
freq_axe <- rep(NA, K + 1)
freq_axe[1] <- 0
freq_axe[1 + (1 : 6) * K / 6] <- c(paste0(c("", 2 : 5), "pi/6"), "pi")
ax <- freq_axe
# colors, title and additional titles
insamp <- 1.e+90
#colo <- NULL
plot_title <- "Amplitude aggregated filter"
title_more <- colnames(mplot)
mplot_func(mplot, ax, plot_title, title_more, insamp, colo)



# time-shift first series
for (i_mdfa in 1:length(lambda_mdfa))#i_mdfa<-1  i_mdfa<-7
{  
  trffkt_agg<-cust_leading_obj$mdfa_list[[i_mdfa]]$trffkt[,1]+cust_leading_obj$mdfa_list[[i_mdfa]]$trffkt[,2]*cust_leading_obj$weight_func[,3]/cust_leading_obj$weight_func[,2]


# time-shift functions first series
  if (i_mdfa==1)
  {
    mplot <- Arg(trffkt_agg)/((0 : K) * pi / K)
# Use exact formula in frequency zero    
  #  mplot[1] <- (apply(cust_leading_obj$mdfa_list[[i_mdfa]]$b * ((0 : (L - 1))), 2, sum) / 
   #   apply(cust_leading_obj$mdfa_list[[i_mdfa]]$b, 2, sum))[1]

  } else
  {
    mplot <- cbind(mplot, Arg(trffkt_agg)/((0 : K) * pi / K))
# Use exact formula in frequency zero    
    #mplot[1,i_mdfa] <- (apply(cust_leading_obj$mdfa_list[[i_mdfa]]$b * ((0 : (L - 1))), 2, sum) / 
     # apply(cust_leading_obj$mdfa_list[[i_mdfa]]$b, 2, sum))[1]
  }
}
plot_title <- "Time-Shift aggregated filter"
mplot_func(mplot, ax, plot_title, title_more, insamp, colo)

invisible(dev.off())


###################################################
### code chunk number 169: z_amp_shift_mdfacust_leadind_agg_ST.pdf
###################################################
  file = paste("z_amp_shift_mdfacust_leadind_agg_ST", sep = "")
  cat("\\begin{figure}[H]")
  cat("\\begin{center}")
  cat("\\includegraphics[height=3in, width=6in]{", file, "}\n",sep = "")
  cat("\\caption{Amplitude (left) and time-shift functions (right) of aggregated filter when emphasizing Timeliness: a1=0.1", sep = "")
  cat("\\label{z_amp_shift_mdfacust_leadind_agg_ST}}", sep = "")
  cat("\\end{center}")
  cat("\\end{figure}")


###################################################
### code chunk number 170: ATS_multivariate.Rnw:841-861
###################################################
# Customization MDFA: MSE and balanced designs
lambda_mdfa<-c(0,30)
eta_mdfa<-c(0,1.)
# Customization DFA: MSE and balanced designs
lambda_vec<-c(0,30)
eta_vec<-c(0,1)
# Second process
a1<-0.1
# target
cutoff<-pi/6
# Filter length
L<-12
# Real-time design
Lag<-0
# No constraints
i1<-i2<-F
# Sample length 120
len<-120
# Number of replications
anzsim<-100


###################################################
### code chunk number 171: ATS_multivariate.Rnw:863-864
###################################################
len1<-2000


###################################################
### code chunk number 172: ATS_multivariate.Rnw:866-868
###################################################
cust_leading_obj<-mdfa_mse_leading_indicator_vs_dfa_customized(anzsim,a1,
    cutoff,L,lambda_vec,eta_vec,len1,len,i1,i2,Lag,lambda_mdfa,eta_mdfa,troikaner)  


###################################################
### code chunk number 173: ATS_multivariate.Rnw:873-890
###################################################
colo<-rainbow(length(lambda_mdfa)+length(lambda_vec))
file = paste("z_curv_mdfacust_leadind_ST.pdf", sep = "")
pdf(file = paste(path.out,file,sep=""), paper = "special", width = 6, height = 6)
par(mfrow=c(3,2))
# Curvature in sample  dim(cust_leading_obj$perf_in_sample)
boxplot(list(cust_leading_obj$perf_in_sample[,1,1],cust_leading_obj$perf_in_sample[,1,2],cust_leading_obj$perf_in_sample[,1,3],cust_leading_obj$perf_in_sample[,1,4]),outline=T,names=c(paste("DFA(",lambda_vec,",",eta_vec,")",sep=""),paste("MDFA(",lambda_mdfa,",",eta_mdfa,")",sep="")),main=paste("Curvature in-sample, a1=",a1,sep=""),cex.axis=0.8,col=colo)
# Curvature out-of-sample
boxplot(list(cust_leading_obj$perf_out_sample[,1,1],cust_leading_obj$perf_out_sample[,1,2],cust_leading_obj$perf_out_sample[,1,3],cust_leading_obj$perf_out_sample[,1,4]),outline=T,names=c(paste("DFA(",lambda_vec,",",eta_vec,")",sep=""),paste("MDFA(",lambda_mdfa,",",eta_mdfa,")",sep="")),main=paste("Curvature out-of-sample, a1=",a1,sep=""),cex.axis=0.8,col=colo)
# Peak correlation in sample
boxplot(list(cust_leading_obj$perf_in_sample[,2,1],cust_leading_obj$perf_in_sample[,2,2],cust_leading_obj$perf_in_sample[,2,3],cust_leading_obj$perf_in_sample[,2,4]),outline=T,names=c(paste("DFA(",lambda_vec,",",eta_vec,")",sep=""),paste("MDFA(",lambda_mdfa,",",eta_mdfa,")",sep="")),main=paste("Peak Correlation in-sample, a1=",a1,sep=""),cex.axis=0.8,col=colo)
# Peak correlation out-of-sample 
boxplot(list(cust_leading_obj$perf_out_sample[,2,1],cust_leading_obj$perf_out_sample[,2,2],cust_leading_obj$perf_out_sample[,2,3],cust_leading_obj$perf_out_sample[,2,4]),outline=T,names=c(paste("DFA(",lambda_vec,",",eta_vec,")",sep=""),paste("MDFA(",lambda_mdfa,",",eta_mdfa,")",sep="")),main=paste("Peak Correlation out-of-sample, a1=",a1,sep=""),cex.axis=0.8,col=colo)
# MSE in sample
boxplot(list(cust_leading_obj$perf_in_sample[,3,1],cust_leading_obj$perf_in_sample[,3,2],cust_leading_obj$perf_in_sample[,3,3],cust_leading_obj$perf_in_sample[,3,4]),outline=T,names=c(paste("DFA(",lambda_vec,",",eta_vec,")",sep=""),paste("MDFA(",lambda_mdfa,",",eta_mdfa,")",sep="")),main=paste("MSE in-sample, a1=",a1,sep=""),cex.axis=0.8,col=colo)
# MSE out-of-sample 
boxplot(list(cust_leading_obj$perf_out_sample[,3,1],cust_leading_obj$perf_out_sample[,3,2],cust_leading_obj$perf_out_sample[,3,3],cust_leading_obj$perf_out_sample[,3,4]),outline=T,names=c(paste("DFA(",lambda_vec,",",eta_vec,")",sep=""),paste("MDFA(",lambda_mdfa,",",eta_mdfa,")",sep="")),main=paste("MSE out-of-sample, a1=",a1,sep=""),cex.axis=0.8,col=colo)
invisible(dev.off())


###################################################
### code chunk number 174: z_curv_mdfacust_leadind_ST.pdf
###################################################
  file = paste("z_curv_mdfacust_leadind_ST", sep = "")
  cat("\\begin{figure}[H]")
  cat("\\begin{center}")
  cat("\\includegraphics[height=7in, width=5in]{", file, "}\n",sep = "")
  cat("\\caption{Curvature (top), Peak Correlation (middle) and MSE (bottom), in-sample (left) and out-of-sample (right) for MSE-DFA (red), balanced DFA (green), MSE-MDFA (cyan) and balanced MDFA (violet): a1=0.1", sep = "")
  cat("\\label{z_curv_mdfacust_leadind_ST}}", sep = "")
  cat("\\end{center}")
  cat("\\end{figure}")


###################################################
### code chunk number 175: Replication.Rnw:7-8
###################################################
source(file=paste(path.pgm,"functions_trilemma.r",sep=""))


###################################################
### code chunk number 176: Replication.Rnw:71-89
###################################################
# Sample length
len<-120
# Specify lowpass target
cutoff<-pi/12
# Order of approximation of bi-infinite target by finite symmetric filter
ord<-120
# Compute coefficients gamma of symmetric filter
gamma_k<-c(cutoff/pi,(1/pi)*sin(cutoff*1:ord)/(1:ord))
# AR(1)-coefficient
a_vec<-c(0.9,0.1,-0.9)
# Initialize matrix of best MSE coefficients
gamma_mba_rt<-matrix(ncol=length(a_vec),nrow=ord)
for (k in 1:length(a_vec))
{
# Model-based filter: backcasts are ignored
  gamma_0<-gamma_k%*%a_vec[k]^(0:ord)
  gamma_mba_rt[,k]<-c(gamma_0,gamma_k[2:ord])
}


###################################################
### code chunk number 177: Replication.Rnw:107-138
###################################################
# Frequency resolution: higher means tighter approximation 
#   but computationally more intensive
M<-10*len
# Filter length
L<-len
# MSE-filter
lambda<-0
eta<-0
# Real-time design
Lag<-0
# Unconstrained filter
i1<-F
i2<-F
# Target in frequency-domain
Gamma<-(0:M)<as.integer(cutoff*M/pi)+1
omega_k<-(0:M)*pi/M
# Coefficients of optimal MSE filter
b_rt<-matrix(ncol=length(a_vec),nrow=ord)

for (k in 1:length(a_vec))
{
# true spectral density
  weight_func<-1/(abs(1-a_vec[k]*exp(1.i*omega_k))^2*2*pi)
# Estimate filter coefficients
  dfa_ar1<-dfa_analytic(L,lambda,weight_func,Lag,Gamma,eta,cutoff,i1,i2)
  b_rt[,k]<-dfa_ar1$b
}
benchmark<-cbind(b_rt,gamma_mba_rt)
dimnames(benchmark)[[2]]<-c(paste("MBA ",a_vec,sep=""),paste("DFA ",
                                        a_vec,sep=""))
dimnames(benchmark)[[1]]<-paste("lag ",0:(L-1),sep="")


###################################################
### code chunk number 178: Replication.Rnw:141-142
###################################################
head(benchmark)


###################################################
### code chunk number 179: Replication.Rnw:176-196
###################################################
# Specify the processes: ar(1) with coefficients -0.9,0.1 and 0.9
a_vec<-c(0.9,0.1,-0.9)
# Specify the lambdas
lambda_vec<-c(0,30,0,100)
# Specify the fixed eta
eta_vec<-c(0,1,1,0)
# Length of model-based filters
L<-24
# Length of estimation sample (not used yet since we rely on the true model) 
len<-120
# Denseness frequency-grid
M<-len/2
# cutoff
cutoff<-pi/12
# Nowcast
Lag<-0
# No filter constraints
i1<-i2<-F
# Use model-based spectrum
mba<-T


###################################################
### code chunk number 180: Replication.Rnw:199-199
###################################################



###################################################
### code chunk number 181: Replication.Rnw:201-209
###################################################
# Unscaled ATS-components: see below for an activation of this option
scaled_ATS<-F
# Length of symmetric filter (will be used later)
L_sym<-120
# Length of long data (for computing the target)
len1<-3000
# Difference data
dif<-F


###################################################
### code chunk number 182: Replication.Rnw:211-216
###################################################
# Use true spectral density
estim_MBA<-F
anzsim<-100
for_sim_obj<-for_sim_out(a_vec,len1,len,cutoff,L,mba,estim_MBA,L_sym,
                Lag,i1,i2,scaled_ATS,lambda_vec,eta_vec,anzsim,M,dif)


###################################################
### code chunk number 183: Replication.Rnw:221-237
###################################################
# Extract sample performances
# 1 ATS
ats_sym<-for_sim_obj$ats_sym
# 2 Curvature, Peak Correlation, ...
amp_shift_mat_sim<-for_sim_obj$amp_shift_mat_sim
# 3. Amplitude and time-shifts
amp_sim_per<-for_sim_obj$amp_sim_per
shift_sim_per<-for_sim_obj$shift_sim_per
# 4. Output series
xff_sim<-for_sim_obj$xff_sim
# 5. Peak correlation and Curvature
amp_shift_mat_sim<-for_sim_obj$amp_shift_mat_sim
# 6. Symmetric target
xff_sim_sym<-for_sim_obj$xff_sim_sym
Gamma<-for_sim_obj$Gamma
dim_names<-for_sim_obj$dim_names


###################################################
### code chunk number 184: Replication.Rnw:239-306
###################################################
# Plots
for (ki in 1:length(a_vec))   #ki<-1
{
  amp<-amp_sim_per[,,ki,1]
  colo<-rainbow(dim(amp)[2]-1)
  shift<-shift_sim_per[,,ki,1]
  xf<-xff_sim[,,ki,anzsim]#dim(xff_sim)
  xf_sym<-xff_sim_sym[,1,ki,1]
  dimname<-dimnames(amp_shift_mat_sim[,,,1])[[1]]
  omega_Gamma<-as.integer(cutoff*(len/2)/pi)
  maxamp<-max(amp[,1])
  for (i in 2:dim(amp)[2])
  {
    maxamp<-max(maxamp,max(mean(amp[1:(2*omega_Gamma),1])*amp[,i]/mean(amp[1:(2*omega_Gamma),i])))
  }

# Amplitude and shifts
  file = paste("z_replication_amp_shift_dfa_",ki,".pdf", sep = "")
  pdf(file = paste(path.out,file,sep=""), paper = "special", width = 6, height = 6)

  par(mfrow=c(1,2))
  plot(Gamma,type="l",axes=F,col="black",ylim=c(0,max(1.05,maxamp)),ylab="",xlab="",main=paste("Amplitude: a1=",a_vec[ki],sep=""))
  mtext("Target", side = 3, line = -1,at=K/2,col="black")
  for (i in 2:dim(amp)[2])
  {
    lines(amp[,i],lty=1,col=colo[i-1])
    mtext(dimname[i], side = 3,
    line = -i,at=len/4,col=colo[i-1])
  }
  axis(1,at=1+0:6*(len/2)/6,labels=c("0","pi/6","2pi/6","3pi/6","4pi/6","5pi/6","pi"))
  axis(2)
  box()
  plot(rep(0,length(Gamma)),type="l",axes=F,col="black",ylim=c(min(shift),max(na.exclude(shift))),
  ylab="",xlab="",main=paste("Shift: a1=",a_vec[ki],sep=""))
  mtext("Target", side = 3, line = -1,at=K/2,col="black")
  for (i in 2:dim(amp)[2])
  {
    lines(shift[,i],lty=1,col=colo[i-1])
    mtext(dimname[i], side = 3,
    line = -i,at=len/4,col=colo[i-1])
  }
  axis(1,at=1+0:6*(len/2)/6,labels=c("0","pi/6","2pi/6","3pi/6","4pi/6","5pi/6","pi"))
  axis(2)
  box()
  invisible(dev.off())
  file = paste("z_replication_output_dfa_",ki,".pdf", sep = "")
  pdf(file = paste(path.out,file,sep=""), paper = "special", width = 6, height = 6)
  # Select out-of-sample period
#  par(mfrow=c(2,1))
  anf<-3*len
  enf<-5*len
  sel<-1:dim(amp)[2]
  mplot<-scale(cbind(xf_sym,xf)[anf:enf,])
  plot(as.ts(mplot[,3]),type="l",axes=F,col="red",ylim=c(min(na.exclude(mplot)),
  max(na.exclude(mplot))),ylab="",xlab="",
  main=paste("MSE (red) vs. balanced (green): a1=",a_vec[ki],sep=""),lwd=1)
  mtext("MSE", side = 3, line = -1,at=(enf-anf)/2,col=colo[1])
  i<-4
  lines(as.ts(mplot[,i]),col=colo[i-2],lwd=1)
  mtext(dimname[i-1], side = 3, line = -2,at=(enf-anf)/2,col=colo[i-2])
  axis(1,at=c(1,rep(0,6))+as.integer((0:6)*(enf-anf)/6),
  labels=c(1,rep(0,6))+as.integer((0:6)*(enf-anf)/6))
  axis(2)
  box()
  invisible(dev.off())

}


###################################################
### code chunk number 185: z_replication_amp_shift_dfa_2.pdf
###################################################
  file = paste("z_replication_amp_shift_dfa_2", sep = "")
  cat("\\begin{figure}[H]")
  cat("\\begin{center}")
  cat("\\includegraphics[height=4in, width=6in]{", file, "}\n",sep = "")
  cat("\\caption{Amplitude (left) and time-shift functions (right) of classic MSE model-based filter (red) vs. balanced model-based (green), smooth model-based (cyan) and fast model-based (violet);  a1=0.1", sep = "")
  cat("\\label{z_replication_amp_shift_dfa_2}}", sep = "")
  cat("\\end{center}")
  cat("\\end{figure}")


###################################################
### code chunk number 186: z_replication_ats_dfa_2
###################################################
library(Hmisc)
require(xtable)
#latex(cor_vec, dec = 1, , caption = "Example of using latex to create table",
#center = "centering", file = "", floating = FALSE)
xtable(ats_sym[-2,,2,1], dec = 1,digits=6, caption = paste("ATS-Components: classic model-based vs. customized model-based ",sep=""),label=paste("z_replication_ats_dfa_2",sep=""),
center = "centering", file = "", floating = FALSE)


###################################################
### code chunk number 187: Replication.Rnw:329-348
###################################################
# Boxplots performance measureslength

#colo<-rainbow(dim(amp)[2]-1)

# A distinction of in-sample and out-of-sample performances is irrelevant since we assume knowledge of the true DGP 
Perf_meas_sel<-c(7,8,9)
for (DGP in 1:length(a_vec))        #DGP<-2
{
  file = paste("z_replication_curv_peak_dfa_",DGP,".pdf", sep = "")
  pdf(file = paste(path.out,file,sep=""), paper = "special", width = 6, height = 6)
  par(mfrow=c(1,3))
  for (Perf_meas in Perf_meas_sel)
  {
    boxplot(list(amp_shift_mat_sim[1,Perf_meas,DGP,],amp_shift_mat_sim[3,Perf_meas,DGP,],amp_shift_mat_sim[4,Perf_meas,DGP,],amp_shift_mat_sim[5,Perf_meas,DGP,]),outline=T,
    names=c("MSE (0,0)",paste("(",lambda_vec[2:length(lambda_vec)],",",eta_vec[2:length(eta_vec)],")",sep="")),
    main=paste(dim_names[[2]][Perf_meas],", a1=",a_vec[DGP],sep=""),cex.axis=0.8,col=colo)
  }
  invisible(dev.off())
}


###################################################
### code chunk number 188: z_replication_curv_peak_dfa_2.pdf
###################################################
  file = paste("z_replication_curv_peak_dfa_2", sep = "")
  cat("\\begin{figure}[H]")
  cat("\\begin{center}")
  cat("\\includegraphics[height=4in, width=6in]{", file, "}\n",sep = "")
  cat("\\caption{Curvature (left), Peak Correlation (middle) and MSE distributions (right) of classic MSE model-based filter (red) vs. balanced model-based (green), smooth model-based (cyan) and fast model-based (violet);  a1=0.1", sep = "")
  cat("\\label{z_replication_curv_peak_dfa_2}}", sep = "")
  cat("\\end{center}")
  cat("\\end{figure}")


###################################################
### code chunk number 189: z_replication_output_dfa_2.pdf
###################################################
  file = paste("z_replication_output_dfa_2", sep = "")
  cat("\\begin{figure}[H]")
  cat("\\begin{center}")
  cat("\\includegraphics[height=4in, width=6in]{", file, "}\n",sep = "")
  cat("\\caption{Filter-outputs: classic MSE model-based filter (red) vs. balanced customized model-based (green);  a1=0.1", sep = "")
  cat("\\label{z_replication_output_dfa_2}}", sep = "")
  cat("\\end{center}")
  cat("\\end{figure}")


###################################################
### code chunk number 190: Replication.Rnw:394-399
###################################################
# Estimate the AR(1) coefficient
estim_MBA<-T
anzsim<-100
for_sim_obj<-for_sim_out(a_vec,len1,len,cutoff,L,mba,estim_MBA,L_sym,
              Lag,i1,i2,scaled_ATS,lambda_vec,eta_vec,anzsim,M,dif)


###################################################
### code chunk number 191: Replication.Rnw:403-419
###################################################
# Extract sample performances
# 1 ATS
ats_sym<-for_sim_obj$ats_sym
# 2 Curvature, Peak Correlation, ...
amp_shift_mat_sim<-for_sim_obj$amp_shift_mat_sim
# 3. Amplitude and time-shifts
amp_sim_per<-for_sim_obj$amp_sim_per
shift_sim_per<-for_sim_obj$shift_sim_per
# 4. Output series
xff_sim<-for_sim_obj$xff_sim
# 5. Peak correlation and Curvature
amp_shift_mat_sim<-for_sim_obj$amp_shift_mat_sim
# 6. Symmetric target
xff_sim_sym<-for_sim_obj$xff_sim_sym
Gamma<-for_sim_obj$Gamma
dim_names<-for_sim_obj$dim_names


###################################################
### code chunk number 192: Replication.Rnw:421-439
###################################################
# Boxplots performance measures
#colo<-rainbow(dim(amp)[2]-1)

# A distinction of in-sample and out-of-sample performances is irrelevant since we assume knowledge of the true DGP 
Perf_meas_sel<-c(3,4,7,8)
for (DGP in 1:length(a_vec))        #DGP<-2
{
  file = paste("z_replication_curv_peak_dfa_",DGP,"_emp.pdf", sep = "")
  pdf(file = paste(path.out,file,sep=""), paper = "special", width = 6, height = 6)
  par(mfrow=c(2,2))
  for (Perf_meas in Perf_meas_sel)
  {
    boxplot(list(amp_shift_mat_sim[1,Perf_meas,DGP,],amp_shift_mat_sim[3,Perf_meas,DGP,],amp_shift_mat_sim[4,Perf_meas,DGP,],amp_shift_mat_sim[5,Perf_meas,DGP,]),outline=T,
    names=c("MSE (0,0)",paste("(",lambda_vec[2:length(lambda_vec)],",",eta_vec[2:length(eta_vec)],")",sep="")),
    main=paste(dim_names[[2]][Perf_meas],", a1=",a_vec[DGP],sep=""),cex.axis=0.8,col=colo)
  }
  invisible(dev.off())
}


###################################################
### code chunk number 193: z_replication_curv_peak_dfa_2_emp.pdf
###################################################
  file = paste("z_replication_curv_peak_dfa_2_emp", sep = "")
  cat("\\begin{figure}[H]")
  cat("\\begin{center}")
  cat("\\includegraphics[height=6in, width=6in]{", file, "}\n",sep = "")
  cat("\\caption{Curvature (left) and Peak Correlation (right) in-sample (top) and out-of-sample (bottom): classic MSE model-based filter (red) vs. balanced model-based (green), smooth model-based (cyan) and fast model-based (violet);  a1=0.1", sep = "")
  cat("\\label{z_replication_curv_peak_dfa_2_emp}}", sep = "")
  cat("\\end{center}")
  cat("\\end{figure}")


###################################################
### code chunk number 194: Replication.Rnw:452-470
###################################################
# Boxplots performance measures
#colo<-rainbow(dim(amp)[2]-1)

# A distinction of in-sample and out-of-sample performances is irrelevant since we assume knowledge of the true DGP 
Perf_meas_sel<-c(5,9)
for (DGP in 1:length(a_vec))        #DGP<-2
{
  file = paste("z_replication_curv_peak_dfa_",DGP,"_emp_mse.pdf", sep = "")
  pdf(file = paste(path.out,file,sep=""), paper = "special", width = 6, height = 6)
  par(mfrow=c(1,2))
  for (Perf_meas in Perf_meas_sel)
  {
    boxplot(list(amp_shift_mat_sim[1,Perf_meas,DGP,],amp_shift_mat_sim[3,Perf_meas,DGP,],amp_shift_mat_sim[4,Perf_meas,DGP,],amp_shift_mat_sim[5,Perf_meas,DGP,]),outline=T,
    names=c("MSE (0,0)",paste("(",lambda_vec[2:length(lambda_vec)],",",eta_vec[2:length(eta_vec)],")",sep="")),
    main=paste(dim_names[[2]][Perf_meas],", a1=",a_vec[DGP],sep=""),cex.axis=0.8,col=colo)
  }
  invisible(dev.off())
}


###################################################
### code chunk number 195: z_replication_curv_peak_dfa_2_emp_mse.pdf
###################################################
  file = paste("z_replication_curv_peak_dfa_2_emp_mse", sep = "")
  cat("\\begin{figure}[H]")
  cat("\\begin{center}")
  cat("\\includegraphics[height=4in, width=6in]{", file, "}\n",sep = "")
  cat("\\caption{MSE in-sample and out-of-sample: classic MSE model-based filter (red) vs. balanced model-based (green), smooth model-based (cyan) and fast model-based (violet);  a1=0.1", sep = "")
  cat("\\label{z_replication_curv_peak_dfa_2_emp_mse}}", sep = "")
  cat("\\end{center}")
  cat("\\end{figure}")


###################################################
### code chunk number 196: Replication.Rnw:503-538
###################################################
# Post WWII data
start_year<-1947 
start_date=paste(start_year,"-01-01",sep="")
# Last data point
end_date<-format(Sys.time(), "%Y-%m-%d")
end_year<-as.double(substr(end_date,1,4))
# Load Real GDP
#Title:               Real Gross Domestic Product, 3 Decimal
#Series ID:           GDPC96
#Source:              US. Bureau of Economic Analysis
#Release:             Gross Domestic Product
#Seasonal Adjustment: Seasonally Adjusted Annual Rate
#Frequency:           Quarterly
#Units:               Billions of Chained 2009 Dollars
#Date Range:          1947-01-01 to 2014-07-01
#Last Updated:        2014-11-25 7:56 AM CST
#Notes:               A Guide to the National Income and 
#                     Product Accounts of the United States 
#                     (NIPA) - 
#   (http://www.bea.gov/national/pdf/nipaguid.pdf)
if (load_from_quandl)
{
  mydata<-Quandl(c("FRED/GDPC96"),start_date=start_date,
               end_date=end_date,type="xts")
  save(mydata,file=paste(path.dat,"US_GDP.Rdata",sep=""))
} else
{
# Data is included in MDFA-package  
#  load(file=paste(path.dat,"US_GDP.Rdata",sep=""))
}
tail(mydata)
lgdp <- ts(100*log(mydata),start=start_year,frequency=4)
nobs <- length(lgdp)
# Annualized sharpe of GDP series
sharpe_GDP<-sqrt(4)*mean(diff(lgdp))/sqrt(var(diff(lgdp)))


###################################################
### code chunk number 197: Replication.Rnw:540-547
###################################################
file = paste("z_us_real_log_gdp.pdf", sep = "")
pdf(file = paste(path.out,file,sep=""), paper = "special", width = 6, height = 6)
plot(lgdp,ylim=c(min(lgdp),max(lgdp)),xlim=c(start_year,end_year),plot.type='s',
     col="black",ylab="",main="Log Real US GDP ")
nberShade()
lines(lgdp,col="black")
invisible(dev.off())


###################################################
### code chunk number 198: z_us_real_log_gdp.pdf
###################################################
  file = paste("z_us_real_log_gdp", sep = "")
  cat("\\begin{figure}[H]")
  cat("\\begin{center}")
  cat("\\includegraphics[height=4in, width=6in]{", file, "}\n",sep = "")
  cat("\\caption{Log US Real GDP", sep = "")
  cat("\\label{z_us_real_log_gdp}}", sep = "")
  cat("\\end{center}")
  cat("\\end{figure}")


###################################################
### code chunk number 199: Replication.Rnw:591-592
###################################################
library(dlm)


###################################################
### code chunk number 200: Replication.Rnw:609-619
###################################################
# Post WWII data
start_year<-1947 
start_date=paste(start_year,"-01-01",sep="")
# Data up to Feb-1998 as 
end_date<-"1998-02-01"
end_year<-as.double(substr(end_date,1,4))
# Select data prior to end_year
data_sample<-mydata[paste("/",end_date,sep="")]
lgdp <- ts(100*log(data_sample),start=start_year,frequency=4)
nobs <- length(lgdp)


###################################################
### code chunk number 201: Replication.Rnw:622-645
###################################################
# We specify the model: sigma_{w,22} is vanishing and sigma_v=sqrt(1e-7) 
#   is nearly vanishing (slightly positive is needed for numerical 
#   stability because otherwise 
#   quotients can vanish in the Kalman-Filter).
# Note also that all variances are parametrized as positive 
#   constants (squares).
# This parametrization replicates the model in MNZ (2003).
ssm2 <- function(parm){
  dlm <- dlmModPoly(2,dV=1e-7,dW=c(parm[4]^2,0)) + 
    dlmModARMA(ar=c(parm[1],parm[2]), ma=NULL, sigma2=parm[3]^2)
	# get distribution variance of initial state
	tmp0 <- matrix(c(parm[1],parm[2],1,0),nr=2)
	tmp1 <- matrix(c(parm[3]^2,0,0,0),nc=1)
	tmp <- solve(diag(4)-tmp0%x%tmp0)%*%tmp1
	dlm$C0[3:4,3:4] <- matrix(tmp,nr=2)
	return( dlm )
}

# Estimate parameters: we use the estimates in 
#   Morley, Nelson and Zivot (2003) 
# for initialization
fit2_98 <- dlmMLE(y=lgdp,parm=c(1.5303,-.6097,.6199,.6893),build=ssm2,
                  hessian=T)


###################################################
### code chunk number 202: Replication.Rnw:647-653
###################################################
# get estimates for ARMA(2,0) part
coef_i1 <- fit2_98$par
var <- solve(fit2_98$hessian)
mat_coef<-rbind(c(NA,1.5303,-.6097,.6199,.6893),c(fit2_98$value,fit2_98$par),c(NA,sqrt(diag(var))))
dimnames(mat_coef)[[1]]<-c("Initial values (MNZ 2003)","Final estimates","Standard errors")
dimnames(mat_coef)[[2]]<-c("Criterion Value","AR(1)","AR(2)","Sigma_w1","Sigma_w2")


###################################################
### code chunk number 203: z_ss_uc0_t
###################################################
library(Hmisc)
require(xtable)
#latex(cor_vec, dec = 1, , caption = "Example of using latex to create table",
#center = "centering", file = "", floating = FALSE)
xtable(mat_coef, dec = 1,digits=2, caption = paste("Estimates with standard errors: data from 1947 to 1997",sep=""),label=paste("z_ss_uc0_t",sep=""),
center = "centering", file = "", floating = FALSE)


###################################################
### code chunk number 204: Replication.Rnw:665-667
###################################################
Arg(polyroot(c(1,-1.5303,.6097)))
Arg(polyroot(c(1,-fit2_98$par[1:2])))


###################################################
### code chunk number 205: Replication.Rnw:671-693
###################################################
mod2_98 <- ssm2(fit2_98$par)
mod2f_98 <- dlmFilter(lgdp,mod2_98)

# filtered values
xtfilt_98 <- ts(mod2f_98$m[-1,1],start=1947,frequency=4)
ctfilt_98 <- ts(mod2f_98$m[-1,3],start=1947,frequency=4)

# plot fitered state (trend and cycle)
file = paste("z_us_real_log_gdp_comp.pdf", sep = "")
pdf(file = paste(path.out,file,sep=""), paper = "special", width = 6, height = 6)
par(mfrow=c(2,1))
plot(cbind(lgdp,xtfilt_98),ylab="",ylim=c(740,960),xlim=c(start_year,end_year),plot.type="s",col=c("black","blue"),main="Log Real US GDP and Trend")
nberShade()
lines(lgdp)
lines(xtfilt_98,col="blue")
mtext("GDP", side = 3, line = -1,at=mean(c(start_year,end_year)),col="black")
mtext("Cycle-adjusted Component", side = 3, line = -2,at=mean(c(start_year,end_year)),col="blue")
plot(ctfilt_98,ylim=c(min(ctfilt_98),max(ctfilt_98)),ylab="",xlim=c(start_year,end_year),col="blue",main="Cycle")
nberShade()
lines(ctfilt_98,col="blue")
abline(h=0)
invisible(dev.off())


###################################################
### code chunk number 206: z_us_real_log_gdp_comp.pdf
###################################################
  file = paste("z_us_real_log_gdp_comp", sep = "")
  cat("\\begin{figure}[H]")
  cat("\\begin{center}")
  cat("\\includegraphics[height=6in, width=6in]{", file, "}\n",sep = "")
  cat("\\caption{US Real GDP: Trend (top) and cycle (bottom): data ends in Feb-1998", sep = "")
  cat("\\label{z_us_real_log_gdp_comp}}", sep = "")
  cat("\\end{center}")
  cat("\\end{figure}")


###################################################
### code chunk number 207: Replication.Rnw:722-724
###################################################
# Data up to 2008
end_date<-"2007-12-31"


###################################################
### code chunk number 208: Replication.Rnw:726-732
###################################################
start_year<-1947 
start_date=paste(start_year,"-01-01",sep="")
end_year<-as.double(substr(end_date,1,4))
# Select data prior to end_year
data_sample<-mydata[paste("/",end_date,sep="")]
lgdp_07 <- ts(100*log(data_sample),start=start_year,frequency=4)


###################################################
### code chunk number 209: Replication.Rnw:734-736
###################################################
# Data up to Dec 2014
end_date<-"2014-11-30"


###################################################
### code chunk number 210: Replication.Rnw:738-744
###################################################
start_year<-1947 
start_date=paste(start_year,"-01-01",sep="")
end_year<-as.double(substr(end_date,1,4))
# Select data prior to end_year
data_sample<-mydata[paste("/",end_date,sep="")]
lgdp_14 <- ts(100*log(data_sample),start=start_year,frequency=4)


###################################################
### code chunk number 211: Replication.Rnw:747-760
###################################################
# We specify the model: sigma_{w,33} is vanishing and sigma_v=sqrt(1e-7) is nearly vanishing 
# (slightly positive is needed for numerical stability because otherwise quotients can vanish in Kalman-Filter)
# Note also that all variances are parametrized as positive constants (squares)
ssm2 <- function(parm){
  dlm <- dlmModPoly(2,dV=1e-7,dW=c(parm[4]^2,0)) + 
  	dlmModARMA(ar=c(parm[1],parm[2]), ma=NULL, sigma2=parm[3]^2)
	# get distribution variance of initial state
	tmp0 <- matrix(c(parm[1],parm[2],1,0),nr=2)
	tmp1 <- matrix(c(parm[3]^2,0,0,0),nc=1)
	tmp <- solve(diag(4)-tmp0%x%tmp0)%*%tmp1
	dlm$C0[3:4,3:4] <- matrix(tmp,nr=2)
	return( dlm )
}


###################################################
### code chunk number 212: Replication.Rnw:762-764
###################################################
fit2_07 <- dlmMLE(y=lgdp_07,parm=c(1.5303,-.6097,sqrt(.6199),
                            sqrt(.6893)),build=ssm2,hessian=T)


###################################################
### code chunk number 213: Replication.Rnw:766-768
###################################################
fit2_14 <- dlmMLE(y=lgdp_14,parm=c(1.5303,-.6097,sqrt(.6199),
                            sqrt(.6893)),build=ssm2,hessian=T)


###################################################
### code chunk number 214: Replication.Rnw:771-777
###################################################
# get estimates for ARMA(2,0) part
mat_coef<-rbind(c(fit2_98$value,fit2_98$par,abs(2*pi/Arg(polyroot(c(1,-fit2_98$par[1:2]))))[1]/4),c(fit2_07$value,fit2_07$par,abs(2*pi/Arg(polyroot(c(1,-fit2_07$par[1:2]))))[1]/4),c(fit2_14$value,fit2_14$par,abs(2*pi/Arg(polyroot(c(1,-fit2_14$par[1:2]))))[1]/4))
dimnames(mat_coef)[[1]]<-c("1947-1998","1947-2007","1947-2014")
dimnames(mat_coef)[[2]]<-c("Criterion Value","AR(1)","AR(2)","Sigma_w1","Sigma_w2","`Implied' length (years)")
mat_coef[mat_coef>4.e+9]<-Inf
mat_coef<-round(mat_coef,2)


###################################################
### code chunk number 215: z_ss_uc0_t_gr
###################################################
library(Hmisc)
require(xtable)
#latex(cor_vec, dec = 1, , caption = "Example of using latex to create table",
#center = "centering", file = "", floating = FALSE)
xtable(mat_coef, dec = 1,digits=2, caption = paste("Estimates for three different time spans: 1947-1998, 1947-2007, 1947-2014",sep=""),label=paste("z_ss_uc0_t_gr",sep=""),
center = "centering", file = "", floating = FALSE)


###################################################
### code chunk number 216: Replication.Rnw:790-824
###################################################
mod2_07 <- ssm2(fit2_07$par)
mod2f_07 <- dlmFilter(lgdp_07,mod2_07)
mod2_14 <- ssm2(fit2_14$par)
mod2f_14 <- dlmFilter(lgdp_14,mod2_14)

# filtered values
xtfilt_07 <- ts(mod2f_07$m[-1,1],start=1947,frequency=4)
ctfilt_07 <- ts(mod2f_07$m[-1,3],start=1947,frequency=4)
xtfilt_14 <- ts(mod2f_14$m[-1,1],start=1947,frequency=4)
ctfilt_14 <- ts(mod2f_14$m[-1,3],start=1947,frequency=4)

# plot fitered state (trend and cycle)
file = paste("z_us_real_log_gdp_comp_wgr.pdf", sep = "")
pdf(file = paste(path.out,file,sep=""), paper = "special", width = 6, height = 6)
par(mfrow=c(2,1))
plot(ctfilt_98,ylim=c(min(ctfilt_98),max(ctfilt_98)),xlim=c(start_year,end_year),col="blue",main="Cycle (restricted y-scale)",ylab="")
nberShade()
lines(ctfilt_07,col="red")
lines(ctfilt_98,col="blue")
lines(ctfilt_14,col="green")
mtext("1947-1998", side = 3, line = -1,at=(start_year+end_year)/2,col="blue")
mtext("1947-2007", side = 3, line = -2,at=(start_year+end_year)/2,col="red")
mtext("1947-2014", side = 3, line = -3,at=(start_year+end_year)/2,col="green")
abline(h=0)
plot(ctfilt_98,ylim=c(min(ctfilt_14),max(ctfilt_14)),xlim=c(start_year,end_year),col="blue",main="Cycle (full y-scale)",ylab="")
nberShade()
lines(ctfilt_07,col="red")
lines(ctfilt_98,col="blue")
lines(ctfilt_14,col="green")
mtext("1947-1998", side = 3, line = -1,at=(start_year+end_year)/2,col="blue")
mtext("1947-2007", side = 3, line = -2,at=(start_year+end_year)/2,col="red")
mtext("1947-2014", side = 3, line = -3,at=(start_year+end_year)/2,col="green")
abline(h=0)
invisible(dev.off())


###################################################
### code chunk number 217: z_us_real_log_gdp_comp_wgr.pdf
###################################################
  file = paste("z_us_real_log_gdp_comp_wgr", sep = "")
  cat("\\begin{figure}[H]")
  cat("\\begin{center}")
  cat("\\includegraphics[height=6in, width=6in]{", file, "}\n",sep = "")
  cat("\\caption{Cycles: data up to Feb-1998 (blue), Dec-2007 (red), Dec-2014 (green): restricted scale (top) vs. full scale (bottom)", sep = "")
  cat("\\label{z_us_real_log_gdp_comp_wgr}}", sep = "")
  cat("\\end{center}")
  cat("\\end{figure}")


###################################################
### code chunk number 218: Replication.Rnw:860-865
###################################################
K<-1000
omega_k<-pi*(0:K)/K
trffkt_ar2_MNZ<-1/abs(1-1.5303*exp(1.i*omega_k)+0.6097*exp(1.i*2*omega_k))^2
trffkt_ar2_98<-1/abs(1-fit2_98$par[1]*exp(1.i*omega_k)-fit2_98$par[2]*
                       exp(1.i*2*omega_k))^2


###################################################
### code chunk number 219: Replication.Rnw:867-881
###################################################
file = paste("z_effective_length.pdf", sep = "")
pdf(file = paste(path.out,file,sep=""), paper = "special", width = 6, height = 6)

mplot<-log(cbind(trffkt_ar2_MNZ,trffkt_ar2_98))
mplot[1,1:2]<-NA
dimnames(mplot)[[2]]<-c("MNZ (2003)","I(1)-Model: data up to 1998")
ax<-rep(NA,nrow(mplot))
ax[1+(0:6)*((nrow(mplot)-1)/6)]<-c(0,"pi/6","2pi/6","3pi/6","4pi/6","5pi/6","pi")
plot_title<-"(Log-transformed) Amplitude functions of cycles"
insamp<-1.e+90
title_more<-dimnames(mplot)[[2]]
colo<-c("blue","red")
mplot_func(mplot, ax, plot_title, title_more, insamp, colo)
invisible(dev.off())


###################################################
### code chunk number 220: z_effective_length.pdf
###################################################
  file = paste("z_effective_length", sep = "")
  cat("\\begin{figure}[H]")
  cat("\\begin{center}")
  cat("\\includegraphics[height=4in, width=6in]{", file, "}\n",sep = "")
  cat("\\caption{(Log-transformed) Amplitude functions of AR(2)-cycles with `implied' cycle-lengths of 8 (blue) and 13  (red) years", sep = "")
  cat("\\label{z_effective_length}}", sep = "")
  cat("\\end{center}")
  cat("\\end{figure}")


###################################################
### code chunk number 221: Replication.Rnw:915-917
###################################################
# Data up to great recession
end_date<-"2007-12-31"


###################################################
### code chunk number 222: Replication.Rnw:919-927
###################################################
start_year<-1947
end_year<-as.double(substr(end_date,1,4))
start_date=paste(start_year,'-01-01',sep="")

# Select data prior to end_year
data_sample<-mydata[paste("/",end_date,sep="")]
lgdp <- ts(100*log(data_sample),start=start_year,frequency=4)
nobs <- length(lgdp)


###################################################
### code chunk number 223: Replication.Rnw:930-931
###################################################
source(file=paste(path.pgm,"state_space_trend_cycle_gdp.r",sep=""))


###################################################
### code chunk number 224: Replication.Rnw:933-949
###################################################
ss_obj_i2<-ss_model_i2(lgdp)
mat_est_i2<-ss_obj_i2$mat_est
mat_parm_i2<-ss_obj_i2$mat_parm
# Large numbers are identified with \infty
mat_est_i2[mat_est_i2>4.e+9]<-Inf
# Take absolute values of standarddeviations
mat_est_i2[,6:8]<-abs(mat_est_i2[,6:8])
# Rounding
mat_est_i2<-round(mat_est_i2,3)
# Reorder models
mat_est_i2_simple<-mat_est_i2[c(3,4,1,2),c(-2,-3,-4)]
# Insert column for AIC
mat_est_i2_simple_aic<-cbind(mat_est_i2_simple[,1],mat_est_i2_simple[,1]+c(2*5,2*4,2*4,2*3),mat_est_i2_simple[,2:ncol(mat_est_i2_simple)])
# relabel columns
dimnames(mat_est_i2_simple_aic)[[2]][1:2]<-c("Neg.log-lik","AIC")
dimnames(mat_est_i2_simple_aic)[[2]][4:6]<-c("s_33","s_11","s_22")


###################################################
### code chunk number 225: z_ss_uc0_t_gr_i2
###################################################
library(Hmisc)
require(xtable)
#latex(cor_vec, dec = 1, , caption = "Example of using latex to create table",
#center = "centering", file = "", floating = FALSE)
xtable(mat_est_i2_simple_aic, dec = 1,digits=2, caption = paste("Estimates of I(2)-models: data from 1947 to the onset of the great recession (Dec-2007)",sep=""),label=paste("z_ss_uc0_t_gr_i2",sep=""),
center = "centering", file = "", floating = FALSE)


###################################################
### code chunk number 226: Replication.Rnw:964-977
###################################################
# Reorder models
mat_parm_i2_reordered<-mat_parm_i2[c(3,4,1,2),]
file = paste("z_us_real_log_gdp_comp_i2.pdf", sep = "")
pdf(file = paste(path.out,file,sep=""), paper = "special", width = 6, height = 6)
ctfilt_list<-vector(mode="list")
par(mfrow=c(2,2))
for (i in 1:nrow(mat_parm_i2))
{
  plot_which<-c(F,T)
  title_main<-dimnames(mat_parm_i2_reordered)[[1]][i]
  ctfilt_list[[i]]<-plot_ss_i2(mat_parm_i2_reordered[i,],lgdp,start_year,plot_which,title_main)$ctfilt
}
invisible(dev.off())


###################################################
### code chunk number 227: z_us_real_log_gdp_comp.pdf
###################################################
  file = paste("z_us_real_log_gdp_comp_i2", sep = "")
  cat("\\begin{figure}[H]")
  cat("\\begin{center}")
  cat("\\includegraphics[height=6in, width=6in]{", file, "}\n",sep = "")
  cat("\\caption{Cycles and drifts of I(2)-models", sep = "")
  cat("\\label{z_us_real_log_gdp_comp_i2}}", sep = "")
  cat("\\end{center}")
  cat("\\end{figure}")


###################################################
### code chunk number 228: Replication.Rnw:1013-1017
###################################################
drift<-mod2f_07$m[nrow(mod2f_07$m),2]
trend<-ts(drift*(1:length(lgdp_07)),start=start_year,frequency=4)
detrended<-lgdp_07-trend
detrended<-detrended-mean(detrended)


###################################################
### code chunk number 229: Replication.Rnw:1019-1029
###################################################
file = paste("z_us_real_log_gdp_detrended.pdf", sep = "")
pdf(file = paste(path.out,file,sep=""), paper = "special", width = 6, height = 6)
par(mfrow=c(2,1))
plot(lgdp_07,ylim=c(min(lgdp_07),max(lgdp_07)),xlim=c(start_year,end_year),col="blue",main="Log Real US GDP",ylab="")
nberShade()
lines(lgdp_07)
plot(detrended,ylim=c(min(detrended),max(detrended)),xlim=c(start_year,end_year),col="blue",main="Detrended Log Real US GDP",ylab="")
nberShade()
lines(detrended,col="blue")
invisible(dev.off())


###################################################
### code chunk number 230: z_us_real_log_gdp_detrended.pdf
###################################################
  file = paste("z_us_real_log_gdp_detrended", sep = "")
  cat("\\begin{figure}[H]")
  cat("\\begin{center}")
  cat("\\includegraphics[height=6in, width=6in]{", file, "}\n",sep = "")
  cat("\\caption{GDP (top) and trend-adjusted GDP (bottom)", sep = "")
  cat("\\label{z_us_real_log_gdp_detrended}}", sep = "")
  cat("\\end{center}")
  cat("\\end{figure}")


###################################################
### code chunk number 231: Replication.Rnw:1062-1067
###################################################
K<-1000
omega_k<-pi*(0:K)/K
trffkt_trend<-(fit2_07$par[4])^2/abs(1-exp(1.i*omega_k))^2
trffkt_cycle<-(fit2_07$par[3])^2/abs(1-fit2_07$par[1]*exp(1.i*omega_k)-fit2_07$par[2]*exp(1.i*2*omega_k))^2
trffkt_GDP<-trffkt_trend+trffkt_cycle


###################################################
### code chunk number 232: Replication.Rnw:1069-1083
###################################################
file = paste("z_us_real_log_gdp_detrended_spect.pdf", sep = "")
pdf(file = paste(path.out,file,sep=""), paper = "special", width = 6, height = 6)

mplot<-log(cbind(trffkt_GDP,trffkt_trend,trffkt_cycle))
mplot[1,1:2]<-NA
dimnames(mplot)[[2]]<-c("DGP","Trend","Cycle")
ax<-rep(NA,nrow(mplot))
ax[1+(0:6)*((nrow(mplot)-1)/6)]<-c(0,"pi/6","2pi/6","3pi/6","4pi/6","5pi/6","pi")
plot_title<-"Log-(Pseudo) Spectral Densities"
insamp<-1.e+90
title_more<-dimnames(mplot)[[2]]
colo<-rainbow(ncol(mplot))
mplot_func(mplot, ax, plot_title, title_more, insamp, colo)
invisible(dev.off())


###################################################
### code chunk number 233: z_us_real_log_gdp_detrended_spect.pdf
###################################################
  file = paste("z_us_real_log_gdp_detrended_spect", sep = "")
  cat("\\begin{figure}[H]")
  cat("\\begin{center}")
  cat("\\includegraphics[height=4in, width=4in]{", file, "}\n",sep = "")
  cat("\\caption{Log (pseudo) spectral densities of DGP (red), trend (green) and cycle (blue) ", sep = "")
  cat("\\label{z_us_real_log_gdp_detrended_spect}}", sep = "")
  cat("\\end{center}")
  cat("\\end{figure}")


###################################################
### code chunk number 234: Replication.Rnw:1119-1139
###################################################
cutoff_len_upper<-4
cutoff_len_lower<-20
cutoff_upper<-pi/cutoff_len_upper
L<-100
# Spectrum: MDFA requires DFT i.e. square-root of density 
# The design is univariate i.e. input and output series are synchronized.
# Therefore we can rely on absolute values (no phase information 
#   is required).
weight_func<-cbind(sqrt(trffkt_GDP),sqrt(trffkt_GDP))
# Ignore singularity in frequency zero 
weight_func[1,]<-0
# Target
Gamma<-(0:K)<=as.integer(cutoff_upper*K/pi)+1
Gamma[1:(K/cutoff_len_lower+1)]<-0
# Restrictions: i1 constraint
i1<-T
i2<-F
weight_constraint<-Gamma[1]
# MSE-design
lambda<-eta<-0


###################################################
### code chunk number 235: Replication.Rnw:1141-1155
###################################################
# Additional configuration settings for MDFA
d<-0
lambda_cross<-lambda_smooth<-0
lambda_decay<-c(0,0)
lin_expweight<-F
shift_constraint<-rep(0,ncol(weight_func)-1)
grand_mean<-F
b0_H0<-NULL
c_eta<-F
weights_only<-F
weight_structure<-c(0,0)
white_noise<-F
synchronicity<-F
lag_mat<-matrix(rep(0:(L-1),ncol(weight_func)),nrow=L)  


###################################################
### code chunk number 236: Replication.Rnw:1158-1164
###################################################
# Estimate MDFA MSE filter coefficients  
mdfa_obj<-mdfa_analytic(L,lambda,weight_func,Lag,Gamma,eta,cutoff,
                  i1,i2,weight_constraint,lambda_cross,lambda_decay,
                  lambda_smooth,lin_eta,shift_constraint,grand_mean,
                  b0_H0,c_eta,weight_structure,
                  white_noise,synchronicity,lag_mat,troikaner)


###################################################
### code chunk number 237: Replication.Rnw:1167-1170
###################################################
# Estimate MDFA MSE filter coefficients  
mdfa_obj<-MDFA_mse_constraint(L,weight_func,Lag,Gamma,i1,i2,weight_constraint,
                              shift_constraint)$mdfa_obj


###################################################
### code chunk number 238: Replication.Rnw:1175-1198
###################################################
file = paste("z_us_real_log_gdp_detrended_amp_shift_bp.pdf", sep = "")
pdf(file = paste(path.out,file,sep=""), paper = "special", width = 6, height = 6)

mplot<-cbind(Gamma,abs(mdfa_obj$trffkt),Arg(mdfa_obj$trffkt)/omega_k)#head(mplot)
# Complete by shift in frequency zero: NA for the bandpass 
mplot[1,3]<-NA
dimnames(mplot)[[2]]<-c("Target","Estimate","Shift in passband")
ax<-rep(NA,nrow(mplot))
ax[1+(0:6)*((nrow(mplot)-1)/6)]<-c(0,"pi/6","2pi/6","3pi/6","4pi/6","5pi/6","pi")
par(mfrow=c(1,2))
plot_title<-"Amplitude"
insamp<-1.e+90
title_more<-dimnames(mplot)[[2]][1:2]
colo<-c("black","blue")
mplot_func(as.matrix(mplot[,1:2]), ax, plot_title, title_more, insamp, colo)
plot_title<-"Shift"
insamp<-1.e+90
title_more<-NULL
colo<-"blue"
# Restrict shift to passband (becomes -infty towards freq. 0)
mplot[!Gamma,3]<-NA
mplot_func(as.matrix(mplot[,3]), ax, plot_title, title_more, insamp, colo)
invisible(dev.off())


###################################################
### code chunk number 239: z_us_real_log_gdp_detrended_amp_shift_bp.pdf
###################################################
  file = paste("z_us_real_log_gdp_detrended_amp_shift_bp", sep = "")
  cat("\\begin{figure}[H]")
  cat("\\begin{center}")
  cat("\\includegraphics[height=4in, width=6in]{", file, "}\n",sep = "")
  cat("\\caption{Amplitude (left) and time-shift functions of real-time bandpass MSE-design, i1=T", sep = "")
  cat("\\label{z_us_real_log_gdp_detrended_amp_shift_bp}}", sep = "")
  cat("\\end{center}")
  cat("\\end{figure}")


###################################################
### code chunk number 240: Replication.Rnw:1213-1216
###################################################
xf_i1<-rep(NA,length(detrended))
for (i in L:length(detrended))  
  xf_i1[i]<-t(mdfa_obj$b)%*%(detrended[i:(i-L+1)]-mean(detrended))  


###################################################
### code chunk number 241: Replication.Rnw:1218-1243
###################################################
file = paste("z_us_real_log_gdp_detrended_filt_bp.pdf", sep = "")
pdf(file = paste(path.out,file,sep=""), paper = "special", width = 6, height = 6)
par(mfrow=c(2,1))
mplot<-cbind(detrended,xf_i1,ctfilt_list[[4]][,2],ctfilt_07)
dimnames(mplot)[[2]]<-c("Detrended US GDP","New bandpass","best I(2)-model","I(1)-model")
plot(mplot,ylim=c(min(mplot,na.rm=T),max(mplot,na.rm=T)),xlim=c(start_year,end_year),plot.type="s",col=c("black","blue"),main="Detrended Log Real US GDP and Cycle Estimates",ylab="")
nberShade()
lines(mplot[,2],col="blue")
lines(mplot[,1])
lines(mplot[,3],col="red")
lines(mplot[,4],col="green")
mtext("detrended GDP", side = 3, line = -1,at=mean(c(start_year,end_year)),col="black")
mtext("Bandpass MSE", side = 3, line = -2,at=mean(c(start_year,end_year)),col="blue")
mtext("Cycle best I(2)", side = 3, line = -3,at=mean(c(start_year,end_year)),col="red")
mtext("Cycle I(1)", side = 3, line = -4,at=mean(c(start_year,end_year)),col="green")
abline(h=0)
start_year<-1970
plot(mplot[,2:3],ylim=c(min(mplot[,2:3],na.rm=T),max(mplot[,2:3],na.rm=T)),xlim=c(start_year,end_year),plot.type="s",col=c("black","blue"),main="New bandpass MSE (blue) and best I(2) (red)",ylab="")
nberShade()
lines(mplot[,2],col="blue")
lines(mplot[,3],col="red")
mtext("Bandpass MSE", side = 3, line = -1,at=mean(c(start_year,end_year)),col="blue")
mtext("Cycle best I(2)", side = 3, line = -2,at=mean(c(start_year,end_year)),col="red")
abline(h=0)
invisible(dev.off())


###################################################
### code chunk number 242: z_us_real_log_gdp_detrended_filt_bp.pdf
###################################################
  file = paste("z_us_real_log_gdp_detrended_filt_bp", sep = "")
  cat("\\begin{figure}[H]")
  cat("\\begin{center}")
  cat("\\includegraphics[height=6in, width=6in]{", file, "}\n",sep = "")
  cat("\\caption{Detrended (log-real) US-GDP (black), new bandpass MSE (blue), best I(2)-model (red) and I(1)-model (green)   ", sep = "")
  cat("\\label{z_us_real_log_gdp_detrended_filt_bp}}", sep = "")
  cat("\\end{center}")
  cat("\\end{figure}")


###################################################
### code chunk number 243: Replication.Rnw:1281-1287
###################################################
K<-1000
omega_k<-pi*(0:K)/K
trffkt_i2_level<-(mat_parm_i2[nrow(mat_parm_i2),4])^2/abs(1-exp(1.i*omega_k))^2
trffkt_i2_drift<-(mat_parm_i2[nrow(mat_parm_i2),5])^2/abs(1-exp(1.i*omega_k))^4
trffkt_i2_cycle<-(mat_parm_i2[nrow(mat_parm_i2),3])^2/abs(1-mat_parm_i2[nrow(mat_parm_i2),1]*exp(1.i*omega_k)-mat_parm_i2[nrow(mat_parm_i2),2]*exp(1.i*2*omega_k))^2
trffkt_i2_GDP<-trffkt_trend+trffkt_cycle


###################################################
### code chunk number 244: Replication.Rnw:1289-1303
###################################################
file = paste("z_us_real_log_gdp_detrended_spect_i2.pdf", sep = "")
pdf(file = paste(path.out,file,sep=""), paper = "special", width = 6, height = 6)

mplot<-log(cbind(trffkt_i2_GDP,trffkt_i2_level,trffkt_i2_drift,trffkt_i2_cycle))
mplot[1,1:3]<-NA
dimnames(mplot)[[2]]<-c("DGP","Level","Drift","Cycle")
ax<-rep(NA,nrow(mplot))
ax[1+(0:6)*((nrow(mplot)-1)/6)]<-c(0,"pi/6","2pi/6","3pi/6","4pi/6","5pi/6","pi")
plot_title<-"Log-(Pseudo) Spectral Densities"
insamp<-1.e+90
title_more<-dimnames(mplot)[[2]]
colo<-rainbow(ncol(mplot))
mplot_func(mplot, ax, plot_title, title_more, insamp, colo)
invisible(dev.off())


###################################################
### code chunk number 245: z_us_real_log_gdp_detrended_spect_i2.pdf
###################################################
  file = paste("z_us_real_log_gdp_detrended_spect_i2", sep = "")
  cat("\\begin{figure}[H]")
  cat("\\begin{center}")
  cat("\\includegraphics[height=4in, width=6in]{", file, "}\n",sep = "")
  cat("\\caption{Log (pseudo) spectral densities of DGP (red), level (green), drift (cyan) and cycle (violet) ", sep = "")
  cat("\\label{z_us_real_log_gdp_detrended_spect_i2}}", sep = "")
  cat("\\end{center}")
  cat("\\end{figure}")


###################################################
### code chunk number 246: Replication.Rnw:1335-1357
###################################################
cutoff_len_upper<-4
cutoff_len_lower<-20
cutoff_upper<-pi/cutoff_len_upper
L<-100
# Spectrum: the second-order difference filter is applied to the 
# explanatory variable (second column) 
#   Important: the relative phase information between target (data in level)
#   and explanatory variable (differenced data) is required.
#   Therefore one must supply the transferfunction (not the amplitude) 
#   of the differenced filter!
weight_func<-cbind(sqrt(trffkt_i2_GDP),sqrt(trffkt_i2_GDP)*(1-exp(1.i*omega_k))^2)
# Ignore singularity in frequency zero
weight_func[1,]<-0
# Target
Gamma<-(0:K)<=as.integer(cutoff_upper*K/pi)+1
Gamma[1:(K/cutoff_len_lower+1)]<-0
# Unconstrained design: the zero of order 2 is already obtained
#   by the double difference filter
i1<-F
i2<-F
# MSE-design
lambda<-eta<-0


###################################################
### code chunk number 247: Replication.Rnw:1359-1374
###################################################
# Additional configuration settings for MDFA
d<-0
lambda_cross<-lambda_smooth<-0
lambda_decay<-c(0,0)
lin_expweight<-F
shift_constraint<-rep(0,ncol(weight_func)-1)
weight_constraint<-Gamma[1]
grand_mean<-F
b0_H0<-NULL
c_eta<-F
weights_only<-F
weight_structure<-c(0,0)
white_noise<-F
synchronicity<-F
lag_mat<-matrix(rep(0:(L-1),ncol(weight_func)),nrow=L)  


###################################################
### code chunk number 248: Replication.Rnw:1377-1383
###################################################
# Estimate MDFA MSE filter coefficients  
mdfa_obj<-mdfa_analytic(L,lambda,weight_func,Lag,Gamma,
              eta,cutoff,i1,i2,weight_constraint,lambda_cross,
              lambda_decay,lambda_smooth,lin_eta,shift_constraint,
              grand_mean,b0_H0,c_eta,
              weight_structure,white_noise,synchronicity,lag_mat,troikaner)


###################################################
### code chunk number 249: Replication.Rnw:1386-1387
###################################################
mdfa_obj<-MDFA_mse(L,weight_func,Lag,Gamma)$mdfa_obj


###################################################
### code chunk number 250: Replication.Rnw:1391-1414
###################################################
file = paste("z_us_real_log_gdp_detrended_amp_shift_bp_i2.pdf", sep = "")
pdf(file = paste(path.out,file,sep=""), paper = "special", width = 6, height = 6)
trffkt_composite<-mdfa_obj$trffkt*(1-exp(1.i*omega_k))^2
mplot<-cbind(Gamma,abs(trffkt_composite),Arg(trffkt_composite)/omega_k)#head(mplot)
# Complete by shift in frequency zero: NA for the bandpass 
mplot[1,3]<-NA
dimnames(mplot)[[2]]<-c("Target","Estimate","Shift in passband")
ax<-rep(NA,nrow(mplot))
ax[1+(0:6)*((nrow(mplot)-1)/6)]<-c(0,"pi/6","2pi/6","3pi/6","4pi/6","5pi/6","pi")
par(mfrow=c(1,2))
plot_title<-"Amplitude"
insamp<-1.e+90
title_more<-dimnames(mplot)[[2]][1:2]
colo<-c("black","blue")
mplot_func(as.matrix(mplot[,1:2]), ax, plot_title, title_more, insamp, colo)
plot_title<-"Shift"
insamp<-1.e+90
title_more<-NULL
colo<-"blue"
# Restrict shift to passband (becomes -infty towards freq. 0)
mplot[!Gamma,3]<-NA
mplot_func(as.matrix(mplot[,3]), ax, plot_title, title_more, insamp, colo)
invisible(dev.off())


###################################################
### code chunk number 251: z_us_real_log_gdp_detrended_amp_shift_bp_i2.pdf
###################################################
  file = paste("z_us_real_log_gdp_detrended_amp_shift_bp_i2", sep = "")
  cat("\\begin{figure}[H]")
  cat("\\begin{center}")
  cat("\\includegraphics[height=4in, width=6in]{", file, "}\n",sep = "")
  cat("\\caption{Amplitude (left) and time-shift functions (right) of real-time composite unconstrained bandpass MSE-design", sep = "")
  cat("\\label{z_us_real_log_gdp_detrended_amp_shift_bp_i2}}", sep = "")
  cat("\\end{center}")
  cat("\\end{figure}")


###################################################
### code chunk number 252: Replication.Rnw:1429-1434
###################################################
xf_i2<-rep(NA,length(detrended))
# Apply second-order differences to the data
diff2_lgdp_07<-c(0,0,diff(lgdp_07,diff=2))
for (i in L:length(detrended))  
  xf_i2[i]<-t(mdfa_obj$b)%*%diff2_lgdp_07[i:(i-L+1)]  


###################################################
### code chunk number 253: Replication.Rnw:1436-1461
###################################################
file = paste("z_us_real_log_gdp_detrended_filt_bp_i2.pdf", sep = "")
pdf(file = paste(path.out,file,sep=""), paper = "special", width = 6, height = 6)
par(mfrow=c(2,1))
mplot<-cbind(xf_i2,ctfilt_list[[4]][,2],ctfilt_07)
dimnames(mplot)[[2]]<-c("Composite bandpass","best I(2)","I(1)")
plot(mplot,ylim=c(min(mplot,na.rm=T),max(mplot,na.rm=T)),xlim=c(start_year,end_year),plot.type="s",col=c("black","blue"),main="Cycle Estimates: I(1)-model (green), best I(2)-model (red) and composite bandpass (orange)",ylab="")
nberShade()
lines(mplot[,1],col="orange")
lines(mplot[,2],col="red")
lines(mplot[,3],col="green")
mtext("Bandpass I(2)", side = 3, line = -1,at=mean(c(start_year,end_year)),col="orange")
mtext("Cycle best I(2)", side = 3, line = -2,at=mean(c(start_year,end_year)),col="red")
mtext("Cycle I(1)", side = 3, line = -3,at=mean(c(start_year,end_year)),col="green")
abline(h=0)
mplot<-cbind(xf_i2,xf_i1,ctfilt_07)
dimnames(mplot)[[2]]<-c("Composite Bandpass","Bandpass detrended-I(1)","")
start_year<-1970
plot(mplot[,1],ylim=c(min(mplot,na.rm=T),max(mplot,na.rm=T)),xlim=c(start_year,end_year),plot.type="s",col=c("black","blue"),main="Bandpass: detrended-I(1) (blue) vs. composite I(2) (orange)",ylab="")
nberShade()
lines(mplot[,2],col="blue")
lines(mplot[,1],col="orange")
mtext("Bandpass I(2)", side = 3, line = -1,at=mean(c(start_year,end_year)),col="orange")
mtext("Bandpass I(1)", side = 3, line = -2,at=mean(c(start_year,end_year)),col="blue")
abline(h=0)
invisible(dev.off())


###################################################
### code chunk number 254: z_us_real_log_gdp_detrended_filt_bp_i2.pdf
###################################################
  file = paste("z_us_real_log_gdp_detrended_filt_bp_i2", sep = "")
  cat("\\begin{figure}[H]")
  cat("\\begin{center}")
  cat("\\includegraphics[height=6in, width=6in]{", file, "}\n",sep = "")
  cat("\\caption{Composite bandpass (orange), bandpass I(1) (blue), best I(2)-model (red) and I(1)-model (green)   ", sep = "")
  cat("\\label{z_us_real_log_gdp_detrended_filt_bp_i2}}", sep = "")
  cat("\\end{center}")
  cat("\\end{figure}")


###################################################
### code chunk number 255: Replication.Rnw:1525-1527
###################################################
# Call HP-routines
library(mFilter)


###################################################
### code chunk number 256: Replication.Rnw:1540-1550
###################################################
# Load full data-set
start_year<-1960
end_date<-format(Sys.time(), "%Y-%m-%d")
end_year<-as.double(substr(end_date,1,4))
start_date=paste(start_year,"-01-01",sep="")
# Select data between start_year and end_year
data_sample<-mydata[paste("/",end_date,sep="")]
data_sample<-data_sample[paste(start_date,"/",sep="")]
lgdp <- ts(100*log(data_sample),start=start_year,frequency=4)
nobs <- length(lgdp)


###################################################
### code chunk number 257: Replication.Rnw:1553-1555
###################################################
source(file=paste(path.pgm,"hpFilt.r",sep=""))
head(hpFilt)


###################################################
### code chunk number 258: Replication.Rnw:1559-1572
###################################################
# Data: US-GDP
x<-lgdp
# Series length
len<-L_hp<-length(x)
# Select lambda
lambda_hp<-1600
q<-1/lambda_hp

hp_filt_obj<-hpFilt(q,L_hp)

tail(hpFilt,2)
hp_filt_obj$ma_model
ma_coeff<-hp_filt_obj$ma_model[2:3]


###################################################
### code chunk number 259: Replication.Rnw:1577-1605
###################################################
# Resolution of frequency-grid: 2-times the sample length
#   Selecting a higher resolution would tighten the approximation of HP by DFA
K<-2*len
# proceed to filtering
x_hp <- hpfilter(x,type="lambda", freq=lambda_hp)
# Extract the coefficients of the symmetric trend:
#   hpfilter generates coefficients of the HP-gap (see below):
#   we here transform back to trend filter
parm<-diag(rep(1,len))-x_hp$fmatrix

file = paste("z_HP_us_real_log_gdp.pdf", sep = "")
pdf(file = paste(path.out,file,sep=""), paper = "special", width = 6, 
    height = 6)
# Plots: filter coefficients and series
par(mfrow=c(2,1))
title_more<-NA
mplot<-cbind(parm[,len/2],parm[,1])
plot_title<-"HP lambda=1600: symmetric (red) and real-time (blue)"
axis_d<-1:len-1
insamp<-1.e+99
colo<-c("red","blue")
mplot_func(mplot,axis_d,plot_title,title_more,insamp,colo)
mplot<-cbind(rep(NA,len),rep(NA,len),rep(NA,len),x,x_hp$trend)
plot_title<-"Log US-GDP (blue) vs HP-Trend (red)"
plot(mplot[,4],col="blue",xlab="",ylab="",main=plot_title)
nberShade()
lines(mplot[,5],col="red")
invisible(dev.off())


###################################################
### code chunk number 260: z_HP_us_real_log_gdp.pdf
###################################################
  file = paste("z_HP_us_real_log_gdp", sep = "")
  cat("\\begin{figure}[H]")
  cat("\\begin{center}")
  cat("\\includegraphics[height=6in, width=6in]{", file, "}\n",sep = "")
  cat("\\caption{Filter coefficients of HP-trend, lambda=1600: symmetric (red) and real-time (blue) filters (top-graph). Original and filtered log US-GDP (bottom figure) ", sep = "")
  cat("\\label{z_HP_us_real_log_gdp}}", sep = "")
  cat("\\end{center}")
  cat("\\end{figure}")


###################################################
### code chunk number 261: Replication.Rnw:1618-1656
###################################################
# Compute pseudo-spectral density underlying Wiener-Kolmogorov derivation of HP 
#   (see McElroy (2008) or Maravall-Kaiser p.179)
# For lambda=1600 the MA coefficients are -1.77709 and 0.79944
# Note that MDFA is fed with the square-root of the spectrum
#   (this would correspond to the absolute value of the DFT)
weight_func_h<-abs((1+ma_coeff[1]*exp(-1.i*(0:(K))*pi/(K))+
                      ma_coeff[2]*exp(-1.i*2*(0:(K))*pi/(K)))/
                      (1-exp(-1.i*(0:(K))*pi/(K)))^2)
# Specify (square-root) spectra of target (first column) 
#   and of explanatory variable (second column): target and 
#   explanatory are the same here (univariate filter)
weight_func<-cbind(weight_func_h,weight_func_h)
# Compute target Gamma: HP-trend symmetric filter, see McElroy (2008)
Gamma<-0:(K)
for (k in 0:(K))
{
  omegak<-k*pi/(K)
  Gamma[k+1]<-(1/lambda_hp)/(1/lambda_hp+abs(1-exp(1.i*omegak))^4)
}


file = paste("z_HP_filt_trffkt.pdf", sep = "")
pdf(file = paste(path.out,file,sep=""), paper = "special", width = 6, 
    height = 6)
par(mfrow=c(2,1))
colo<-c("blue","red")
insamp<-1.e+99
mplot<-as.matrix(Gamma)
plot_title<-"Target Gamma, lambda=1600"
freq_axe<-rep(NA,K+1)
freq_axe[1]<-0
freq_axe[1+(1:6)*K/6]<-c(paste(c("",2:5),"pi/6",sep=""),"pi")
mplot_func(mplot,freq_axe,plot_title,title_more,insamp,colo)
# Plot log spectrum: weight_func must be squared
mplot<-as.matrix(c(NA,log(weight_func[2:(K+1),1]^2)))
plot_title<-"Log pseudo-spectrum, lambda=1600"
mplot_func(mplot,freq_axe,plot_title,title_more,insamp,colo)
invisible(dev.off())


###################################################
### code chunk number 262: z_HP_filt_trffkt.pdf
###################################################
  file = paste("z_HP_filt_trffkt", sep = "")
  cat("\\begin{figure}[H]")
  cat("\\begin{center}")
  cat("\\includegraphics[height=6in, width=6in]{", file, "}\n",sep = "")
  cat("\\caption{Target signal (top) and log-transformed pseudo-spectrum (bottom): the singularity in frequency zero is skipped", sep = "")
  cat("\\label{z_HP_filt_trffkt}}", sep = "")
  cat("\\end{center}")
  cat("\\end{figure}")


###################################################
### code chunk number 263: Replication.Rnw:1669-1722
###################################################
# HP-spectrum: this will be squared in MDFA
weight_func_hp<-weight_func
K<-nrow(weight_func_hp)-1
# Frequency zero is infinity (unit root)
#   The singularity is removed by imposing first and second order 
#     restrictions
#   For numerical computations we set the spectrum arbitrarily 
#     to zero in freq. zero
weight_func_hp[1,]<-0
# Filter length is identified with sample length
L<-len
# Set default settings for MDFA (MSE, no regularization)
source(file=paste(path.pgm,"control_default.r",sep=""))
# First and second order constraints are imposed
#   (the level constraint weight_constraint=1 is set in the default settings)
i1<-T
i2<-T
# Cutoff: the frequency at which the target drops below 0.5
cutoff<-pi*which(Gamma<0.5)[1]/length(Gamma)
# Real-time (nowcast)
Lag<-0
# Estimation: generic
imdfa_hp<-mdfa_analytic(L,lambda,weight_func_hp,Lag,Gamma,eta,cutoff,
                        i1,i2,weight_constraint,lambda_cross,lambda_decay,
                        lambda_smooth,lin_eta,shift_constraint,grand_mean,
                        b0_H0,c_eta,weight_structure,
                        white_noise,synchronicity,lag_mat,troikaner)

# Alternative (identical) context-specific estimation: 
imdfa_hp<-MDFA_mse_constraint(L,weight_func_hp,Lag,Gamma,i1,i2,weight_constraint,
                              shift_constraint)$mdfa_obj

file = paste("z_HP_filt_coef.pdf", sep = "")
pdf(file = paste(path.out,file,sep=""), paper = "special", width = 6, 
    height = 6)
par(mfrow=c(2,1))
colo<-c("blue","red")
insamp<-1.e+99
mplot<-cbind(imdfa_hp$b,parm[1:L,max(0,Lag)+1])
rownames(mplot)<-paste("Lag ",0:(nrow(mplot)-1))
colnames(mplot)<-c("Replication by DFA","HP-real-time")
plot_title<-"Replication HP-real-time by DFA: Lags 0-240"
freq_axe<-rownames(mplot)
title_more<-c("DFA","HP")
mplot_func(mplot,freq_axe,plot_title,title_more,insamp,colo)
mplot<-mplot[1:21,]
rownames(mplot)<-paste("Lag ",0:(nrow(mplot)-1))
colnames(mplot)<-c("Replication by DFA","HP-real-time")
plot_title<-"Replication HP-real-time by DFA: Lags 0-20"
freq_axe<-rownames(mplot)
title_more<-c("DFA","HP")
mplot_func(mplot,freq_axe,plot_title,title_more,insamp,colo)
invisible(dev.off())


###################################################
### code chunk number 264: z_HP_filt_coef.pdf
###################################################
  file = paste("z_HP_filt_coef", sep = "")
  cat("\\begin{figure}[H]")
  cat("\\begin{center}")
  cat("\\includegraphics[height=6in, width=6in]{", file, "}\n",sep = "")
  cat("\\caption{Concurrent filter coefficients: DFA (blue) vs. `true' coefficients (red). Full lag-distribution (top) and first twenty lags (bottom).", sep = "")
  cat("\\label{z_HP_filt_coef}}", sep = "")
  cat("\\end{center}")
  cat("\\end{figure}")


###################################################
### code chunk number 265: Replication.Rnw:1735-1736
###################################################
head(mplot)


###################################################
### code chunk number 266: Replication.Rnw:1739-1745
###################################################
# Check first-order: should give 1
print(paste("Transfer function in frequency zero: ",
            round(sum(imdfa_hp$b),3),sep=""))
# Check second-order: time-shift should vanish
print(paste("Time-shift in frequency zero: ",
            round((1:(L-1))%*%imdfa_hp$b[2:L],10),sep=""))


###################################################
### code chunk number 267: Replication.Rnw:1804-1853
###################################################
Gamma_cycle<-abs(Gamma*(1-exp(1.i*pi*(0:K)/K)))
Gamma_gap<-1-Gamma
Gamma_gap[1]<-0
file = paste("z_HP_us_real_log_gdp_hp_diff__gap_amp.pdf", sep = "")
pdf(file = paste(path.out,file,sep=""), paper = "special", 
    width = 6, height = 6)
insamp<-1.e+99
par(mfrow=c(2,2))
# Cycle
mplot<-as.matrix(Gamma_cycle)
plot_title<-"Target HP-Cycle"
freq_axe<-rep(NA,K+1)
freq_axe[1]<-0
freq_axe[1+(1:6)*K/6]<-c(paste(c("",2:5),"pi/6",sep=""),"pi")
title_more<-NA
colo<-"blue"
mplot_func(mplot,freq_axe,plot_title,title_more,insamp,colo)
# Gap
mplot<-as.matrix(Gamma_gap)
plot_title<-"Target HP-Gap"
freq_axe<-rep(NA,K+1)
freq_axe[1]<-0
freq_axe[1+(1:6)*K/6]<-c(paste(c("",2:5),"pi/6",sep=""),"pi")
title_more<-NA
colo<-"red"
mplot_func(mplot,freq_axe,plot_title,title_more,insamp,colo)
# At frequency zero
len2<-30
mplot<-as.matrix(c(Gamma_cycle[(len2+1):1],
                   as.matrix(Gamma_cycle)[2:(len2+1)]))
plot_title<-"Target HP-Cycle at frequency zero"
freq_axe<-rep(NA,2*len2+1)
freq_axe[1]<-0
freq_axe[c(1,len2+1,2*len2+1)]<-c(paste("-pi/",as.integer(K/len2),sep=""),
                              "0",paste("pi/",as.integer(K/len2),sep=""))
title_more<-NA
colo<-"blue"
mplot_func(mplot,freq_axe,plot_title,title_more,insamp,colo)
# Gap
mplot<-as.matrix(c(Gamma_gap[(len2+1):1],as.matrix(Gamma_gap)[2:(len2+1)]))
plot_title<-"Target HP-Gap at frequency zero"
freq_axe<-rep(NA,2*len2+1)
freq_axe[1]<-0
freq_axe[c(1,len2+1,2*len2+1)]<-c(paste("-pi/",as.integer(K/len2),sep=""),"0",
                                  paste("pi/",as.integer(K/len2),sep=""))
title_more<-NA
colo<-"red"
mplot_func(mplot,freq_axe,plot_title,title_more,insamp,colo)
invisible(dev.off())


###################################################
### code chunk number 268: z_HP_us_real_log_gdp_hp_diff__gap_amp.pdf
###################################################
  file = paste("z_HP_us_real_log_gdp_hp_diff__gap_amp", sep = "")
  cat("\\begin{figure}[H]")
  cat("\\begin{center}")
  cat("\\includegraphics[height=4in, width=6in]{", file, "}\n",sep = "")
  cat("\\caption{Amplitude functions: HP-Cycle (blue) and HP-Gap (red). Whole positive frequency-band (top) vs. close-up at frequency zero (bottom)", sep = "")
  cat("\\label{z_HP_us_real_log_gdp_hp_diff__gap_amp}}", sep = "")
  cat("\\end{center}")
  cat("\\end{figure}")


###################################################
### code chunk number 269: Replication.Rnw:1873-1876
###################################################
peak_frequency<-(which(Gamma_cycle==max(Gamma_cycle))-1)*pi/K
periodicity_in_quarters<-round(2*pi/peak_frequency,3)
print(paste("Cycle-periodicity in years: ",periodicity_in_quarters/4,sep=""))  


###################################################
### code chunk number 270: Replication.Rnw:1879-1899
###################################################
# Select lambda
lambda<-200
# proceed to filtering
x_l <- hpfilter(x,type="lambda", freq=lambda)
# Extract the coefficients of the symmetric trend:
parm_l<-diag(rep(1,len))-x_l$fmatrix
Gamma_l<-0:(K)
for (k in 0:(K))
{
  omegak<-k*pi/(K)
  Gamma_l[k+1]<-parm_l[len/2,len/2]+2*parm_l[(len/2+1):len,len/2]%*%
              cos((1:(len/2))*omegak)
}
# Specify cycle-target 
Gamma_cycle_l<-abs(Gamma_l*(1-exp(1.i*pi*(0:K)/K)))
# Compute cycle-length
peak_frequency_l<-(which(Gamma_cycle_l==max(Gamma_cycle_l))-1)*pi/K
periodicity_in_quarters_l<-round(2*pi/peak_frequency_l,3)
print(paste("Cycle-periodicity in years for lambda=",lambda,": ",
            periodicity_in_quarters_l/4,sep=""))  


###################################################
### code chunk number 271: Replication.Rnw:1903-1929
###################################################
L<-50
# Specify the pseudo-spectral density of the differenced implicit model equation
#   The following line of code is tricky since a two-column matrix multiplies
#   a vector whose length corresponds to the number of rows of the matrix.
# In such a case, R automatically applies the vector to each column separately
#   and multiplication is performed elementwise, as desired.
weight_func_hp_diff<-weight_func_hp*
  abs(1-exp(-1.i*(0:(nrow(weight_func_hp)-1)*pi/(nrow(weight_func_hp)-1))))
K<-nrow(weight_func_hp_diff)-1
# Set default settings for MDFA (MSE, no regularization)
source(file=paste(path.pgm,"control_default.r",sep=""))
# Set the filter constraints: level but no time-shift constraint
i1<-T
i2<-F
# Estimate the corresponding MSE real-time filter

imdfa_hp_cycle<-mdfa_analytic(L,lambda,weight_func_hp_diff,Lag,Gamma,
                        eta,cutoff,i1,i2,weight_constraint,lambda_cross,
                        lambda_decay,lambda_smooth,lin_eta,shift_constraint,
                        grand_mean,b0_H0,c_eta,weight_structure,
                        white_noise,synchronicity,lag_mat,troikaner)

# Alternative (identical) context-specific estimation: 
imdfa_hp_cycle<-MDFA_mse_constraint(L,weight_func_hp_diff,Lag,Gamma,i1,i2,
                                    weight_constraint,shift_constraint)$mdfa_obj



###################################################
### code chunk number 272: Replication.Rnw:1932-1938
###################################################
# Check first-order: should give 1
print(paste("Transfer function in frequency zero: ",
            sum(imdfa_hp_cycle$b),sep=""))
# Check second-order: this is not imposed anymore
print(paste("Time-shift in frequency zero: ",
            round((1:(L-1))%*%imdfa_hp_cycle$b[2:L],3),sep=""))


###################################################
### code chunk number 273: Replication.Rnw:1942-1957
###################################################
# Specify the pseudo-spectral density of the differenced implicit 
#   model equation
file = paste("z_HP_us_real_log_gdp_hp_diff_mse.pdf", sep = "")
pdf(file = paste(path.out,file,sep=""), paper = "special", 
    width = 6, height = 6)
insamp<-1.e+99
colo<-c("red","blue")
mplot<-cbind(imdfa_hp$b[1:L],imdfa_hp_cycle$b)
plot_title<-"Filter coefficients: Level (red) vs. Difference (blue)"
ymin<-min(mplot,na.rm=T)
ymax<-max(mplot,na.rm=T)
plot(mplot[,1],col="red",xlab="",ylab="",main=plot_title,type="l",
     ylim=c(ymin,ymax))
lines(mplot[,2],col="blue")
invisible(dev.off())


###################################################
### code chunk number 274: z_HP_us_real_log_gdp_hp_diff_mse.pdf
###################################################
  file = paste("z_HP_us_real_log_gdp_hp_diff_mse", sep = "")
  cat("\\begin{figure}[H]")
  cat("\\begin{center}")
  cat("\\includegraphics[height=4in, width=6in]{", file, "}\n",sep = "")
  cat("\\caption{Real-time MSE filters: HP-trend in level (red) vs. HP Trend in differences (blue)", sep = "")
  cat("\\label{z_HP_us_real_log_gdp_hp_diff_mse}}", sep = "")
  cat("\\end{center}")
  cat("\\end{figure}")


###################################################
### code chunk number 275: Replication.Rnw:1973-1986
###################################################
x_gap<-x
# Specify the real-time HP-Gap coefficients
#   We rely on the estimates as computed by hpfilter
#   We provide an arbitrary series of length L
#   The real-time gap-coefficients are in the first column of fmatrix
gamma_gap<-hpfilter(1:L,type="lambda", freq=lambda_hp)$fmatrix[,1]

# The sum must be zero: bandpass filter applied to 
#   original GDP in level
sum(gamma_gap)
for (j in L:length(x_gap))
  x_gap[j] <- gamma_gap[1:L]%*%x[j:(j-(L-1))]
x_gap[1:(L-1)]<-NA 


###################################################
### code chunk number 276: Replication.Rnw:1989-1997
###################################################
x_cycle<-xdiff<-diff(x)
gamma_cycle<-as.vector(imdfa_hp_cycle$b)
# Coefficients should add to one: trend filter applied to 
#   differenced data
sum(gamma_cycle)
for (j in L:length(x_cycle))
  x_cycle[j] <- gamma_cycle%*%xdiff[j:(j-(L-1))]
x_cycle[1:(L-1)]<-NA


###################################################
### code chunk number 277: Replication.Rnw:2001-2029
###################################################
file = paste("z_HP_us_real_log_gdp_hp_bp.pdf", sep = "")
pdf(file = paste(path.out,file,sep=""), paper = "special", 
    width = 6, height = 6)
par(mfrow=c(1,2))
# Plots: filter coefficients and series
insamp<-1.e+99
# We bind data and filter outputs
#   The shorter x_cycle (relies on differences) is automatically 
#     shifted/adjusted
mploth<-cbind(c(NA,diff(x)),x_gap,x_cycle,diff(x_cycle))
# Standardization
mplot<-scale(na.omit(mploth))
plot_title<-"Gap (red) vs. cycle (blue)"
ymin<-min(mplot,na.rm=T)
ymax<-max(mplot,na.rm=T)
plot(mplot[,3],col="blue",xlab="",ylab="",main=plot_title,type="l",
     ylim=c(ymin,ymax))
nberShade()
lines(mplot[,3],col="blue")
lines(mplot[,2],col="red")

plot_title<-"Gap (red) vs. diff-cycle (green)"
plot(mplot[,2],col="red",xlab="",ylab="",main=plot_title,type="l",
     ylim=c(ymin,ymax))
nberShade()
lines(mplot[,2],col="red")
lines(mplot[,4]+1,col="green")
invisible(dev.off())


###################################################
### code chunk number 278: z_HP_us_real_log_gdp_hp_bp.pdf
###################################################
  file = paste("z_HP_us_real_log_gdp_hp_bp", sep = "")
  cat("\\begin{figure}[H]")
  cat("\\begin{center}")
  cat("\\includegraphics[height=4in, width=6in]{", file, "}\n",sep = "")
  cat("\\caption{HP-gap (red) and HP-cycle (blue) applied to log-transformed US-GDP in left panel. HP-gap (red) and differenced HP-cycle (green) in right panel: the green line is shifted upwards by +1 in order to differentiate both series. All filter outputs are standardized for ease of visual inspection", sep = "")
  cat("\\label{z_HP_us_real_log_gdp_hp_bp}}", sep = "")
  cat("\\end{center}")
  cat("\\end{figure}")


###################################################
### code chunk number 279: Replication.Rnw:2054-2071
###################################################
# Customization
lambda<-100
eta<-0.5
# Delimit passband and stopband for customization:
#   Pi/12 corresponds to a mean duration of 24 quarters
#   which is approximately the mean duration of historical 
#   business-cycles
cutoff<-pi/12

imdfa_hp_cust<-mdfa_analytic(L,lambda,weight_func_hp_diff,Lag,Gamma,eta,cutoff,
                        i1,i2,weight_constraint,lambda_cross,lambda_decay,
                        lambda_smooth,lin_eta,shift_constraint,grand_mean,
                        b0_H0,c_eta,weight_structure,
                        white_noise,synchronicity,lag_mat,troikaner)
# Alternative (identical) context-specific estimation: 
imdfa_hp_cust<-MDFA_cust_constraint(L,weight_func_hp_diff,Lag,Gamma,cutoff,
              lambda,eta,i1,i2,weight_constraint,shift_constraint)$mdfa_obj


###################################################
### code chunk number 280: Replication.Rnw:2074-2086
###################################################
file = paste("z_HP_cust_coef.pdf", sep = "")
pdf(file = paste(path.out,file,sep=""), paper = "special", width = 4, height = 4)
# Plots: filter coefficients MSE and customized
title_more<-NA
mplot<-cbind(imdfa_hp_cust$b,imdfa_hp_cycle$b)
parma<-parm
plot_title<-"HP cycle: MSE (blue) vs Customized (black)"
axis_d<-0:(L-1)
insamp<-1.e+99
colo<-c("black","blue")
mplot_func(mplot,axis_d,plot_title,title_more,insamp,colo)
invisible(dev.off())


###################################################
### code chunk number 281: z_HP_cust_coef.pdf
###################################################
  file = paste("z_HP_cust_coef", sep = "")
  cat("\\begin{figure}[H]")
  cat("\\begin{center}")
  cat("\\includegraphics[height=4in, width=4in]{", file, "}\n",sep = "")
  cat("\\caption{Filter coefficients HP Cycle: MSE (blue) vs. customized (black), based on spectrum of differenced data. ", sep = "")
  cat("\\label{z_HP_cust_coef}}", sep = "")
  cat("\\end{center}")
  cat("\\end{figure}")


###################################################
### code chunk number 282: Replication.Rnw:2100-2122
###################################################
x_cycle_cust<-diff(x)
gamma_cust<-imdfa_hp_cust$b[1:L]
for (j in L:length(x_cycle_cust))
  x_cycle_cust[j] <- gamma_cust%*%diff(x)[j:(j-(L-1))]
x_cycle_cust[1:(L-1)]<-NA

file = paste("z_HP_us_real_log_gdp_hp_bp_cust.pdf", sep = "")
pdf(file = paste(path.out,file,sep=""), paper = "special", 
    width = 6, height = 6)
# Plot
insamp<-1.e+99
colo<-c("red","blue")
mplot<-scale(cbind(x_cycle,x_cycle_cust))
plot_title<-"HP Cycle: MSE (blue) vs Customized (black): both standardized"
ymin<-min(mplot,na.rm=T)
ymax<-max(mplot,na.rm=T)
plot(mplot[,2],col="black",xlab="",ylab="",main=plot_title,type="l",
     ylim=c(ymin,ymax))
nberShade()
lines(mplot[,2],col="black")
lines(mplot[,1],col="blue") 
invisible(dev.off())


###################################################
### code chunk number 283: z_HP_us_real_log_gdp_hp_bp_cust.pdf
###################################################
  file = paste("z_HP_us_real_log_gdp_hp_bp_cust", sep = "")
  cat("\\begin{figure}[H]")
  cat("\\begin{center}")
  cat("\\includegraphics[height=4in, width=6in]{", file, "}\n",sep = "")
  cat("\\caption{HP real-time Cycle designs: MSE (blue) vs. customized (black). Both filter outputs are standardized for ease of visual inspection", sep = "")
  cat("\\label{z_HP_us_real_log_gdp_hp_bp_cust}}", sep = "")
  cat("\\end{center}")
  cat("\\end{figure}")


###################################################
### code chunk number 284: Replication.Rnw:2137-2152
###################################################
file = paste("z_HP_us_real_log_gdp_hp_bp_cust_1.pdf", sep = "")
pdf(file = paste(path.out,file,sep=""), paper = "special", 
    width = 6, height = 6)
insamp<-1.e+99
colo<-c("red","blue")
mplot<-scale(cbind(x_gap,diff(x_cycle_cust)))
plot_title<-"Diff-customized cycle (green) vs. HP-Gap (red)"
ymin<-min(mplot,na.rm=T)
ymax<-max(mplot,na.rm=T)
plot(mplot[,2],col="green",xlab="",ylab="",main=plot_title,type="l",
     ylim=c(ymin,ymax))
nberShade()
lines(mplot[,2],col="green")
lines(mplot[,1],col="red") 
invisible(dev.off())


###################################################
### code chunk number 285: z_HP_us_real_log_gdp_hp_bp_cust_1.pdf
###################################################
  file = paste("z_HP_us_real_log_gdp_hp_bp_cust_1", sep = "")
  cat("\\begin{figure}[H]")
  cat("\\begin{center}")
  cat("\\includegraphics[height=4in, width=6in]{", file, "}\n",sep = "")
  cat("\\caption{Differences of customized cycle (green) vs. MSE HP-gap (red). Both filter outputs are standardized for ease of visual inspection", sep = "")
  cat("\\label{z_HP_us_real_log_gdp_hp_bp_cust_1}}", sep = "")
  cat("\\end{center}")
  cat("\\end{figure}")


###################################################
### code chunk number 286: Replication.Rnw:2195-2235
###################################################
x<-lgdp
# Series length
len<-length(x)
# Resolution of frequency-grid: 2-times the sample length
#   Selecting a higher resolution would tighten the approximation of 
#   CF by DFA
K<-2*len
# Upper and lower cutoffs of bandpass: lengths in quarters
len1<-8
len2<-40
cutoff1<-2*pi/len1
cutoff2<-2*pi/len2
# Specify target bandpass
Gamma_cf<-((0:K)>K*cutoff2/pi)&((0:K)<K*cutoff1/pi)
# Specify (square-root of) implicit pseudo-spectral density
weight_func_cf<-matrix(rep(1/abs(1-exp(1.i*(0:K)*pi/K)),2),ncol=2)
K<-nrow(weight_func_cf)-1
# Remove singularity in frequency zero (one can assign an arbitrary value)
weight_func_cf[1,]<-0
# Filter length
L<-len
# Set default settings for MDFA (MSE, no regularization)
source(file=paste(path.pgm,"control_default.r",sep=""))
# Filter constraints
i1<-T
i2<-F
# We have to specify the level-constraint
#   Real-time filter must equal target-Gamma in frequency zero
weight_constraint<-Gamma_cf[1]
# Proceed to estimation

imdfa_cf<-mdfa_analytic(L,lambda,weight_func_cf,Lag,Gamma_cf,eta,cutoff,
                        i1,i2,weight_constraint,lambda_cross,lambda_decay,
                        lambda_smooth,lin_eta,shift_constraint,grand_mean,
                        b0_H0,c_eta,weight_structure,
                        white_noise,synchronicity,lag_mat,troikaner)
# Alternative (identical) context-specific estimation: 
imdfa_cf<-MDFA_mse_constraint(L,weight_func_cf,Lag,Gamma_cf,i1,i2,weight_constraint,
                              shift_constraint)$mdfa_obj



###################################################
### code chunk number 287: Replication.Rnw:2238-2256
###################################################
file = paste("z_amp_shift_dfa_mse_cf_0.pdf", sep = "")
pdf(file = paste(path.out,file,sep=""), paper = "special", 
    width = 6, height = 6)
omega_k<-pi*(0:K)/K
amp_mse<-abs(imdfa_cf$trffkt)
mplot<-as.matrix(amp_mse)
mplot[1,]<-NA
colnames(mplot)<-NA
ax<-rep(NA,nrow(mplot))
ax[1+(0:6)*((nrow(mplot)-1)/6)]<-c(0,"pi/6","2pi/6","3pi/6",
                                   "4pi/6","5pi/6","pi")
plot_title<-paste("Amplitude of Christiano Fitzgerald with 
                  cutoffs pi/",len2/2,", pi/",len1/2,sep="")
insamp<-1.e+90
title_more<-dimnames(mplot)[[2]]
colo<-c("blue","red")
mplot_func(mplot, ax, plot_title, title_more, insamp, colo)
invisible(dev.off())


###################################################
### code chunk number 288: z_amp_shift_dfa_mse_cf_0.pdf
###################################################
  file = paste("z_amp_shift_dfa_mse_cf_0", sep = "")
  cat("\\begin{figure}[H]")
  cat("\\begin{center}")
  cat("\\includegraphics[height=3in, width=6in]{", file, "}\n",sep = "")
  cat("\\caption{Amplitude function of the real-time Christiano Fitzgerald filter as replicated by DFA and assuming that the DGP is a random-walk", sep = "")
  cat("\\label{z_amp_shift_dfa_mse_cf_0}}", sep = "")
  cat("\\end{center}")
  cat("\\end{figure}")


###################################################
### code chunk number 289: Replication.Rnw:2269-2275
###################################################
# Check first-order: should give 0
print(paste("Transfer function in frequency zero: ",
            round(sum(imdfa_cf$b),3),sep=""))
# Check second-order: time-shift is not constrained
print(paste("Time-shift in frequency zero: ",
            round((1:(L-1))%*%imdfa_cf$b[2:L],3),sep=""))


###################################################
### code chunk number 290: Replication.Rnw:2279-2287
###################################################
# Setting theta=1 replicates the random-walk model
#   We first set root=F (no unit-root)
x_cf<-cffilter(x,pu=len2,pl=len1,root=F,drift=F, nfix=NULL,theta=1)
parm_cf<-x_cf$fmatrix

# Check first-order: should give 0
print(paste("Transfer function in frequency zero: ",
            round(sum(parm_cf[,1]),3),sep=""))


###################################################
### code chunk number 291: Replication.Rnw:2291-2297
###################################################
x_cf_T<-cffilter(x,pu=len2,pl=len1,root=T,drift=F, nfix=NULL,theta=1)
parm_cf_T<-x_cf_T$fmatrix

# Check first-order: should give 0
print(paste("Transfer function in frequency zero: ",
            round(sum(parm_cf_T[,1]),3),sep=""))


###################################################
### code chunk number 292: Replication.Rnw:2301-2308
###################################################
x_mF_T<-mFilter(x,filter="CF",pu=len2,pl=len1,root=T,drift=F, 
                nfix=NULL,theta=1)
parm_mF_T<-x_mF_T$fmatrix

# Check first-order: should give 0
print(paste("Transfer function in frequency zero: ",
            round(sum(parm_mF_T[,1]),3),sep=""))


###################################################
### code chunk number 293: Replication.Rnw:2312-2323
###################################################
file = paste("z_CF_us_real_log_gdp.pdf", sep = "")
pdf(file = paste(path.out,file,sep=""), paper = "special", 
    width = 6, height = 6)
colo<-c("blue","red","green")
mplot<-cbind(imdfa_cf$b,parm_cf[,1],parm_mF_T[,1])
colnames(mplot)<-c("DFA","mFilter: plot=F","mFilter: plot=T")
plot_title<-"Real-time CF-filters: DFA (blue) vs. mFilter (red and green)"
freq_axe<-paste("Lag ",0:(len-1),sep="")
title_more<-colnames(mplot)
mplot_func(mplot,freq_axe,plot_title,title_more,insamp,colo)
invisible(dev.off())


###################################################
### code chunk number 294: z_CF_us_real_log_gdp.pdf
###################################################
  file = paste("z_CF_us_real_log_gdp", sep = "")
  cat("\\begin{figure}[H]")
  cat("\\begin{center}")
  cat("\\includegraphics[height=4in, width=6in]{", file, "}\n",sep = "")
  cat("\\caption{Real-time filter coefficients: DFA (blue) vs. mFilter with root=F (red) and root=T (green)", sep = "")
  cat("\\label{z_CF_us_real_log_gdp}}", sep = "")
  cat("\\end{center}")
  cat("\\end{figure}")


###################################################
### code chunk number 295: Replication.Rnw:2337-2359
###################################################
# Coefficients of symmetric filter (truncated at length 100000)
ord<-100000
b<-0:ord
b[1+1:ord]<-(sin((1:ord)*2*pi/len1)-sin((1:ord)*2*pi/len2))/(pi*(1:ord))
b[1]<-2/len1-2/len2
# Real-time filter based on for- and backcasts
b_finite<-b[1:len]
# The lag-0 coefficient is augmented by forecasts
b_finite[1]<-b_finite[1]+sum(b[2:ord])
# The lag-len coefficient is augmenetd by backcasts
b_finite[len]<-b_finite[len]+sum(b[(len+1):ord])
# Compare DFA and model-based coefficients
file = paste("z_CF_us_real_log_gdp_fb.pdf", sep = "")
pdf(file = paste(path.out,file,sep=""), paper = "special", width = 6, height = 6)
colo<-c("red","blue")
mplot<-cbind(b_finite,imdfa_cf$b)
plot_title<-"Real-time CF-filters: Forecast/backcast (red) vs. DFA (blue)"
freq_axe<-rep(NA,len)
freq_axe[1]<-0
freq_axe[(1:6)*len/6]<-paste("Lag ",as.integer(1+(1:6)*len/6),sep="")
mplot_func(mplot,freq_axe,plot_title,title_more,insamp,colo)
invisible(dev.off())


###################################################
### code chunk number 296: z_CF_us_real_log_gdp_fb.pdf
###################################################
  file = paste("z_CF_us_real_log_gdp_fb", sep = "")
  cat("\\begin{figure}[H]")
  cat("\\begin{center}")
  cat("\\includegraphics[height=4in, width=6in]{", file, "}\n",sep = "")
  cat("\\caption{Real-time filter coefficients: model-based approach (red) vs. DFA (blue)", sep = "")
  cat("\\label{z_CF_us_real_log_gdp_fb}}", sep = "")
  cat("\\end{center}")
  cat("\\end{figure}")


###################################################
### code chunk number 297: Replication.Rnw:2373-2408
###################################################
# Filter length
L<-50
weight_func<-weight_func_cf
K<-nrow(weight_func)-1
# Default-settings for DFA
source(file=paste(path.pgm,"control_default.r",sep=""))
# Filter constraints
i1<-T
i2<-F
# We have to specify the level-constraint
#   Real-time filter must equal target-Gamma in frequency zero
weight_constraint<-Gamma_cf[1]
# Proceed to estimation

imdfa_cf_L<-mdfa_analytic(L,lambda,weight_func_cf,Lag,Gamma_cf,eta,cutoff,
                        i1,i2,weight_constraint,lambda_cross,lambda_decay,
                        lambda_smooth,lin_eta,shift_constraint,grand_mean,
                        b0_H0,c_eta,weight_structure,
                        white_noise,synchronicity,lag_mat,troikaner)
# Alternative (identical) context-specific estimation: 
imdfa_cf_L<-MDFA_mse_constraint(L,weight_func_cf,Lag,Gamma_cf,i1,i2,weight_constraint,
                                shift_constraint)$mdfa_obj

gamma_dfa<-as.vector(imdfa_cf_L$b)
#--------------
# Compute filter according to cffilter
# We provide an arbitrary input series of length L
# We set root=T
x_cf_L_T<-mFilter(1:L,filter="CF",pu=len2,pl=len1,root=T,
                        drift=F, nfix=NULL,theta=1)
gamma_cf_L_T<-x_cf_L_T$fmatrix[,1]
# Here we set root=F
x_cf_L_F<-mFilter(1:L,filter="CF",pu=len2,pl=len1,root=F,
                        drift=F, nfix=NULL,theta=1)
gamma_cf_L_F<-x_cf_L_F$fmatrix[,1]


###################################################
### code chunk number 298: Replication.Rnw:2411-2424
###################################################
# Filter the data
dfa_cycle<-cff_cycle_T<-cff_cycle_F<-x
for (j in L:len)
{
# DFA  
  dfa_cycle[j]<-gamma_dfa%*%x[j:(j-L+1)]
# mFilter, root=T
  cff_cycle_T[j]<-gamma_cf_L_T%*%x[j:(j-L+1)]
# mFilter, root=F
  cff_cycle_F[j]<-gamma_cf_L_F%*%x[j:(j-L+1)]
}
# Skip initial values
dfa_cycle[1:L]<-cff_cycle_T[1:L]<-cff_cycle_F[1:L]<-NA


###################################################
### code chunk number 299: Replication.Rnw:2427-2448
###################################################
#-------------
# Plot the filtered outputs
file = paste("z_HP_us_real_log_gdp_cf_out.pdf", sep = "")
pdf(file = paste(path.out,file,sep=""), paper = "special", 
    width = 6, height = 6)
# Plots: filter coefficients and series
insamp<-1.e+99
mplot<-scale(cbind(dfa_cycle,cff_cycle_T,cff_cycle_F,
                   x_cf$cycle))
plot_title<-"CF real-time cycle: DFA (blue) and mFilter root=T (red) and 
root=F (green): all standardized"
ymin<-min(mplot,na.rm=T)
ymax<-max(mplot,na.rm=T)
plot(mplot[,2],col="red",xlab="",ylab="",main=plot_title,type="l",
     ylim=c(ymin,ymax))
nberShade()
lines(mplot[,2],col="red")
lines(mplot[,1],col="blue") 
lines(mplot[,3],col="green") 
#lines(mplot[,4],col="black") 
invisible(dev.off())


###################################################
### code chunk number 300: z_HP_us_real_log_gdp_cf_out.pdf
###################################################
  file = paste("z_HP_us_real_log_gdp_cf_out", sep = "")
  cat("\\begin{figure}[H]")
  cat("\\begin{center}")
  cat("\\includegraphics[height=4in, width=6in]{", file, "}\n",sep = "")
  cat("\\caption{CF real-time cycle estimates: DFA (blue), mFilter with unit-root (red) and mFilter without unit root (green). All filter outputs are standardized for ease of visual inspection", sep = "")
  cat("\\label{z_HP_us_real_log_gdp_cf_out}}", sep = "")
  cat("\\end{center}")
  cat("\\end{figure}")


###################################################
### code chunk number 301: Replication.Rnw:2462-2477
###################################################
# Plot the filtered outputs
file = paste("z_HP_us_real_log_gdp_cf_cycle.pdf", sep = "")
pdf(file = paste(path.out,file,sep=""), paper = "special", 
    width = 6, height = 6)
# Plots: filter coefficients and series
insamp<-1.e+99
mplot<-as.matrix(x_cf$cycle)
plot_title<-"Cycle as computed by cffilter"
ymin<-min(mplot,na.rm=T)
ymax<-max(mplot,na.rm=T)
plot(mplot[,1],col="black",xlab="",ylab="",main=plot_title,type="l",
     ylim=c(ymin,ymax))
nberShade()
lines(mplot[,1],col="black") 
invisible(dev.off())


###################################################
### code chunk number 302: z_HP_us_real_log_gdp_cf_cycle.pdf
###################################################
  file = paste("z_HP_us_real_log_gdp_cf_cycle", sep = "")
  cat("\\begin{figure}[H]")
  cat("\\begin{center}")
  cat("\\includegraphics[height=4in, width=6in]{", file, "}\n",sep = "")
  cat("\\caption{Christiano Fitzgerald cycle as computed by function mFilter", sep = "")
  cat("\\label{z_HP_us_real_log_gdp_cf_cycle}}", sep = "")
  cat("\\end{center}")
  cat("\\end{figure}")


###################################################
### code chunk number 303: Replication.Rnw:2508-2525
###################################################
file = paste("z_amp_shift_dfa_mse_cf.pdf", sep = "")
pdf(file = paste(path.out,file,sep=""), paper = "special", width = 6, height = 6)
omega_k<-pi*(0:K)/K
amp_mse<-abs(imdfa_cf_L$trffkt)
shift_mse<-shift_forecast<-Arg(imdfa_cf_L$trffkt)/omega_k
shift_mse[which(shift_mse<(-1))]<-NA
mplot<-cbind(amp_mse,shift_mse)
mplot[1,1:2]<-NA
dimnames(mplot)[[2]]<-c("Amplitude MSE","Time-shift MSE")
ax<-rep(NA,nrow(mplot))
ax[1+(0:6)*((nrow(mplot)-1)/6)]<-c(0,"pi/6","2pi/6","3pi/6","4pi/6","5pi/6","pi")
plot_title<-"Amplitude and time-shift CF (MSE) real-time filter"
insamp<-1.e+90
title_more<-dimnames(mplot)[[2]]
colo<-c("blue","red")
mplot_func(mplot, ax, plot_title, title_more, insamp, colo)
invisible(dev.off())


###################################################
### code chunk number 304: z_amp_shift_dfa_mse_cf.pdf
###################################################
  file = paste("z_amp_shift_dfa_mse_cf", sep = "")
  cat("\\begin{figure}[H]")
  cat("\\begin{center}")
  cat("\\includegraphics[height=4in, width=4in]{", file, "}\n",sep = "")
  cat("\\caption{Amplitude (blue) and time-shift (red) functions of CF MSE real-time filter: time-shifts smaller than -1 are skipped", sep = "")
  cat("\\label{z_amp_shift_dfa_mse_cf}}", sep = "")
  cat("\\end{center}")
  cat("\\end{figure}")


###################################################
### code chunk number 305: Replication.Rnw:2545-2573
###################################################
# Filter length
L<-50
weight_func<-weight_func_cf 
K<-nrow(weight_func)-1

source(file=paste(path.pgm,"control_default.r",sep=""))
# Filter constraints
i1<-T
i2<-F
Lag<--4
lambda<-10
eta<-1
cutoff<-2*pi/len1
# We have to specify the level-constraint
#   Real-time filter must equal target-Gamma in frequency zero
weight_constraint<-Gamma_cf[1]
# Proceed to estimation

imdfa_cf_L_cust<-mdfa_analytic(L,lambda,weight_func_cf,Lag,Gamma_cf,eta,cutoff,
                        i1,i2,weight_constraint,lambda_cross,lambda_decay,
                        lambda_smooth,lin_eta,shift_constraint,grand_mean,
                        b0_H0,c_eta,weight_structure,
                        white_noise,synchronicity,lag_mat,troikaner)

# Alternative (identical) context-specific estimation: 
imdfa_cf_L_cust<-MDFA_cust_constraint(L,weight_func_cf,Lag,Gamma_cf,cutoff,
              lambda,eta,i1,i2,weight_constraint,shift_constraint)$mdfa_obj



###################################################
### code chunk number 306: Replication.Rnw:2620-2646
###################################################
gamma_dfa_cust<-as.vector(imdfa_cf_L_cust$b)
dfa_cycle_cust<-x
for (j in L:len)
{
  dfa_cycle_cust[j]<-gamma_dfa_cust%*%x[j:(j-L+1)]
}
# Skip initial values
dfa_cycle_cust[1:L]<-NA
#-------------
# Plot the filtered outputs
file = paste("z_HP_us_real_log_gdp_cf_out_cust.pdf", sep = "")
pdf(file = paste(path.out,file,sep=""), paper = "special", 
    width = 6, height = 6)
par(mfrow=c(1,1))
# Plots: filter coefficients and series
insamp<-1.e+99
mplot<-scale(cbind(dfa_cycle,dfa_cycle_cust))
plot_title<-"MSE-nowcast (blue) vs. customized-forecast (black)"
ymin<-min(mplot,na.rm=T)
ymax<-max(mplot,na.rm=T)
plot(mplot[,2],col="black",xlab="",ylab="",main=plot_title,type="l",
     ylim=c(ymin,ymax))
nberShade()
lines(mplot[,2],col="black")
lines(mplot[,1],col="blue") 
invisible(dev.off())


###################################################
### code chunk number 307: z_HP_us_real_log_gdp_cf_out_cust.pdf
###################################################
  file = paste("z_HP_us_real_log_gdp_cf_out_cust", sep = "")
  cat("\\begin{figure}[H]")
  cat("\\begin{center}")
  cat("\\includegraphics[height=4in, width=6in]{", file, "}\n",sep = "")
  cat("\\caption{CF real-time cycle estimates: DFA MSE-nowcast (blue) vs. DFA customized-forecast (black): both standardized for ease of visual inspection", sep = "")
  cat("\\label{z_HP_us_real_log_gdp_cf_out_cust}}", sep = "")
  cat("\\end{center}")
  cat("\\end{figure}")


###################################################
### code chunk number 308: dfa_ms
###################################################
head(mdfa_analytic)


###################################################
### code chunk number 309: exercise_dfa_ms_4
###################################################
set.seed(1)
len<-120
eps1<-arima.sim(list(ar=0.1),n=len)
eps2<-arima.sim(list(ar=0.1),n=len)
# Define the data-matrix:
# The first column must be the target series. 
data_matrix<-cbind(eps1,eps1,eps2)


###################################################
### code chunk number 310: exercise_dfa_ms_4
###################################################
# Determine the in-sample period (full in sample)
insample<-nrow(data_matrix)
# Compute the DFT: d=0 for stationary data (default settings)
weight_func<-spec_comp(insample, data_matrix, d)$weight_func
# Target
Gamma<-(1:nrow(weight_func))<=(nrow(weight_func)-1)/6+1


###################################################
### code chunk number 311: exercise_dfa_ms_4
###################################################
L<-12
# Source the default (MSE-) parameter settings
source(file=paste(path.pgm,"control_default.r",sep=""))
troikaner<-T
# Estimate filter coefficients: MSE
mdfa_obj<-mdfa_analytic(L,lambda,weight_func,Lag,Gamma,eta,cutoff,i1,i2,weight_constraint,lambda_cross,lambda_decay,lambda_smooth,lin_eta,shift_constraint,grand_mean,b0_H0,c_eta,weight_structure,white_noise,synchronicity,lag_mat,troikaner)


###################################################
### code chunk number 312: exercise_dfa_ms_4
###################################################
# Estimate filter coefficients: Decay-regularization
lambda_decay[2]<-0.5
lambda_decay[1]<-0.5
mdfa_obj_decay<-mdfa_analytic(L,lambda,weight_func,Lag,Gamma,eta,cutoff,i1,i2,weight_constraint,lambda_cross,lambda_decay,lambda_smooth,lin_eta,shift_constraint,grand_mean,b0_H0,c_eta,weight_structure,white_noise,synchronicity,lag_mat,troikaner)


###################################################
### code chunk number 313: exercise_mdfa_ms_reg
###################################################
source(paste(path.pgm,"mplot_func.r",sep=""))
file = paste("z_mdfa_ms_reg_decay.pdf", sep = "")
pdf(file = paste(path.out,file,sep=""), paper = "special", width = 6, height = 6)
par(mfrow=c(1,2))
mplot <- cbind(mdfa_obj$b[,1],mdfa_obj_decay$b[,1])
ax <- Lag + 0 : (L-1)
colo<-rainbow(ncol(mplot))
insamp<-1.e+90
plot_title <- "Filter Coefficients Series 1"
title_more<-c(paste("lambda_decay=",0,",",0,sep=""),paste("lambda_decay=",lambda_decay[1],",",lambda_decay[2],sep=""))
mplot_func(mplot, ax, plot_title, title_more, insamp, colo)
mplot <- cbind(mdfa_obj$b[,2],mdfa_obj_decay$b[,2])
ax <- Lag + 0 : (L-1)
plot_title <- "Filter Coefficients Series 2"
title_more<-c(paste("lambda_decay=",0,",",0,sep=""),paste("lambda_decay=",lambda_decay[1],",",lambda_decay[2],sep=""))
mplot_func(mplot, ax, plot_title, title_more, insamp, colo)
dev.off()



###################################################
### code chunk number 314: z_mdfa_ms_reg_decay
###################################################
  file = paste("z_mdfa_ms_reg_decay", sep = "")
  cat("\\begin{figure}[H]")
  cat("\\begin{center}")
  cat("\\includegraphics[height=3in, width=6in]{", file, "}\n",sep = "")
  cat("\\caption{Filter Coefficients: original unregularized (red) vs. decay-regularization (cyan) for series 1 (left) and 2 (right) of the bivariate design, lambda-decay=(0.5,0.5)", sep = "")
  cat("\\label{z_mdfa_ms_reg_decay}}", sep = "")
  cat("\\end{center}")
  cat("\\end{figure}")


###################################################
### code chunk number 315: exercise_dfa_ms_4
###################################################
# Estimate filter coefficients: Decay-regularization
lambda_decay_1<-0.5
lambda_decay_2<-0.1*0:9
lambda_decay_2<-c(lambda_decay_2,lambda_decay_2[length(lambda_decay_2)]+0.01*0:9,0.995,0.999,1)


###################################################
### code chunk number 316: exercise_dfa_ms_4
###################################################
b_mat<-matrix(nrow=L,ncol=(ncol(weight_func)-1)*length(lambda_decay_2))
edof_vec<-rep(NA,length(lambda_decay_1))
for (i in 1:length(lambda_decay_2))#i<-1
{
  lambda_decay<-c(lambda_decay_1,lambda_decay_2[i])
  mdfa_obj_decay<-mdfa_analytic(L,lambda,weight_func,Lag,Gamma,eta,cutoff,i1,i2,
                                weight_constraint,lambda_cross,lambda_decay,lambda_smooth,lin_eta,shift_constraint,grand_mean,b0_H0,c_eta,weight_structure,white_noise,synchronicity,lag_mat,troikaner)
  b_mat[,(i-1)*(ncol(weight_func)-1)+1:(ncol(weight_func)-1)]<-mdfa_obj_decay$b
  edof_vec[i]<-mdfa_obj_decay$freezed_degrees_new
}


###################################################
### code chunk number 317: exercise_mdfa_ms_reg
###################################################
file = paste("z_mdfa_ms_reg_decay_screen_decay_1.pdf", sep = "")
pdf(file = paste(path.out,file,sep=""), paper = "special", width = 6, height = 6)
par(mfrow=c(1,2))
mplot <- b_mat[,1+(0:(length(lambda_decay_2)-1)*(ncol(weight_func)-1))]
ax <- Lag + 0 : (L-1)
colo<-rainbow(ncol(mplot))
insamp<-1.e+90
plot_title <- "Series 1"
title_more<-paste("lambda_decay=(",lambda_decay_1,",",lambda_decay_2,"), edof=",round(edof_vec,1),sep="")
mplot_func(mplot, ax, plot_title, title_more, insamp, colo)
mplot <- b_mat[,2+(0:(length(lambda_decay_2)-1)*(ncol(weight_func)-1))]
ax <- Lag + 0 : (L-1)
plot_title <- "Series 2"
mplot_func(mplot, ax, plot_title, title_more, insamp, colo)
dev.off()



###################################################
### code chunk number 318: z_mdfa_ms_reg_decay
###################################################
  file = paste("z_mdfa_ms_reg_decay_screen_decay_1", sep = "")
  cat("\\begin{figure}[H]")
  cat("\\begin{center}")
  cat("\\includegraphics[height=4in, width=6in]{", file, "}\n",sep = "")
  cat("\\caption{Filter Coefficients: effect of shape-parameter (grid of points -0.1, 0, 0.1, 0.2, ..., 1.1) for fixed strength parameter (0.5), series 1 (left) and 2 (right)", sep = "")
  cat("\\label{z_mdfa_ms_reg_decay_screen_decay_1}}", sep = "")
  cat("\\end{center}")
  cat("\\end{figure}")


###################################################
### code chunk number 319: exercise_dfa_ms_4
###################################################
# Estimate filter coefficients: Decay-regularization
lambda_decay_1<-0.5
lambda_decay_2<-0.1*-1:11


###################################################
### code chunk number 320: exercise_dfa_ms_4
###################################################
b_mat<-matrix(nrow=L,ncol=(ncol(weight_func)-1)*length(lambda_decay_2))
edof_vec<-rep(NA,length(lambda_decay_2))
for (i in 1:length(lambda_decay_2))
{
  lambda_decay<-c(lambda_decay_1,lambda_decay_2[i])
  mdfa_obj_decay<-mdfa_analytic(L,lambda,weight_func,Lag,Gamma,eta,cutoff,i1,i2,weight_constraint,lambda_cross,lambda_decay,lambda_smooth,lin_eta,shift_constraint,grand_mean,b0_H0,c_eta,weight_structure,white_noise,synchronicity,lag_mat,troikaner)
  b_mat[,(i-1)*(ncol(weight_func)-1)+1:(ncol(weight_func)-1)]<-mdfa_obj_decay$b
  edof_vec[i]<-mdfa_obj_decay$freezed_degrees_new
}


###################################################
### code chunk number 321: exercise_mdfa_ms_reg
###################################################
file = paste("z_mdfa_ms_reg_decay_screen_decay_2.pdf", sep = "")
pdf(file = paste(path.out,file,sep=""), paper = "special", width = 6, height = 6)
par(mfrow=c(1,2))
mplot <- b_mat[,1+(0:(length(lambda_decay_2)-1)*(ncol(weight_func)-1))]
ax <- Lag + 0 : (L-1)
colo<-rainbow(ncol(mplot))
insamp<-1.e+90
plot_title <- "Filter Coefficients Series 1"
title_more<-paste("lambda_decay=(",lambda_decay_1,",",lambda_decay_2,"), edof=",round(edof_vec,1),sep="")
mplot_func(mplot, ax, plot_title, title_more, insamp, colo)
mplot <- b_mat[,2+(0:(length(lambda_decay_2)-1)*(ncol(weight_func)-1))]
ax <- Lag + 0 : (L-1)
plot_title <- "Filter Coefficients Series 2"
mplot_func(mplot, ax, plot_title, title_more, insamp, colo)
dev.off()



###################################################
### code chunk number 322: z_mdfa_ms_reg_decay
###################################################
  file = paste("z_mdfa_ms_reg_decay_screen_decay_2", sep = "")
  cat("\\begin{figure}[H]")
  cat("\\begin{center}")
  cat("\\includegraphics[height=4in, width=6in]{", file, "}\n",sep = "")
  cat("\\caption{Filter Coefficients: effect of strength-parameter (grid of points -0.1,0, 0.1, 0.2, ..., 1.1) for fixed shape parameter (0.5), series 1 (left) and 2 (right)", sep = "")
  cat("\\label{z_mdfa_ms_reg_decay_screen_decay_2}}", sep = "")
  cat("\\end{center}")
  cat("\\end{figure}")


###################################################
### code chunk number 323: exercise_dfa_ms_4
###################################################
# Estimate filter coefficients: Decay-regularization
lambda_decay_1<-0.5
lambda_decay_2<-c(0,0.5,1)


###################################################
### code chunk number 324: exercise_dfa_ms_4
###################################################
# Source the default (MSE-) parameter settings
source(file=paste(path.pgm,"control_default.r",sep=""))
troikaner<-T
# Unconstrained designs: with and without regularization
b_mat_unrestricted<-matrix(nrow=L,ncol=(ncol(weight_func)-1)*length(lambda_decay_2))
edof_vec_unrestricted<-rep(NA,length(lambda_decay_2))
for (i in 1:length(lambda_decay_2))
{
  lambda_decay<-c(lambda_decay_1,lambda_decay_2[i])
  mdfa_obj_decay<-mdfa_analytic(L,lambda,weight_func,Lag,Gamma,eta,cutoff,i1,i2,weight_constraint,lambda_cross,lambda_decay,lambda_smooth,lin_eta,shift_constraint,grand_mean,b0_H0,c_eta,weight_structure,white_noise,synchronicity,lag_mat,troikaner)
  b_mat_unrestricted[,(i-1)*(ncol(weight_func)-1)+1:(ncol(weight_func)-1)]<-mdfa_obj_decay$b
  edof_vec_unrestricted[i]<-mdfa_obj_decay$freezed_degrees_new
}
# Impose level-constraint
i1<-T
# Both transfer functions must equal one in frequency zero
weight_constraint<-c(1,1)
b_mat_restricted<-matrix(nrow=L,ncol=(ncol(weight_func)-1)*length(lambda_decay_2))
edof_vec_restricted<-rep(NA,length(lambda_decay_2))
for (i in 1:length(lambda_decay_2))
{
  lambda_decay<-c(lambda_decay_1,lambda_decay_2[i])
  mdfa_obj_decay<-mdfa_analytic(L,lambda,weight_func,Lag,Gamma,eta,cutoff,i1,i2,weight_constraint,lambda_cross,lambda_decay,lambda_smooth,lin_eta,shift_constraint,grand_mean,b0_H0,c_eta,weight_structure,white_noise,synchronicity,lag_mat,troikaner)
  b_mat_restricted[,(i-1)*(ncol(weight_func)-1)+1:(ncol(weight_func)-1)]<-mdfa_obj_decay$b
  edof_vec_restricted[i]<-mdfa_obj_decay$freezed_degrees_new
}


###################################################
### code chunk number 325: exercise_mdfa_ms_reg
###################################################
file = paste("z_mdfa_ms_reg_decay_screen_decay_2_rest.pdf", sep = "")
pdf(file = paste(path.out,file,sep=""), paper = "special", width = 6, height = 6)
par(mfrow=c(2,2))
mplot <- b_mat_unrestricted[,1+(0:(length(lambda_decay_2)-1)*(ncol(weight_func)-1))]
ax <- Lag + 0 : (L-1)
colo<-rainbow(ncol(mplot))
insamp<-1.e+90
plot_title <- "Series 1: unrestricted"
title_more<-paste("lambda=(",lambda_decay_1,",",lambda_decay_2,"), edof=",round(edof_vec_unrestricted,1),sep="")
mplot_func(mplot, ax, plot_title, title_more, insamp, colo)
mplot <- b_mat_unrestricted[,2+(0:(length(lambda_decay_2)-1)*(ncol(weight_func)-1))]
ax <- Lag + 0 : (L-1)
plot_title <- "Series 2: unrestricted"
mplot_func(mplot, ax, plot_title, title_more, insamp, colo)
mplot <- b_mat_restricted[,1+(0:(length(lambda_decay_2)-1)*(ncol(weight_func)-1))]
ax <- Lag + 0 : (L-1)
colo<-rainbow(ncol(mplot))
insamp<-1.e+90
plot_title <- "Series 1: restricted"
title_more<-paste("lambda_decay=(",lambda_decay_1,",",lambda_decay_2,"), edof=",round(edof_vec_restricted,1),sep="")
mplot_func(mplot, ax, plot_title, title_more, insamp, colo)
mplot <- b_mat_restricted[,2+(0:(length(lambda_decay_2)-1)*(ncol(weight_func)-1))]
ax <- Lag + 0 : (L-1)
plot_title <- "Series 2: restricted"
mplot_func(mplot, ax, plot_title, title_more, insamp, colo)
dev.off()



###################################################
### code chunk number 326: z_mdfa_ms_reg_decay_screen_decay_2_rest
###################################################
  file = paste("z_mdfa_ms_reg_decay_screen_decay_2_rest", sep = "")
  cat("\\begin{figure}[H]")
  cat("\\begin{center}")
  cat("\\includegraphics[height=6in, width=6in]{", file, "}\n",sep = "")
  cat("\\caption{Filter Coefficients: effect of constraints and strength-parameter (0, 0.5, 1) for fixed shape parameter (0.5), series 1 (left) and 2 (right); unconstrained design (top) vs. constrained design (bottom)", sep = "")
  cat("\\label{z_mdfa_ms_reg_decay_screen_decay_2_rest}}", sep = "")
  cat("\\end{center}")
  cat("\\end{figure}")


###################################################
### code chunk number 327: exercise_dfa_ms_4
###################################################
# Estimate filter coefficients: Decay-regularization
#lambda_smooth_vec<-0.1*-1:11
lambda_smooth_vec<-0.1*0:9
lambda_smooth_vec<-c(lambda_smooth_vec,lambda_smooth_vec[length(lambda_smooth_vec)]+0.01*0:9,0.995,0.999,1)


###################################################
### code chunk number 328: exercise_dfa_ms_4
###################################################
# Source the default (MSE-) parameter settings
source(file=paste(path.pgm,"control_default.r",sep=""))
troikaner<-T
b_mat<-matrix(nrow=L,ncol=(ncol(weight_func)-1)*length(lambda_smooth_vec))
edof_vec<-rep(NA,length(lambda_smooth_vec))
for (i in 1:length(lambda_smooth_vec))
{
  lambda_smooth<-lambda_smooth_vec[i]
  mdfa_obj<-mdfa_analytic(L,lambda,weight_func,Lag,Gamma,eta,cutoff,i1,i2,weight_constraint,lambda_cross,lambda_decay,lambda_smooth,lin_eta,shift_constraint,grand_mean,b0_H0,c_eta,weight_structure,white_noise,synchronicity,lag_mat,troikaner)
  b_mat[,(i-1)*(ncol(weight_func)-1)+1:(ncol(weight_func)-1)]<-mdfa_obj$b
  edof_vec[i]<-mdfa_obj$freezed_degrees_new
}


###################################################
### code chunk number 329: exercise_mdfa_ms_reg
###################################################
file = paste("z_mdfa_ms_reg_smooth_1.pdf", sep = "")
pdf(file = paste(path.out,file,sep=""), paper = "special", width = 6, height = 6)
par(mfrow=c(1,2))
mplot <- b_mat[,1+(0:(length(lambda_smooth_vec)-1)*(ncol(weight_func)-1))]
ax <- Lag + 0 : (L-1)
colo<-rainbow(ncol(mplot))
insamp<-1.e+90
plot_title <- "Series 1"
title_more<-paste("lambda_smooth=",lambda_smooth_vec," edof=",round(edof_vec,1),sep="")
mplot_func(mplot, ax, plot_title, title_more, insamp, colo)
mplot <- b_mat[,2+(0:(length(lambda_smooth_vec)-1)*(ncol(weight_func)-1))]
ax <- Lag + 0 : (L-1)
plot_title <- "Series 2"
mplot_func(mplot, ax, plot_title, title_more, insamp, colo)
dev.off()



###################################################
### code chunk number 330: z_mdfa_ms_reg_smooth_1
###################################################
  file = paste("z_mdfa_ms_reg_smooth_1", sep = "")
  cat("\\begin{figure}[H]")
  cat("\\begin{center}")
  cat("\\includegraphics[height=4in, width=6in]{", file, "}\n",sep = "")
  cat("\\caption{Filter Coefficients: effect of smoothness regularization for grid-points -0.1, 0, 0.1, 0.2, ..., 1.1: series 1 (left) and 2 (right)", sep = "")
  cat("\\label{z_mdfa_ms_reg_smooth_1}}", sep = "")
  cat("\\end{center}")
  cat("\\end{figure}")


###################################################
### code chunk number 331: exercise_dfa_ms_4
###################################################
# Estimate filter coefficients: Decay-regularization
#lambda_cross_vec<-0.1*0:9
lambda_cross_vec<-0.1*0:9
lambda_cross_vec<-c(lambda_cross_vec,lambda_cross_vec[length(lambda_cross_vec)]+0.01*0:9,0.995,0.999,1)


###################################################
### code chunk number 332: exercise_dfa_ms_4
###################################################
# Source the default (MSE-) parameter settings
source(file=paste(path.pgm,"control_default.r",sep=""))
troikaner<-T
b_mat<-matrix(nrow=L,ncol=(ncol(weight_func)-1)*length(lambda_cross_vec))
edof_vec<-rep(NA,length(lambda_cross_vec))
for (i in 1:length(lambda_cross_vec))
{
  lambda_cross<-lambda_cross_vec[i]
  mdfa_obj<-mdfa_analytic(L,lambda,weight_func,Lag,Gamma,eta,cutoff,i1,i2,weight_constraint,lambda_cross,lambda_decay,lambda_smooth,lin_eta,shift_constraint,grand_mean,b0_H0,c_eta,weight_structure,white_noise,synchronicity,lag_mat,troikaner)
  b_mat[,(i-1)*(ncol(weight_func)-1)+1:(ncol(weight_func)-1)]<-mdfa_obj$b
  edof_vec[i]<-mdfa_obj$freezed_degrees_new
}


###################################################
### code chunk number 333: exercise_mdfa_ms_reg
###################################################
file = paste("z_mdfa_ms_reg_cross_1.pdf", sep = "")
pdf(file = paste(path.out,file,sep=""), paper = "special", width = 6, height = 6)
par(mfrow=c(1,2))
mplot <- b_mat[,1+(0:(length(lambda_cross_vec)-1)*(ncol(weight_func)-1))]
ax <- Lag + 0 : (L-1)
colo<-rainbow(ncol(mplot))
insamp<-1.e+90
plot_title <- "Series 1"
title_more<-paste("lambda_cross=",lambda_cross_vec," edof=",round(edof_vec,1),sep="")
mplot_func(mplot, ax, plot_title, title_more, insamp, colo)
mplot <- b_mat[,2+(0:(length(lambda_smooth_vec)-1)*(ncol(weight_func)-1))]
ax <- Lag + 0 : (L-1)
plot_title <- "Series 2"
mplot_func(mplot, ax, plot_title, title_more, insamp, colo)
dev.off()



###################################################
### code chunk number 334: z_mdfa_ms_reg_cross_1
###################################################
  file = paste("z_mdfa_ms_reg_cross_1", sep = "")
  cat("\\begin{figure}[H]")
  cat("\\begin{center}")
  cat("\\includegraphics[height=4in, width=6in]{", file, "}\n",sep = "")
  cat("\\caption{Filter Coefficients: effect of cross-sectional regularization for grid-points -0.1, 0, 0.1, 0.2, ..., 1.1: series 1 (left) and 2 (right)", sep = "")
  cat("\\label{z_mdfa_ms_reg_cross_1}}", sep = "")
  cat("\\end{center}")
  cat("\\end{figure}")


###################################################
### code chunk number 335: z_box_plot_emp_per_perf_inout_1.pdf
###################################################
  file = paste("z_box_plot_emp_per_perf_inout_1", sep = "")
  cat("\\begin{figure}[H]")
  cat("\\begin{center}")
  cat("\\includegraphics[height=6in, width=6in]{", file, "}\n",sep = "")
  cat("\\caption{Empirical distributions
  of Curvature and Peak-Correlation of best theoretical MSE (red), empirical MSE (yellow), balanced customized (green),
  unbalanced smoothness (cyan) and unbalanced timeliness (blue) filters. All empirical filters are based on the periodogram:
  in-sample (left plots) and out-of-sample (right plots) for a1=-0.9", sep = "")
  cat("\\label{z_box_plot_emp_per_perf_inout_1}}", sep = "")
  cat("\\end{center}")
  cat("\\end{figure}")


###################################################
### code chunk number 336: z_box_plot_emp_per_perf_mse_inout_1.pdf
###################################################
  file = paste("z_box_plot_emp_per_perf_mse_inout_1", sep = "")
  cat("\\begin{figure}[H]")
  cat("\\begin{center}")
  cat("\\includegraphics[height=3in, width=6in]{", file, "}\n",sep = "")
  cat("\\caption{Empirical distributions
  of Sample MSEs of best theoretical MSE (red), empirical MSE (yellow), balanced customized (green),
  unbalanced smoothness (cyan) and unbalanced timeliness (blue) filters. All empirical filters are based on the periodogram:
  in-sample (left plots) and out-of-sample (right plots) for a1=-0.9", sep = "")
  cat("\\label{z_box_plot_emp_per_perf_mse_inout_1}}", sep = "")
  cat("\\end{center}")
  cat("\\end{figure}")


###################################################
### code chunk number 337: z_box_plot_emp_per_perf_inout_3.pdf
###################################################
  file = paste("z_box_plot_emp_per_perf_inout_3", sep = "")
  cat("\\begin{figure}[H]")
  cat("\\begin{center}")
  cat("\\includegraphics[height=6in, width=6in]{", file, "}\n",sep = "")
  cat("\\caption{Empirical distributions
  of Curvature and Peak-Correlation of best theoretical MSE (red), empirical MSE (yellow), balanced customized (green),
  unbalanced smoothness (cyan) and unbalanced timeliness (blue) filters. All empirical filters are based on the periodogram:
  in-sample (left plots) and out-of-sample (right plots) for a1=0.9", sep = "")
  cat("\\label{z_box_plot_emp_per_perf_inout_3}}", sep = "")
  cat("\\end{center}")
  cat("\\end{figure}")


###################################################
### code chunk number 338: z_box_plot_emp_per_perf_mse_inout_3.pdf
###################################################
  file = paste("z_box_plot_emp_per_perf_mse_inout_3", sep = "")
  cat("\\begin{figure}[H]")
  cat("\\begin{center}")
  cat("\\includegraphics[height=3in, width=6in]{", file, "}\n",sep = "")
  cat("\\caption{Empirical distributions
  of  Sample MSEs of best theoretical MSE (red), empirical MSE (yellow), balanced customized (green),
  unbalanced smoothness (cyan) and unbalanced timeliness (blue) filters. All empirical filters are based on the periodogram:
  in-sample (left plots) and out-of-sample (right plots) for a1=0.9", sep = "")
  cat("\\label{z_box_plot_emp_per_perf_mse_inout_3}}", sep = "")
  cat("\\end{center}")
  cat("\\end{figure}")


