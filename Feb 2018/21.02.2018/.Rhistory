#   Note that if trade is stopped earlier (either by gain-pick or by next sign-change) then
#   we just use the latest perf available i.e. we look at min(i,last day of k-th trade) where i runs through all possible days after a sign-change
# Here is the most interesting outcome when periodicity<-10 (the results are dependent on the signal, of course)
#   Without gain-picking the performance generally degrades with the age of the trade
#   With gain-picking this is much less the case because the gain-pick generally occurs early in the trade if the threshold is small
#   This result explains, also, why small thresholds should be used
#   More interestingly, though, is the fact that the performance is maxed at stop-time<-periodicity/2+1:
#     This corresponds more or less to the time-shift of the filter i.e. this is an intuitively very appealing result in the presence of mean-reversion
stop_time<-as.integer(periodicity/2+1)
#stop_time<-6
for (j in 1:ncol(perf_sign))#j<-2
{
# With gain-picking
perf_mat<-perf_pick_list[[j]]
date_mat<-date_list[[j]]
asset_name<-paste(colnames(FX)[j],": with gain-pick",sep="")
par(mfrow=c(1,2))
perf_as_function_of_day_after_trade_func.obj<-perf_as_function_of_day_after_trade_func(perf_mat,date_mat,plot_T,asset_name,stop_time)
if (j==1)
{
perf_stop_mat_with_gain_pick<-perf_as_function_of_day_after_trade_func.obj$perf_stop_vec
market_exposure_with_gain_picking<-perf_as_function_of_day_after_trade_func.obj$market_exposure
} else
{
perf_stop_mat_with_gain_pick<-cbind(perf_stop_mat_with_gain_pick,perf_as_function_of_day_after_trade_func.obj$perf_stop_vec)
market_exposure_with_gain_picking<-c(market_exposure_with_gain_picking,perf_as_function_of_day_after_trade_func.obj$market_exposure)
}
# Without gain-picking
perf_mat<-perf_no_pick_list[[j]]
asset_name<-paste(colnames(FX)[j],": without gain-pick",sep="")
perf_as_function_of_day_after_trade_func.obj<-perf_as_function_of_day_after_trade_func(perf_mat,date_mat,plot_T,asset_name,stop_time)
if (j==1)
{
perf_stop_mat_without_gain_pick<-perf_as_function_of_day_after_trade_func.obj$perf_stop_vec
market_exposure_without_gain_picking<-perf_as_function_of_day_after_trade_func.obj$market_exposure
} else
{
perf_stop_mat_without_gain_pick<-cbind(perf_stop_mat_without_gain_pick,perf_as_function_of_day_after_trade_func.obj$perf_stop_vec)
market_exposure_without_gain_picking<-c(market_exposure_without_gain_picking,perf_as_function_of_day_after_trade_func.obj$market_exposure)
}
}
names(market_exposure_without_gain_picking)<-names(market_exposure_with_gain_picking)<-colnames(perf_stop_mat_without_gain_pick)<-colnames(perf_stop_mat_with_gain_pick)<-colnames(FX)
# Findings:
#   Stop-rule without gain-picking provides slightly more performance at cost of higher market exposure and smaller sharpe
# Trick: Impose full-weight (of trade) up to min(gain-pick,stop_time)
#        Impose half-weight (of trade) from min(gain-pick,stop_time) to stop-time
par(mfrow=c(1,2))
perf_all_without<-as.xts(apply(perf_stop_mat_without_gain_pick,1,mean))
sharpe_all_without<-sqrt(250)*mean(diff(perf_all_without),na.rm=T)/sqrt(var(diff(perf_all_without),na.rm=T))
mean_market_exposure_without_gain_picking<-round(100*mean(market_exposure_without_gain_picking),1)
plot(perf_all_without,main=paste("Aggregate without pick, weekday=",weekday,", lag_signal=",lag_signal,", stop-time=",stop_time,", sharpe=",round(sharpe_all_without,3),", exposure=",mean_market_exposure_without_gain_picking,"%",sep="")
)
perf_all_with<-as.xts(apply(perf_stop_mat_with_gain_pick,1,mean))
sharpe_all_with<-sqrt(250)*mean(diff(perf_all_with),na.rm=T)/sqrt(var(diff(perf_all_with),na.rm=T))
mean_market_exposure_with_gain_picking<-round(100*mean(market_exposure_with_gain_picking),1)
plot(perf_all_with,main=paste("Aggregate without pick, weekday=",weekday,", lag_signal=",lag_signal,", stop-time=",stop_time,", sharpe=",round(sharpe_all_with,3),", exposure=",mean_market_exposure_with_gain_picking,"%",sep="")
)
# Here the comparison of all four strategies
# 1. No gain-pick, no stop-time: top-left
# 2. gain-pick, no stop-time: top-right
# 3. No gain-pick, stop-time: bottom-left
# 4. gain-pick, stop-time: bottom-right
# Findings:
# a. Stop-time effect roughly equal to gain-picking: compare bottom-left and top-right
#     Slightly higher absolute return vs. slightly smaller sharpe vs. higher market exposure (but one could avoid some of the turmoils: Brexit, federal bank announcements)
# b. Combination of gain-pick and stop-time (bottom right)
#     Best in terms of sharpe and market exposure (stop-time alone (bottom-left) hast slightly higher absolute returns)
# c. The above findings with regards to relative performances of all four strategies remain true irrespective of weekday-effect
#     Weekday=T doubles performances when starting in 2010 (absolute returns and sharpe)
#     Weekday effect is no more relevant when starting in 2016
#     Weekday effect is very relevant when starting in 2017 (doubles performances, once again)
par(mfrow=c(2,2))
perf_no_pick_agg<-as.xts(apply(perf_sign,1,mean))
sharpe_no_pick_agg<-sqrt(250)*mean(diff(perf_no_pick_agg),na.rm=T)/sqrt(var(diff(perf_no_pick_agg),na.rm=T))
mean_exposure<-100
plot(perf_no_pick_agg,main=paste("Aggregate no pick, weekday=",weekday,", sign_rule=",sign_rule,", lag_signal=",lag_signal,", sharpe=",round(sharpe_no_pick_agg,3),", exposure=",mean_exposure,"%",sep=""))
perf_pick_agg<-as.xts(apply(perf_pick_mat,1,mean))
sharpe_pick_agg<-sqrt(250)*mean(diff(perf_pick_agg),na.rm=T)/sqrt(var(diff(perf_pick_agg),na.rm=T))
mean_exposure<-round(mean(exposure_vec),3)*100
plot(perf_pick_agg,main=paste("Aggregate with pick, weekday=",weekday,", sign_rule=",sign_rule,", lag_signal=",lag_signal,", sharpe=",round(sharpe_pick_agg,3),", exposure=",mean_exposure,"%",sep=""))
perf_all_without<-as.xts(apply(perf_stop_mat_without_gain_pick,1,mean))
sharpe_all_without<-sqrt(250)*mean(diff(perf_all_without),na.rm=T)/sqrt(var(diff(perf_all_without),na.rm=T))
mean_market_exposure_without_gain_picking<-round(100*mean(market_exposure_without_gain_picking),1)
plot(perf_all_without,main=paste("Aggregate without pick, weekday=",weekday,", sign_rule=",sign_rule,", lag_signal=",lag_signal,", stop-time=",stop_time,", sharpe=",round(sharpe_all_without,3),", exposure=",mean_market_exposure_without_gain_picking,"%",sep="")
)
perf_all_with<-as.xts(apply(perf_stop_mat_with_gain_pick,1,mean))
sharpe_all_with<-sqrt(250)*mean(diff(perf_all_with),na.rm=T)/sqrt(var(diff(perf_all_with),na.rm=T))
mean_market_exposure_with_gain_picking<-round(100*mean(market_exposure_with_gain_picking),1)
plot(perf_all_with,main=paste("Aggregate without pick, weekday=",weekday,", sign_rule=",sign_rule,", lag_signal=",lag_signal,", stop-time=",stop_time,", sharpe=",round(sharpe_all_with,3),", exposure=",mean_market_exposure_with_gain_picking,"%",sep="")
)
source('C:/wia_desktop/2018/Blog/Tutorials/Feb 2018/21.02.2018/gain_picking.R')
#--------------------------------------------------------------------
# Function gain_pick_func is in gain_picking.r
# data:
#   either sign-trading or weighted trading
#   with or without weekday effect
# Apply weekday effects as specified in sign_day_of_week:
#   This has a strong effect: doubling performances, either on long or short current sample, with or without picking or stop-rules
weekday<-T
# Trading rules: apply sign of filter or whole filter output (weight):
#   weight=T is interesting particularly towards sample end (2017/2018).
#   The rule is differentiable and one can formulate a corresponding MDFA-target
#   Trading costs: new trade each day in order to follow signal-weight (but that could be discretized)
#   Possibly huge effects at turmoils due to implicit squaring (trim signal in such a case)
sign_rule<-F
# If T then we omit filtering i.e. we can evaluate effect of gain-picking alone (without filter):
#   This is just for evaluation purposes: what is the added value of filter
#   Effect is strong (at least when periodicity=10) i.e. filter is very important
#   default is F
naked_gain_picking<-F
# Standard gain-pick threshold: 20 bp (note that mean absolute daily move is about 50bp)
# One could select threshold=0: perf are even better (for daily trading the movements are 'large' in comparison to spread; in contrast to intraday trading where threshold>20bP is required)
# Selecting threshold=-100 means that the condition is always immediately satisfied i.e. this is the performance
#   of first day after a sign change occurred
threshold<-0.002*periodicity/10
# This parameter affects the partitioning of perf (performances) into episodes specified by sign changes of signal
#   Note that perf is based on lagged signal, already. So lag_signal does not affect perf.
#   Instead, lag_signal affects gain-picking: starting at sign change (or later as specified by lag_signal) and ending at next sign change (or later as specified by lag_signal)
#   Any positive value is feasable (causality)
# Note that one uses the signal without weekday effects for perf with or without weekday
#   i.e. one uses the pure filter output without additional sign-changes depending on weekday
lag_signal<-1
plot_T<-T
gain_pick_main_obj<-gain_pick_main_func(weekday,trade_all_pairs_with_weekday.obj,trade_all_pairs_no_weekday.obj,naked_gain_picking,FX_mat,start_date,threshold,lag_signal,plot_T,sign_rule)
source('C:/wia_desktop/2018/Blog/Tutorials/Feb 2018/21.02.2018/perf_as_func_of_day_in_trade.R')
# Here is the most interesting outcome when periodicity<-10 (the results are dependent on the signal, of course)
#   Without gain-picking the performance generally degrades with the age of the trade
#   With gain-picking this is much less the case because the gain-pick generally occurs early in the trade if the threshold is small
#   This result explains, also, why small thresholds should be used
#   More interestingly, though, is the fact that the performance is maxed at stop-time<-periodicity/2+1:
#     This corresponds more or less to the time-shift of the filter i.e. this is an intuitively very appealing result in the presence of mean-reversion
stop_time<-as.integer(periodicity/2+1)
#stop_time<-6
main_perf_as_function_of_day_after_trade_func(weekday,trade_all_pairs_with_weekday.obj,trade_all_pairs_no_weekday.obj,gain_pick_main_obj,FX,plot_T,stop_time)
source('C:/wia_desktop/2018/Blog/Tutorials/Feb 2018/21.02.2018/perf_as_func_of_day_in_trade.R')
stop_time<-as.integer(periodicity/2+1)
#stop_time<-6
main_perf_as_function_of_day_after_trade_func(weekday,trade_all_pairs_with_weekday.obj,trade_all_pairs_no_weekday.obj,gain_pick_main_obj,FX,plot_T,stop_time)
rm(list=ls())
library(xts)
#install.packages("devtools")
library(devtools)
# Load MDFA package from github
devtools::install_github("wiaidp/MDFA")
# MDFA package: EURUSD is now part of the data in the package
library(MDFA)
# Load the data (if it's not in the MDFA-package)
load(file=paste(getwd(),"/FX_mat.Rdata",sep=""))
tail(FX_mat)
start_date<-"2010-01-01/"
#--------------------------------------------------------------------------------------------
# Data transformations:
#   Invert pairs not going from USD
#   Apply log (transform ratios into differences)
#   Map into [0,1]
#   Apply differences
# Here we invert pairs which go into USD i.e. pairs which are not referenced from USD
FX_mat_USD<-FX_mat
for (i in 1:ncol(FX_mat))
{
if (substr(colnames(FX_mat)[i],1,3)!="USD")
{
FX_mat_USD[,i]<-1/FX_mat[,i]
colnames(FX_mat_USD)[i]<-paste(substr(colnames(FX_mat)[i],4,6),substr(colnames(FX_mat)[i],1,3),sep="")
}
}
# All pairs now go from USD (into G10 currencies)
tail(FX_mat_USD)
# Take the log: that way the ratios (USD/EUR) become differences (log(USD)-log(EUR))
#   take log prior to [0,1] mapping (otherwise log=-\infty)
FX<-log(FX_mat_USD[start_date])
# Compute log-returns for trading below (note that signals of inverted pairs must be inverted in real-world)
FX_diff<-diff(FX)
# Maping into [0,1]: for purpose of direct comparison of pairs
FX_scale<-FX
for (i in 1:ncol(FX))
FX_scale[,i]<-(FX[,i]-as.double(min(FX[,i])))/(as.double(max(FX[,i]))-as.double(min(FX[,i])))
tail(FX_scale)
# Kind of cointegration from 2000 on
colo<-rainbow(ncol(FX_scale))
plot(FX_scale[,1],main=paste("USD against G9, scaled"))
mtext(colnames(FX_scale)[1],col=colo[1],line=-1)
for (i in 2:ncol(FX_scale))
{
lines(FX_scale[,i],col=colo[i])
mtext(colnames(FX_scale)[i],col=colo[i],line=-i)
}
lines(as.xts(apply(FX_scale,1,mean)),lwd=2,col="black")
FX_scale_diff<-diff(FX_scale)
# By aggragting USD over all pairs we obtain USD against a 'world basket': USD/World
#   Any other pair subtracted from US/world will provide the world-basket of the corresponding currency
#   So for example log(USD/world)-log(USDJPY)=log(JPY/world)
USDg9<-as.xts(apply(FX_scale,1,mean))
# Here we compute the ratio of var(diff)/var(level) (mean reversion vs. trending)
sqrt(var(diff(USDg9),na.rm=T)/var(USDg9))
for (i in 1:ncol(FX_scale))
print(c(colnames(FX_scale)[i],sqrt(var(diff(FX_scale[,i]),na.rm=T)/var(FX_scale[,i]))))
#-----------------------------------------------------------------------------------------------
# Filtering and trading: sign and weight rules
# We use FX_diff as computed above: all pairs go from USD (in any g9-currency), log-returns
#   Load function
source(paste(getwd(),"/mdfa_mse_trade_func.r",sep=""))
source(paste(getwd(),"/plot_func.r",sep=""))
source(paste(getwd(),"/perf_coincident_signals.r",sep=""))
source(paste(getwd(),"/gain_picking.r",sep=""))
source(paste(getwd(),"/perf_as_func_of_day_in_trade.r",sep=""))
K<-240
# Spectrum
weight_func<-matrix(rep(1,2*(K+1)),ncol=2)
#weight_func[1,]<-1000
periodicity<-10
Lag<-0
L<-10*periodicity
L<-100
L<-min(2*K,L)
plot_T<-F
asset<-"USDEUR"
lag_fx<-1
sign_day_of_week<-rep(1,5)
sign_day_of_week[5]<--1
x<-FX_diff[,asset]
#-------------------------------------------------
# MSE estimation and trading: sign rule and signal weighting
x<-FX_diff[,asset]
# This function is in mdfa_mse_trade_func.r
# MSE estimation and trading: sign rule and signal weighting
mdfa_mse_trade_obj<-mdfa_mse_trade_func(K,periodicity,L,Lag,lag_fx,x,plot_T,weight_func,sign_day_of_week)
cum_perf_sign<-mdfa_mse_trade_obj$cum_perf_sign
# Weekday effect
plot_weekday_func(cum_perf_sign,asset)
# This function is in mdfa_mse_trade_func.r
# Loop over all G10 pairs
#   With weekday effect
trade_all_pairs_with_weekday.obj<-trade_all_pairs_mse_func(FX_diff,K,periodicity,L,Lag,lag_fx,x,plot_T,weight_func,sign_day_of_week)
#   No weekday effect (sign_day_of_week=1 for all days)
sign_all_days_one<-rep(1,ncol(FX_diff))
trade_all_pairs_no_weekday.obj<-trade_all_pairs_mse_func(FX_diff,K,periodicity,L,Lag,lag_fx,x,plot_T,weight_func,sign_all_days_one)
# perf_plot function is in plot_func.r
# Performances: long only
sharpe_long<-sqrt(250)*apply(FX_diff[-1,],2,mean)/sqrt(apply(FX_diff[-1,],2,var))
name<-"Buy&hold"
perf_obj<-perf_plot(as.xts(t(t(FX)-as.double(FX[1,]))),sharpe_long,name)
# Performances: weekday only (no filtering)
name<-"Weekday only"
trade_weekday.obj<-trade_weekday_sign_func(FX_diff,sign_day_of_week)
perf_obj<-perf_plot(trade_weekday.obj$cum_perf_weekday_sign,trade_weekday.obj$sharpe_weekday_sign,name)
# Performances: filtering without weekday effect
name<-"Filtering only: sign "
perf_sign<-trade_all_pairs_no_weekday.obj$perf_sign
sharpe_sign<-trade_all_pairs_no_weekday.obj$sharpe_sign
perf_obj<-perf_plot(perf_sign,sharpe_sign,name)
# Performances: filtering with weekday effect
name<-"Filtering with Weekday: sign"
perf_sign<-trade_all_pairs_with_weekday.obj$perf_sign
sharpe_sign<-trade_all_pairs_with_weekday.obj$sharpe_sign
perf_obj<-perf_plot(perf_sign,sharpe_sign,name)
# Performances: filtering without weekday effect
name<-"Filtering only: weight "
perf_weight<-trade_all_pairs_no_weekday.obj$perf_weight
sharpe_weight<-trade_all_pairs_no_weekday.obj$sharpe_weight
perf_obj<-perf_plot(perf_weight,sharpe_weight,name)
# Performances: filtering with weekday effect
name<-"Filtering with Weekday: weight "
perf_weight<-trade_all_pairs_with_weekday.obj$perf_weight
sharpe_weight<-trade_all_pairs_with_weekday.obj$sharpe_weight
perf_obj<-perf_plot(perf_weight,sharpe_weight,name)
#------------------------------------------------------------------
# Function perf_coincident_signals is in experimental.r
# It selects time points with coincident filter signals (for example at last 4 positive signals with respect to USD)
# and computes performances when restricted to these time points: the performances as well as the market exposure
# (how often one is in the market) are computed
# Findings:
# For good signals (periodicity=10) one finds that
#   1. at-least performances (at least 6 or 8 coincident signs) are still very good even with reduced market exposure (30%)
#   2. at-most performances degrade rapidly i.e. conflicting signals are bad times
# Recall that all pairs are going out of USD here i.e. USD is the base currency for all 9 pairs
perf_coincident_signals(trade_all_pairs_no_weekday.obj)
perf_coincident_signals(trade_all_pairs_with_weekday.obj)
#--------------------------------------------------------------------
# Function gain_pick_func is in gain_picking.r
# data:
#   either sign-trading or weighted trading
#   with or without weekday effect
# Apply weekday effects as specified in sign_day_of_week:
#   This has a strong effect: doubling performances, either on long or short current sample, with or without picking or stop-rules
weekday<-T
# Trading rules: apply sign of filter or whole filter output (weight):
#   weight=T is interesting particularly towards sample end (2017/2018).
#   The rule is differentiable and one can formulate a corresponding MDFA-target
#   Trading costs: new trade each day in order to follow signal-weight (but that could be discretized)
#   Possibly huge effects at turmoils due to implicit squaring (trim signal in such a case)
sign_rule<-F
# If T then we omit filtering i.e. we can evaluate effect of gain-picking alone (without filter):
#   This is just for evaluation purposes: what is the added value of filter
#   Effect is strong (at least when periodicity=10) i.e. filter is very important
#   default is F
naked_gain_picking<-F
# Standard gain-pick threshold: 20 bp (note that mean absolute daily move is about 50bp)
# One could select threshold=0: perf are even better (for daily trading the movements are 'large' in comparison to spread; in contrast to intraday trading where threshold>20bP is required)
# Selecting threshold=-100 means that the condition is always immediately satisfied i.e. this is the performance
#   of first day after a sign change occurred
threshold<-0.002*periodicity/10
# This parameter affects the partitioning of perf (performances) into episodes specified by sign changes of signal
#   Note that perf is based on lagged signal, already. So lag_signal does not affect perf.
#   Instead, lag_signal affects gain-picking: starting at sign change (or later as specified by lag_signal) and ending at next sign change (or later as specified by lag_signal)
#   Any positive value is feasable (causality)
# Note that one uses the signal without weekday effects for perf with or without weekday
#   i.e. one uses the pure filter output without additional sign-changes depending on weekday
lag_signal<-1
plot_T<-T
gain_pick_main_obj<-gain_pick_main_func(weekday,trade_all_pairs_with_weekday.obj,trade_all_pairs_no_weekday.obj,naked_gain_picking,FX_mat,start_date,threshold,lag_signal,plot_T,sign_rule)
#----------------------------------------------------------------
# Performances depending on day after signal change (first day, second day,...)
# The idea is: if performances are almost as good (or even better) when stoping trades earlier then we should do so
#   Note that if trade is stopped earlier (either by gain-pick or by next sign-change) then
#   we just use the latest perf available i.e. we look at min(i,last day of k-th trade) where i runs through all possible days after a sign-change
# Here is the most interesting outcome when periodicity<-10 (the results are dependent on the signal, of course)
#   Without gain-picking the performance generally degrades with the age of the trade
#   With gain-picking this is much less the case because the gain-pick generally occurs early in the trade if the threshold is small
#   This result explains, also, why small thresholds should be used
#   More interestingly, though, is the fact that the performance is maxed at stop-time<-periodicity/2+1:
#     This corresponds more or less to the time-shift of the filter i.e. this is an intuitively very appealing result in the presence of mean-reversion
stop_time<-as.integer(periodicity/2+1)
#stop_time<-6
main_perf_as_function_of_day_after_trade_func(weekday,trade_all_pairs_with_weekday.obj,trade_all_pairs_no_weekday.obj,gain_pick_main_obj,FX,plot_T,stop_time)
source('C:/wia_desktop/2018/Blog/Tutorials/Feb 2018/21.02.2018/perf_as_func_of_day_in_trade.R')
source('C:/wia_desktop/2018/Blog/Tutorials/Feb 2018/21.02.2018/perf_as_func_of_day_in_trade.R')
main_perf_as_function_of_day_after_trade_func(weekday,trade_all_pairs_with_weekday.obj,trade_all_pairs_no_weekday.obj,gain_pick_main_obj,FX,plot_T,stop_time,gain_pick_main_obj)
source('C:/wia_desktop/2018/Blog/Tutorials/Feb 2018/21.02.2018/perf_as_func_of_day_in_trade.R')
source('C:/wia_desktop/2018/Blog/Tutorials/Feb 2018/21.02.2018/perf_as_func_of_day_in_trade.R')
main_perf_as_function_of_day_after_trade_func(weekday,trade_all_pairs_with_weekday.obj,trade_all_pairs_no_weekday.obj,gain_pick_main_obj,FX,plot_T,stop_time)
source('C:/wia_desktop/2018/Blog/Tutorials/Feb 2018/21.02.2018/perf_as_func_of_day_in_trade.R')
main_perf_as_function_of_day_after_trade_func(weekday,trade_all_pairs_with_weekday.obj,trade_all_pairs_no_weekday.obj,gain_pick_main_obj,FX,plot_T,stop_time)
rm(list=ls())
library(xts)
#install.packages("devtools")
library(devtools)
# Load MDFA package from github
devtools::install_github("wiaidp/MDFA")
# MDFA package: EURUSD is now part of the data in the package
library(MDFA)
load(file=paste(getwd(),"/FX_mat.Rdata",sep=""))
tail(FX_mat)
start_date<-"2010-01-01/"
FX_mat_USD<-FX_mat
for (i in 1:ncol(FX_mat))
{
if (substr(colnames(FX_mat)[i],1,3)!="USD")
{
FX_mat_USD[,i]<-1/FX_mat[,i]
colnames(FX_mat_USD)[i]<-paste(substr(colnames(FX_mat)[i],4,6),substr(colnames(FX_mat)[i],1,3),sep="")
}
}
# All pairs now go from USD (into G10 currencies)
tail(FX_mat_USD)
FX<-log(FX_mat_USD[start_date])
# Compute log-returns for trading below (note that signals of inverted pairs must be inverted in real-world)
FX_diff<-diff(FX)
FX_scale<-FX
for (i in 1:ncol(FX))
FX_scale[,i]<-(FX[,i]-as.double(min(FX[,i])))/(as.double(max(FX[,i]))-as.double(min(FX[,i])))
tail(FX_scale)
colo<-rainbow(ncol(FX_scale))
plot(FX_scale[,1],main=paste("USD against G9, scaled"))
mtext(colnames(FX_scale)[1],col=colo[1],line=-1)
for (i in 2:ncol(FX_scale))
{
lines(FX_scale[,i],col=colo[i])
mtext(colnames(FX_scale)[i],col=colo[i],line=-i)
}
lines(as.xts(apply(FX_scale,1,mean)),lwd=2,col="black")
FX_scale_diff<-diff(FX_scale)
# By aggragting USD over all pairs we obtain USD against a 'world basket': USD/World
#   Any other pair subtracted from US/world will provide the world-basket of the corresponding currency
#   So for example log(USD/world)-log(USDJPY)=log(JPY/world)
USDg9<-as.xts(apply(FX_scale,1,mean))
# Here we compute the ratio of var(diff)/var(level) (mean reversion vs. trending)
sqrt(var(diff(USDg9),na.rm=T)/var(USDg9))
for (i in 1:ncol(FX_scale))
print(c(colnames(FX_scale)[i],sqrt(var(diff(FX_scale[,i]),na.rm=T)/var(FX_scale[,i]))))
source(paste(getwd(),"/mdfa_mse_trade_func.r",sep=""))
source(paste(getwd(),"/plot_func.r",sep=""))
source(paste(getwd(),"/perf_coincident_signals.r",sep=""))
source(paste(getwd(),"/gain_picking.r",sep=""))
source(paste(getwd(),"/perf_as_func_of_day_in_trade.r",sep=""))
K<-240
# Spectrum
weight_func<-matrix(rep(1,2*(K+1)),ncol=2)
#weight_func[1,]<-1000
periodicity<-10
Lag<-0
L<-10*periodicity
L<-100
L<-min(2*K,L)
plot_T<-F
asset<-"USDEUR"
lag_fx<-1
sign_day_of_week<-rep(1,5)
sign_day_of_week[5]<--1
x<-FX_diff[,asset]
x<-FX_diff[,asset]
# This function is in mdfa_mse_trade_func.r
# MSE estimation and trading: sign rule and signal weighting
mdfa_mse_trade_obj<-mdfa_mse_trade_func(K,periodicity,L,Lag,lag_fx,x,plot_T,weight_func,sign_day_of_week)
cum_perf_sign<-mdfa_mse_trade_obj$cum_perf_sign
# Weekday effect
plot_weekday_func(cum_perf_sign,asset)
plot_weekday_func(cum_perf_sign,asset)
trade_all_pairs_with_weekday.obj<-trade_all_pairs_mse_func(FX_diff,K,periodicity,L,Lag,lag_fx,x,plot_T,weight_func,sign_day_of_week)
#   No weekday effect (sign_day_of_week=1 for all days)
sign_all_days_one<-rep(1,ncol(FX_diff))
trade_all_pairs_no_weekday.obj<-trade_all_pairs_mse_func(FX_diff,K,periodicity,L,Lag,lag_fx,x,plot_T,weight_func,sign_all_days_one)
sharpe_long<-sqrt(250)*apply(FX_diff[-1,],2,mean)/sqrt(apply(FX_diff[-1,],2,var))
name<-"Buy&hold"
perf_obj<-perf_plot(as.xts(t(t(FX)-as.double(FX[1,]))),sharpe_long,name)
name<-"Weekday only"
trade_weekday.obj<-trade_weekday_sign_func(FX_diff,sign_day_of_week)
perf_obj<-perf_plot(trade_weekday.obj$cum_perf_weekday_sign,trade_weekday.obj$sharpe_weekday_sign,name)
source('C:/wia_desktop/Archive/2018/Blog/Tutorials/Feb 2018/21.02.2018/plot_func.R')
sharpe_long<-sqrt(250)*apply(FX_diff[-1,],2,mean)/sqrt(apply(FX_diff[-1,],2,var))
name<-"Buy&hold"
perf_obj<-perf_plot(as.xts(t(t(FX)-as.double(FX[1,]))),sharpe_long,name)
# Performances: weekday only (no filtering)
name<-"Weekday only"
trade_weekday.obj<-trade_weekday_sign_func(FX_diff,sign_day_of_week)
perf_obj<-perf_plot(trade_weekday.obj$cum_perf_weekday_sign,trade_weekday.obj$sharpe_weekday_sign,name)
name<-"Filtering only: sign "
perf_sign<-trade_all_pairs_no_weekday.obj$perf_sign
sharpe_sign<-trade_all_pairs_no_weekday.obj$sharpe_sign
perf_obj<-perf_plot(perf_sign,sharpe_sign,name)
name<-"Filtering with Weekday: sign"
perf_sign<-trade_all_pairs_with_weekday.obj$perf_sign
sharpe_sign<-trade_all_pairs_with_weekday.obj$sharpe_sign
perf_obj<-perf_plot(perf_sign,sharpe_sign,name)
# Performances: filtering without weekday effect
sign_day_of_week
name<-"Filtering only: weight "
perf_weight<-trade_all_pairs_no_weekday.obj$perf_weight
sharpe_weight<-trade_all_pairs_no_weekday.obj$sharpe_weight
perf_obj<-perf_plot(perf_weight,sharpe_weight,name)
name<-"Filtering with Weekday: weight "
perf_weight<-trade_all_pairs_with_weekday.obj$perf_weight
sharpe_weight<-trade_all_pairs_with_weekday.obj$sharpe_weight
perf_obj<-perf_plot(perf_weight,sharpe_weight,name)
perf_coincident_signals(trade_all_pairs_no_weekday.obj)
View(perf_coincident_signals)
source('C:/wia_desktop/Archive/2018/Blog/Tutorials/Feb 2018/21.02.2018/perf_coincident_signals.R')
perf_coincident_signals(trade_all_pairs_no_weekday.obj)
perf_coincident_signals(trade_all_pairs_with_weekday.obj)
weekday<-T
# Trading rules: apply sign of filter or whole filter output (weight):
#   weight=T is interesting particularly towards sample end (2017/2018).
#   The rule is differentiable and one can formulate a corresponding MDFA-target
#   Trading costs: new trade each day in order to follow signal-weight (but that could be discretized)
#   Possibly huge effects at turmoils due to implicit squaring (trim signal in such a case)
sign_rule<-F
# If T then we omit filtering i.e. we can evaluate effect of gain-picking alone (without filter):
#   This is just for evaluation purposes: what is the added value of filter
#   Effect is strong (at least when periodicity=10) i.e. filter is very important
#   default is F
naked_gain_picking<-F
# Standard gain-pick threshold: 20 bp (note that mean absolute daily move is about 50bp)
# One could select threshold=0: perf are even better (for daily trading the movements are 'large' in comparison to spread; in contrast to intraday trading where threshold>20bP is required)
# Selecting threshold=-100 means that the condition is always immediately satisfied i.e. this is the performance
#   of first day after a sign change occurred
threshold<-0.002*periodicity/10
# This parameter affects the partitioning of perf (performances) into episodes specified by sign changes of signal
#   Note that perf is based on lagged signal, already. So lag_signal does not affect perf.
#   Instead, lag_signal affects gain-picking: starting at sign change (or later as specified by lag_signal) and ending at next sign change (or later as specified by lag_signal)
#   Any positive value is feasable (causality)
# Note that one uses the signal without weekday effects for perf with or without weekday
#   i.e. one uses the pure filter output without additional sign-changes depending on weekday
lag_signal<-1
plot_T<-T
gain_pick_main_obj<-gain_pick_main_func(weekday,trade_all_pairs_with_weekday.obj,trade_all_pairs_no_weekday.obj,naked_gain_picking,FX_mat,start_date,threshold,lag_signal,plot_T,sign_rule)
View(gain_pick_main_func)
source('C:/wia_desktop/Archive/2018/Blog/Tutorials/Feb 2018/21.02.2018/gain_picking.R')
weekday<-T
# Trading rules: apply sign of filter or whole filter output (weight):
#   weight=T is interesting particularly towards sample end (2017/2018).
#   The rule is differentiable and one can formulate a corresponding MDFA-target
#   Trading costs: new trade each day in order to follow signal-weight (but that could be discretized)
#   Possibly huge effects at turmoils due to implicit squaring (trim signal in such a case)
sign_rule<-F
# If T then we omit filtering i.e. we can evaluate effect of gain-picking alone (without filter):
#   This is just for evaluation purposes: what is the added value of filter
#   Effect is strong (at least when periodicity=10) i.e. filter is very important
#   default is F
naked_gain_picking<-F
# Standard gain-pick threshold: 20 bp (note that mean absolute daily move is about 50bp)
# One could select threshold=0: perf are even better (for daily trading the movements are 'large' in comparison to spread; in contrast to intraday trading where threshold>20bP is required)
# Selecting threshold=-100 means that the condition is always immediately satisfied i.e. this is the performance
#   of first day after a sign change occurred
threshold<-0.002*periodicity/10
# This parameter affects the partitioning of perf (performances) into episodes specified by sign changes of signal
#   Note that perf is based on lagged signal, already. So lag_signal does not affect perf.
#   Instead, lag_signal affects gain-picking: starting at sign change (or later as specified by lag_signal) and ending at next sign change (or later as specified by lag_signal)
#   Any positive value is feasable (causality)
# Note that one uses the signal without weekday effects for perf with or without weekday
#   i.e. one uses the pure filter output without additional sign-changes depending on weekday
lag_signal<-1
plot_T<-T
gain_pick_main_obj<-gain_pick_main_func(weekday,trade_all_pairs_with_weekday.obj,trade_all_pairs_no_weekday.obj,naked_gain_picking,FX_mat,start_date,threshold,lag_signal,plot_T,sign_rule)
stop_time<-as.integer(periodicity/2+1)
#stop_time<-6
main_perf_as_function_of_day_after_trade_func(weekday,trade_all_pairs_with_weekday.obj,trade_all_pairs_no_weekday.obj,gain_pick_main_obj,FX,plot_T,stop_time)
View(main_perf_as_function_of_day_after_trade_func)
plot_T
source('C:/wia_desktop/Archive/2018/Blog/Tutorials/Feb 2018/21.02.2018/perf_as_func_of_day_in_trade.R')
stop_time<-as.integer(periodicity/2+1)
#stop_time<-6
main_perf_as_function_of_day_after_trade_func(weekday,trade_all_pairs_with_weekday.obj,trade_all_pairs_no_weekday.obj,gain_pick_main_obj,FX,plot_T,stop_time)
