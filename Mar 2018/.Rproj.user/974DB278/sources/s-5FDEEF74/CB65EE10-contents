
library(Quandl)
library(xts)
# Library for tables
library(Hmisc)
require(xtable)
#install.packages("devtools")
library(devtools)
# Load MDFA package from github
devtools::install_github("wiaidp/MDFA")
# MDFA package
library(MDFA)





path.pgm <- paste(getwd(),"/",sep="")


QuandlAPIKey <- "cxvP9tfN13a9tvMmsXag"

Quandl.api_key(QuandlAPIKey)


# Reading data and changing the date format
#Data <- read.csv(file= paste(getwd(),"/data/EURUSD.txt", sep = ""))

FX_pair<-"EURUSD"

Data <- Quandl(paste("ECB/",FX_pair,sep=""))
FX<-Data[,2]
names(FX)<-Data[,1]
FX<-as.xts(FX)


#------------------------------------------------------------------
# Example 1: forecast based on white noise spectrum
#   Forecast: Gamma=1 for all frequencies
#   Try various Lag (Lag=0,1,2 and Lag=-1,-2,...)
#   Try various K (denseness of frequency grid)
#   Look at the DFA criterion value

# Denseness of discret frequency grid
K<-240
# Filter length
L<-22
# One-step ahead forecast
Lag<--1
# cutoff
cutoff<-pi
# Target ideal trend
Gamma<-(0:(K))<=K*cutoff/pi+1.e-9

plot(Gamma,type="l",main="Target",
     axes=F,xlab="Frequency",ylab="Amplitude",col="black",ylim=c(0,1))
axis(1,at=c(0,1:6*K/6+1),labels=c("0","pi/6","2pi/6","3pi/6",
                                     "4pi/6","5pi/6","pi"))
axis(2)
box()


weight_func_white_noise<-matrix(rep(1,2*(K+1)),ncol=2)

tail(weight_func_white_noise)

mdfa_obj_mse<-MDFA_mse(L,weight_func_white_noise,Lag,Gamma)$mdfa_obj 

# Coefficients
mdfa_obj_mse$b
# Criterion
mdfa_obj_mse$MS_error  
# Plot of amplitude
plot(abs(mdfa_obj_mse$trffkt),type="l",main=paste("Amplitude concurrent, denseness=",K,sep=""),
     axes=F,xlab="Frequency",ylab="Amplitude",col="black",ylim=c(0,1))
axis(1,at=c(0,1:6*K/6+1),labels=c("0","pi/6","2pi/6","3pi/6",
                                  "4pi/6","5pi/6","pi"))
axis(2)
box()


# This piece replicates the above with the generic mdfa_analytic
if (F)
{
# Call default MSE-parameters  
  source(file=paste(path.pgm,"control_default.r",sep=""))
# By default Lag=0
  # One-step ahead forecast
  Lag<--1
# Estimate filter coefficients:
  mdfa_obj<-mdfa_analytic(L, lambda, weight_func_white_noise, Lag, Gamma, eta, cutoff, i1,i2, weight_constraint, lambda_cross, lambda_decay, lambda_smooth,lin_eta, shift_constraint, grand_mean, b0_H0, c_eta, weight_structure,white_noise, synchronicity, lag_mat, troikaner) 
# Filter coefficients: compare MDFA and previous DFA
  mdfa_obj$b
  
  plot(abs(mdfa_obj$trffkt),type="l",main=paste("Amplitude concurrent, denseness=",K,sep=""),
       axes=F,xlab="Frequency",ylab="Amplitude",col="black",ylim=c(0,1))
  axis(1,at=c(0,1:6*K/6+1),labels=c("0","pi/6","2pi/6","3pi/6",
                                    "4pi/6","5pi/6","pi"))
  axis(2)
  box()
}

#-----------------------------------------------------------------------------------------------------------------
# Same as above but with a large value of weight_func_white_noise in frequency zero
#   Too large a value results in near singularity i.e. numerical error: stay realist
#   trick: 1000*max(weight_func_white_noise) 

weight_func_white_noise_new<-weight_func_white_noise
weight_func_white_noise_new[1,]<-1000*max(abs(weight_func_white_noise[1,]))


mdfa_obj_mse<-MDFA_mse(L,weight_func_white_noise_new,Lag,Gamma)$mdfa_obj 

# Coefficients
b<-mdfa_obj_mse$b
ts.plot(b)

# Criterion
mdfa_obj_mse$MS_error  
# Plot of amplitude
plot(abs(mdfa_obj_mse$trffkt),type="l",main=paste("Amplitude concurrent, denseness=",K,sep=""),
     axes=F,xlab="Frequency",ylab="Amplitude",col="black",ylim=c(0,1))
axis(1,at=c(0,1:6*K/6+1),labels=c("0","pi/6","2pi/6","3pi/6",
                                  "4pi/6","5pi/6","pi"))
axis(2)
box()

#-----------------------------------------------------------------------------------------------------------------
# Filter series 


returns<-diff(log(Fx))

par(mfrow=c(2,1))
plot(FX,main=paste(FX_pair,": ",index(FX)[1],"/",index(FX[length(FX)]),sep=" "))
plot(returns,main=paste("Log-retruns",FX_pair,": ",index(FX)[1],"/",index(FX[length(FX)]),sep=" "))

# We need ordinary time series (not xts) for filtering because of lag-structure when computing output
x<-as.double(returns)
names(x)<-index(FX)

yhat<-rep(NA,length(x))
for (i in L:length(x))
  yhat[i]<-sum(b*x[i:(i-L+1)])

names(yhat)<-names(x)

par(mfrow=c(1,1))
plot(returns,main="Returns (black) and filtered series (red)")
lines(as.xts(yhat),col="red")


#--------------------------------------------------------------------------------------------------
# Compute performances: sign-rule and signal weighting
par(mfrow=c(2,1))
# Trading performance: sign-rule
cum_log_perf<-cumsum(na.omit(lag(sign(as.xts(yhat)),1)*returns))

plot(cum_log_perf,main="Signum rule")

# Signal weigthing
#   We weight the trade by the filter-output (proxi for strength of signal)
#   Normalize resulting perf by scale of signal: sqrt(var(yhat,na.rm=T))
cum_log_perf<-cumsum(na.omit(lag(as.xts(yhat),1)*returns))/sqrt(var(yhat,na.rm=T))


plot(cum_log_perf,main="Signal weighting")

#--------------------------------------------------------------------------------------------------
#-------------------------------------------------------------------------------------------------
# Alternative weight_func

# Random-walk
spec_random_walk<-1/(1-exp(1.i*(0:K)*pi/K))
# Remove singularity in frequency zero (otherwise computations stop by an error)
spec_random_walk[1]<-1000*max(abs(spec_random_walk[-1]))
# Define the DFT of traget and explanatory: we use absolute values for simplicity (we could leave complex values)
#   Note that this is not the pseudo-spectral density (which would correspond to the square)
weight_func_random_walk<-abs(cbind(spec_random_walk,spec_random_walk))

mdfa_obj_mse<-MDFA_mse(L,weight_func_random_walk,Lag,Gamma)$mdfa_obj 

# Coefficients
b<-mdfa_obj_mse$b
ts.plot(b)

# Criterion
mdfa_obj_mse$MS_error  
# Plot of amplitude
plot(abs(mdfa_obj_mse$trffkt),type="l",main=paste("Amplitude concurrent, denseness=",K,sep=""),
     axes=F,xlab="Frequency",ylab="Amplitude",col="black",ylim=c(0,1))
axis(1,at=c(0,1:6*K/6+1),labels=c("0","pi/6","2pi/6","3pi/6",
                                  "4pi/6","5pi/6","pi"))
axis(2)
box()


#------------------------------------------------------------------------------------------
# Most general setting in these examples: random-walk (previous) + noise (first example)

# Random-walk+noise

# Take any positive weight in [0,1]
alpha<-0.8
# Ensure that the weight is in [0,1]
alpha<-max(0,alpha)
alpha<-min(1,alpha)
# New general weight_func is alpha*noise+random-walk
#   For alpha=0 the random-walk is obtained
#   For alpha=1 the white noise is obtained
weight_func_general<-(alpha*weight_func_white_noise_new+(1-alpha)*weight_func_random_walk*K/sum(weight_func_random_walk))
weight_func_general<-(alpha*weight_func_white_noise_new+(1-alpha)*weight_func_random_walk)


mdfa_obj_mse_general<-MDFA_mse(L,weight_func_general,Lag,Gamma)$mdfa_obj 

# Coefficients
b<-mdfa_obj_mse_general$b
ts.plot(b)

# Criterion
mdfa_obj_mse_general$MS_error  
# Plot of amplitude
plot(abs(mdfa_obj_mse_general$trffkt),type="l",main=paste("Amplitude concurrent, denseness=",K,sep=""),
     axes=F,xlab="Frequency",ylab="Amplitude",col="black",ylim=c(0,1))
axis(1,at=c(0,1:6*K/6+1),labels=c("0","pi/6","2pi/6","3pi/6",
                                  "4pi/6","5pi/6","pi"))
axis(2)
box()










